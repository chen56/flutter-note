// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.973459

library;

import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/semantics/semantics.dart';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/foundation/key.dart';
export 'dart:ui' show Offset, Rect, SemanticsAction, SemanticsFlag, StringAttribute, TextDirection, VoidCallback;
export 'package:flutter/foundation.dart'
    show
        DiagnosticLevel,
        DiagnosticPropertiesBuilder,
        DiagnosticsNode,
        DiagnosticsTreeStyle,
        Key,
        TextTreeConfiguration;
export 'package:flutter/services.dart' show TextSelection;
export 'package:vector_math/vector_math_64.dart' show Matrix4;
export 'semantics_event.dart' show SemanticsEvent;

/// class SemanticsTag
class SemanticsTagMate {
  /// SemanticsTag SemanticsTag(String name)
  SemanticsTagMate(
// param: String name
      String name) {}
}

/// class ChildSemanticsConfigurationsResult
class ChildSemanticsConfigurationsResultMate {}

/// class ChildSemanticsConfigurationsResultBuilder
class ChildSemanticsConfigurationsResultBuilderMate {
  /// ChildSemanticsConfigurationsResultBuilder ChildSemanticsConfigurationsResultBuilder()
  ChildSemanticsConfigurationsResultBuilderMate() {}
}

/// class CustomSemanticsAction
class CustomSemanticsActionMate {
  /// CustomSemanticsAction CustomSemanticsAction({required String label})
  CustomSemanticsActionMate(
      {
// param: {required String label}
      required String label}) {}

  /// CustomSemanticsAction CustomSemanticsAction.overridingAction({required String hint, required SemanticsAction action})
  CustomSemanticsActionMate.overridingAction({
// param: {required String hint}
    required String hint,
// param: {required SemanticsAction action}
    required SemanticsAction action,
  }) {}
}

/// class AttributedString
class AttributedStringMate {
  /// AttributedString AttributedString(String string, {List<StringAttribute> attributes = const <StringAttribute>[]})
  AttributedStringMate(
// param: String string
    String string, {
// param: {List<StringAttribute> attributes = const <StringAttribute>[]}
    required List<StringAttribute> attributes,
  }) {}
}

/// class AttributedStringProperty extends DiagnosticsProperty<AttributedString>
class AttributedStringPropertyMate {
  /// AttributedStringProperty AttributedStringProperty(String name, AttributedString? value, {bool showName = true, bool showWhenEmpty = false, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
  AttributedStringPropertyMate(
// param: String name
    String name,
// param: AttributedString? value
    AttributedString? value, {
// param: {bool showName = true}
    required bool showName,
// param: {bool showWhenEmpty = false}
    required bool showWhenEmpty,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
// param: {String? description}
    String? description,
  }) {}
}

/// class SemanticsData with Diagnosticable
class SemanticsDataMate {
  /// SemanticsData SemanticsData({required int flags, required int actions, required AttributedString attributedLabel, required AttributedString attributedValue, required AttributedString attributedIncreasedValue, required AttributedString attributedDecreasedValue, required AttributedString attributedHint, required String tooltip, required TextDirection? textDirection, required Rect rect, required double elevation, required double thickness, required TextSelection? textSelection, required int? scrollIndex, required int? scrollChildCount, required double? scrollPosition, required double? scrollExtentMax, required double? scrollExtentMin, required int? platformViewId, required int? maxValueLength, required int? currentValueLength, Set<SemanticsTag>? tags, Matrix4? transform, List<int>? customSemanticsActionIds})
  SemanticsDataMate({
// param: {required int flags}
    required int flags,
// param: {required int actions}
    required int actions,
// param: {required AttributedString attributedLabel}
    required AttributedString attributedLabel,
// param: {required AttributedString attributedValue}
    required AttributedString attributedValue,
// param: {required AttributedString attributedIncreasedValue}
    required AttributedString attributedIncreasedValue,
// param: {required AttributedString attributedDecreasedValue}
    required AttributedString attributedDecreasedValue,
// param: {required AttributedString attributedHint}
    required AttributedString attributedHint,
// param: {required String tooltip}
    required String tooltip,
// param: {required TextDirection? textDirection}
    required TextDirection? textDirection,
// param: {required Rect rect}
    required Rect rect,
// param: {required double elevation}
    required double elevation,
// param: {required double thickness}
    required double thickness,
// param: {required TextSelection? textSelection}
    required TextSelection? textSelection,
// param: {required int? scrollIndex}
    required int? scrollIndex,
// param: {required int? scrollChildCount}
    required int? scrollChildCount,
// param: {required double? scrollPosition}
    required double? scrollPosition,
// param: {required double? scrollExtentMax}
    required double? scrollExtentMax,
// param: {required double? scrollExtentMin}
    required double? scrollExtentMin,
// param: {required int? platformViewId}
    required int? platformViewId,
// param: {required int? maxValueLength}
    required int? maxValueLength,
// param: {required int? currentValueLength}
    required int? currentValueLength,
// param: {Set<SemanticsTag>? tags}
    Set<SemanticsTag>? tags,
// param: {Matrix4? transform}
    Matrix4? transform,
// param: {List<int>? customSemanticsActionIds}
    List<int>? customSemanticsActionIds,
  }) {}
}

/// class SemanticsHintOverrides extends DiagnosticableTree
class SemanticsHintOverridesMate {
  /// SemanticsHintOverrides SemanticsHintOverrides({String? onTapHint, String? onLongPressHint})
  SemanticsHintOverridesMate({
// param: {String? onTapHint}
    String? onTapHint,
// param: {String? onLongPressHint}
    String? onLongPressHint,
  }) {}
}

/// class SemanticsProperties extends DiagnosticableTree
class SemanticsPropertiesMate {
  /// SemanticsProperties SemanticsProperties({bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? link, bool? header, bool? textField, bool? slider, bool? keyboardKey, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? hidden, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? image, bool? liveRegion, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, String? tooltip, AttributedString? attributedHint, SemanticsHintOverrides? hintOverrides, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(bool)? onMoveCursorForwardByWord, void Function(bool)? onMoveCursorBackwardByWord, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, void Function()? onDismiss, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  SemanticsPropertiesMate({
// param: {bool? enabled}
    bool? enabled,
// param: {bool? checked}
    bool? checked,
// param: {bool? mixed}
    bool? mixed,
// param: {bool? selected}
    bool? selected,
// param: {bool? toggled}
    bool? toggled,
// param: {bool? button}
    bool? button,
// param: {bool? link}
    bool? link,
// param: {bool? header}
    bool? header,
// param: {bool? textField}
    bool? textField,
// param: {bool? slider}
    bool? slider,
// param: {bool? keyboardKey}
    bool? keyboardKey,
// param: {bool? readOnly}
    bool? readOnly,
// param: {bool? focusable}
    bool? focusable,
// param: {bool? focused}
    bool? focused,
// param: {bool? inMutuallyExclusiveGroup}
    bool? inMutuallyExclusiveGroup,
// param: {bool? hidden}
    bool? hidden,
// param: {bool? obscured}
    bool? obscured,
// param: {bool? multiline}
    bool? multiline,
// param: {bool? scopesRoute}
    bool? scopesRoute,
// param: {bool? namesRoute}
    bool? namesRoute,
// param: {bool? image}
    bool? image,
// param: {bool? liveRegion}
    bool? liveRegion,
// param: {int? maxValueLength}
    int? maxValueLength,
// param: {int? currentValueLength}
    int? currentValueLength,
// param: {String? label}
    String? label,
// param: {AttributedString? attributedLabel}
    AttributedString? attributedLabel,
// param: {String? value}
    String? value,
// param: {AttributedString? attributedValue}
    AttributedString? attributedValue,
// param: {String? increasedValue}
    String? increasedValue,
// param: {AttributedString? attributedIncreasedValue}
    AttributedString? attributedIncreasedValue,
// param: {String? decreasedValue}
    String? decreasedValue,
// param: {AttributedString? attributedDecreasedValue}
    AttributedString? attributedDecreasedValue,
// param: {String? hint}
    String? hint,
// param: {String? tooltip}
    String? tooltip,
// param: {AttributedString? attributedHint}
    AttributedString? attributedHint,
// param: {SemanticsHintOverrides? hintOverrides}
    SemanticsHintOverrides? hintOverrides,
// param: {TextDirection? textDirection}
    TextDirection? textDirection,
// param: {SemanticsSortKey? sortKey}
    SemanticsSortKey? sortKey,
// param: {SemanticsTag? tagForChildren}
    SemanticsTag? tagForChildren,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {void Function()? onLongPress}
    void Function()? onLongPress,
// param: {void Function()? onScrollLeft}
    void Function()? onScrollLeft,
// param: {void Function()? onScrollRight}
    void Function()? onScrollRight,
// param: {void Function()? onScrollUp}
    void Function()? onScrollUp,
// param: {void Function()? onScrollDown}
    void Function()? onScrollDown,
// param: {void Function()? onIncrease}
    void Function()? onIncrease,
// param: {void Function()? onDecrease}
    void Function()? onDecrease,
// param: {void Function()? onCopy}
    void Function()? onCopy,
// param: {void Function()? onCut}
    void Function()? onCut,
// param: {void Function()? onPaste}
    void Function()? onPaste,
// param: {void Function(bool)? onMoveCursorForwardByCharacter}
    void Function(
      bool, [
      bool,
    ])?
        onMoveCursorForwardByCharacter,
// param: {void Function(bool)? onMoveCursorBackwardByCharacter}
    void Function(
      bool, [
      bool,
    ])?
        onMoveCursorBackwardByCharacter,
// param: {void Function(bool)? onMoveCursorForwardByWord}
    void Function(
      bool, [
      bool,
    ])?
        onMoveCursorForwardByWord,
// param: {void Function(bool)? onMoveCursorBackwardByWord}
    void Function(
      bool, [
      bool,
    ])?
        onMoveCursorBackwardByWord,
// param: {void Function(TextSelection)? onSetSelection}
    void Function(
      TextSelection, [
      TextSelection,
    ])?
        onSetSelection,
// param: {void Function(String)? onSetText}
    void Function(
      String, [
      String,
    ])?
        onSetText,
// param: {void Function()? onDidGainAccessibilityFocus}
    void Function()? onDidGainAccessibilityFocus,
// param: {void Function()? onDidLoseAccessibilityFocus}
    void Function()? onDidLoseAccessibilityFocus,
// param: {void Function()? onDismiss}
    void Function()? onDismiss,
// param: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions}
    Map<CustomSemanticsAction, void Function()>? customSemanticsActions,
  }) {}
}

/// class SemanticsNode extends AbstractNode with DiagnosticableTreeMixin
class SemanticsNodeMate {
  /// SemanticsNode SemanticsNode({Key? key, void Function()? showOnScreen})
  SemanticsNodeMate({
// param: {Key? key}
    Key? key,
// param: {void Function()? showOnScreen}
    void Function()? showOnScreen,
  }) {}

  /// SemanticsNode SemanticsNode.root({Key? key, void Function()? showOnScreen, required SemanticsOwner owner})
  SemanticsNodeMate.root({
// param: {Key? key}
    Key? key,
// param: {void Function()? showOnScreen}
    void Function()? showOnScreen,
// param: {required SemanticsOwner owner}
    required SemanticsOwner owner,
  }) {}
}

/// class SemanticsOwner extends ChangeNotifier
class SemanticsOwnerMate {
  /// SemanticsOwner SemanticsOwner({required void Function(SemanticsUpdate) onSemanticsUpdate})
  SemanticsOwnerMate(
      {
// param: {required void Function(SemanticsUpdate) onSemanticsUpdate}
      required void Function(
        SemanticsUpdate, [
        SemanticsUpdate,
      ])
          onSemanticsUpdate}) {}
}

/// class SemanticsConfiguration
class SemanticsConfigurationMate {
  /// SemanticsConfiguration SemanticsConfiguration()
  SemanticsConfigurationMate() {}
}

/// abstract class SemanticsSortKey with Diagnosticable implements Comparable<SemanticsSortKey>
abstract class SemanticsSortKeyMate {
  /// SemanticsSortKey SemanticsSortKey({String? name})
  SemanticsSortKeyMate(
      {
// param: {String? name}
      String? name}) {}
}

/// class OrdinalSortKey extends SemanticsSortKey
class OrdinalSortKeyMate {
  /// OrdinalSortKey OrdinalSortKey(double order, {String? name})
  OrdinalSortKeyMate(
// param: double order
    double order, {
// param: {String? name}
    String? name,
  }) {}
}
