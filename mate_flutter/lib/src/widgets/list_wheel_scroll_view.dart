// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.704051

library;

import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/list_wheel_scroll_view.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// abstract class ListWheelChildDelegate
abstract class ListWheelChildDelegateMate {
  /// ListWheelChildDelegate ListWheelChildDelegate()
  ListWheelChildDelegateMate() {}
}

/// class ListWheelChildListDelegate extends ListWheelChildDelegate
class ListWheelChildListDelegateMate {
  /// ListWheelChildListDelegate ListWheelChildListDelegate({required List<Widget> children})
  ListWheelChildListDelegateMate(
      {
// param: {required List<Widget> children}
      required List<Widget> children}) {}
}

/// class ListWheelChildLoopingListDelegate extends ListWheelChildDelegate
class ListWheelChildLoopingListDelegateMate {
  /// ListWheelChildLoopingListDelegate ListWheelChildLoopingListDelegate({required List<Widget> children})
  ListWheelChildLoopingListDelegateMate(
      {
// param: {required List<Widget> children}
      required List<Widget> children}) {}
}

/// class ListWheelChildBuilderDelegate extends ListWheelChildDelegate
class ListWheelChildBuilderDelegateMate {
  /// ListWheelChildBuilderDelegate ListWheelChildBuilderDelegate({required Widget? Function(BuildContext, int) builder, int? childCount})
  ListWheelChildBuilderDelegateMate({
// param: {required Widget? Function(BuildContext, int) builder}
    required Widget? Function(
      BuildContext,
      int, [
      BuildContext,
      int,
    ])
        builder,
// param: {int? childCount}
    int? childCount,
  }) {}
}

/// class FixedExtentScrollController extends ScrollController
class FixedExtentScrollControllerMate {
  /// FixedExtentScrollController FixedExtentScrollController({int initialItem = 0})
  FixedExtentScrollControllerMate(
      {
// param: {int initialItem = 0}
      required int initialItem}) {}
}

/// class FixedExtentMetrics extends FixedScrollMetrics
class FixedExtentMetricsMate {
  /// FixedExtentMetrics FixedExtentMetrics({required double? minScrollExtent, required double? maxScrollExtent, required double? pixels, required double? viewportDimension, required AxisDirection axisDirection, required int itemIndex, required double devicePixelRatio})
  FixedExtentMetricsMate({
// param: {required double? minScrollExtent}
    required double? minScrollExtent,
// param: {required double? maxScrollExtent}
    required double? maxScrollExtent,
// param: {required double? pixels}
    required double? pixels,
// param: {required double? viewportDimension}
    required double? viewportDimension,
// param: {required AxisDirection axisDirection}
    required AxisDirection axisDirection,
// param: {required int itemIndex}
    required int itemIndex,
// param: {required double devicePixelRatio}
    required double devicePixelRatio,
  }) {}
}

/// class FixedExtentScrollPhysics extends ScrollPhysics
class FixedExtentScrollPhysicsMate {
  /// FixedExtentScrollPhysics FixedExtentScrollPhysics({ScrollPhysics? parent})
  FixedExtentScrollPhysicsMate(
      {
// param: {ScrollPhysics? parent}
      ScrollPhysics? parent}) {}
}

/// class ListWheelScrollView extends StatefulWidget
class ListWheelScrollViewMate {
  /// ListWheelScrollView ListWheelScrollView({Key? key, ScrollController? controller, ScrollPhysics? physics, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, void Function(int)? onSelectedItemChanged, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, required List<Widget> children})
  ListWheelScrollViewMate({
// param: {Key? key}
    Key? key,
// param: {ScrollController? controller}
    ScrollController? controller,
// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,
// param: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio}
    required double diameterRatio,
// param: {double perspective = RenderListWheelViewport.defaultPerspective}
    required double perspective,
// param: {double offAxisFraction = 0.0}
    required double offAxisFraction,
// param: {bool useMagnifier = false}
    required bool useMagnifier,
// param: {double magnification = 1.0}
    required double magnification,
// param: {double overAndUnderCenterOpacity = 1.0}
    required double overAndUnderCenterOpacity,
// param: {required double itemExtent}
    required double itemExtent,
// param: {double squeeze = 1.0}
    required double squeeze,
// param: {void Function(int)? onSelectedItemChanged}
    void Function(
      int, [
      int,
    ])?
        onSelectedItemChanged,
// param: {bool renderChildrenOutsideViewport = false}
    required bool renderChildrenOutsideViewport,
// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
// param: {String? restorationId}
    String? restorationId,
// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,
// param: {required List<Widget> children}
    required List<Widget> children,
  }) {}

  /// ListWheelScrollView ListWheelScrollView.useDelegate({Key? key, ScrollController? controller, ScrollPhysics? physics, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, void Function(int)? onSelectedItemChanged, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, required ListWheelChildDelegate childDelegate})
  ListWheelScrollViewMate.useDelegate({
// param: {Key? key}
    Key? key,
// param: {ScrollController? controller}
    ScrollController? controller,
// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,
// param: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio}
    required double diameterRatio,
// param: {double perspective = RenderListWheelViewport.defaultPerspective}
    required double perspective,
// param: {double offAxisFraction = 0.0}
    required double offAxisFraction,
// param: {bool useMagnifier = false}
    required bool useMagnifier,
// param: {double magnification = 1.0}
    required double magnification,
// param: {double overAndUnderCenterOpacity = 1.0}
    required double overAndUnderCenterOpacity,
// param: {required double itemExtent}
    required double itemExtent,
// param: {double squeeze = 1.0}
    required double squeeze,
// param: {void Function(int)? onSelectedItemChanged}
    void Function(
      int, [
      int,
    ])?
        onSelectedItemChanged,
// param: {bool renderChildrenOutsideViewport = false}
    required bool renderChildrenOutsideViewport,
// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
// param: {String? restorationId}
    String? restorationId,
// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,
// param: {required ListWheelChildDelegate childDelegate}
    required ListWheelChildDelegate childDelegate,
  }) {}
}

/// class ListWheelElement extends RenderObjectElement implements ListWheelChildManager
class ListWheelElementMate {
  /// ListWheelElement ListWheelElement(ListWheelViewport widget)
  ListWheelElementMate(
// param: ListWheelViewport widget
      ListWheelViewport widget) {}
}

/// class ListWheelViewport extends RenderObjectWidget
class ListWheelViewportMate {
  /// ListWheelViewport ListWheelViewport({Key? key, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, bool renderChildrenOutsideViewport = false, required ViewportOffset offset, required ListWheelChildDelegate childDelegate, Clip clipBehavior = Clip.hardEdge})
  ListWheelViewportMate({
// param: {Key? key}
    Key? key,
// param: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio}
    required double diameterRatio,
// param: {double perspective = RenderListWheelViewport.defaultPerspective}
    required double perspective,
// param: {double offAxisFraction = 0.0}
    required double offAxisFraction,
// param: {bool useMagnifier = false}
    required bool useMagnifier,
// param: {double magnification = 1.0}
    required double magnification,
// param: {double overAndUnderCenterOpacity = 1.0}
    required double overAndUnderCenterOpacity,
// param: {required double itemExtent}
    required double itemExtent,
// param: {double squeeze = 1.0}
    required double squeeze,
// param: {bool renderChildrenOutsideViewport = false}
    required bool renderChildrenOutsideViewport,
// param: {required ViewportOffset offset}
    required ViewportOffset offset,
// param: {required ListWheelChildDelegate childDelegate}
    required ListWheelChildDelegate childDelegate,
// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) {}
}
