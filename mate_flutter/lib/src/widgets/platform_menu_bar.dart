// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.586221

import 'package:flutter/src/widgets/platform_menu_bar.dart';
import 'dart:core';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'package:flutter/src/services/platform_channel.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/actions.dart';

/// class ShortcutSerialization
class ShortcutSerializationMate extends ShortcutSerialization {
  /// ShortcutSerialization ShortcutSerialization.character(String character, {bool alt = false, bool control = false, bool meta = false})
  ShortcutSerializationMate.character(
    /// param: String character
    String character, {
    /// param: {bool alt = false}
    required bool alt,

    /// param: {bool control = false}
    required bool control,

    /// param: {bool meta = false}
    required bool meta,
  }) : super.character(
          character,
          alt: alt,
          control: control,
          meta: meta,
        ) {}

  /// ShortcutSerialization ShortcutSerialization.modifier(LogicalKeyboardKey trigger, {bool alt = false, bool control = false, bool meta = false, bool shift = false})
  ShortcutSerializationMate.modifier(
    /// param: LogicalKeyboardKey trigger
    LogicalKeyboardKey trigger, {
    /// param: {bool alt = false}
    required bool alt,

    /// param: {bool control = false}
    required bool control,

    /// param: {bool meta = false}
    required bool meta,

    /// param: {bool shift = false}
    required bool shift,
  }) : super.modifier(
          trigger,
          alt: alt,
          control: control,
          meta: meta,
          shift: shift,
        ) {}
}

/// class DefaultPlatformMenuDelegate extends PlatformMenuDelegate
class DefaultPlatformMenuDelegateMate extends DefaultPlatformMenuDelegate {
  /// DefaultPlatformMenuDelegate DefaultPlatformMenuDelegate({MethodChannel? channel})
  DefaultPlatformMenuDelegateMate(
      {
      /// param: {MethodChannel? channel}
      MethodChannel? channel})
      : super(channel: channel) {}
}

/// class PlatformMenuBar extends StatefulWidget with DiagnosticableTreeMixin
class PlatformMenuBarMate extends PlatformMenuBar {
  /// PlatformMenuBar PlatformMenuBar({Key? key, required List<PlatformMenuItem> menus, Widget? child, Widget? body})
  PlatformMenuBarMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<PlatformMenuItem> menus}
    required List<PlatformMenuItem> menus,

    /// param: {Widget? child}
    Widget? child,

    /// param: {Widget? body}
    Widget? body,
  }) : super(
          key: key,
          menus: menus,
          child: child,
          body: body,
        ) {}
}

/// class PlatformMenu extends PlatformMenuItem with DiagnosticableTreeMixin
class PlatformMenuMate extends PlatformMenu {
  /// PlatformMenu PlatformMenu({required String label, void Function()? onOpen, void Function()? onClose, required List<PlatformMenuItem> menus})
  PlatformMenuMate({
    /// param: {required String label}
    required String label,

    /// param: {void Function()? onOpen}
    VoidCallback? onOpen,

    /// param: {void Function()? onClose}
    VoidCallback? onClose,

    /// param: {required List<PlatformMenuItem> menus}
    required List<PlatformMenuItem> menus,
  }) : super(
          label: label,
          onOpen: onOpen,
          onClose: onClose,
          menus: menus,
        ) {}
}

/// class PlatformMenuItemGroup extends PlatformMenuItem
class PlatformMenuItemGroupMate extends PlatformMenuItemGroup {
  /// PlatformMenuItemGroup PlatformMenuItemGroup({required List<PlatformMenuItem> members})
  PlatformMenuItemGroupMate(
      {
      /// param: {required List<PlatformMenuItem> members}
      required List<PlatformMenuItem> members})
      : super(members: members) {}
}

/// class PlatformMenuItem with Diagnosticable
class PlatformMenuItemMate extends PlatformMenuItem {
  /// PlatformMenuItem PlatformMenuItem({required String label, MenuSerializableShortcut? shortcut, void Function()? onSelected, Intent? onSelectedIntent})
  PlatformMenuItemMate({
    /// param: {required String label}
    required String label,

    /// param: {MenuSerializableShortcut? shortcut}
    MenuSerializableShortcut? shortcut,

    /// param: {void Function()? onSelected}
    VoidCallback? onSelected,

    /// param: {Intent? onSelectedIntent}
    Intent? onSelectedIntent,
  }) : super(
          label: label,
          shortcut: shortcut,
          onSelected: onSelected,
          onSelectedIntent: onSelectedIntent,
        ) {}
}

/// class PlatformProvidedMenuItem extends PlatformMenuItem
class PlatformProvidedMenuItemMate extends PlatformProvidedMenuItem {
  /// PlatformProvidedMenuItem PlatformProvidedMenuItem({required PlatformProvidedMenuItemType type, bool enabled = true})
  PlatformProvidedMenuItemMate({
    /// param: {required PlatformProvidedMenuItemType type}
    required PlatformProvidedMenuItemType type,

    /// param: {bool enabled = true}
    required bool enabled,
  }) : super(
          type: type,
          enabled: enabled,
        ) {}
}
