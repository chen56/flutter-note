// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.780555

library;

import 'dart:core';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'package:flutter/src/services/platform_channel.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/platform_menu_bar.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/actions.dart';

/// class ShortcutSerialization
class ShortcutSerializationMate {
  /// ShortcutSerialization ShortcutSerialization.character(String character, {bool alt = false, bool control = false, bool meta = false})
  ShortcutSerializationMate.character(
// param: String character
    String character, {
// param: {bool alt = false}
    required bool alt,
// param: {bool control = false}
    required bool control,
// param: {bool meta = false}
    required bool meta,
  }) {}

  /// ShortcutSerialization ShortcutSerialization.modifier(LogicalKeyboardKey trigger, {bool alt = false, bool control = false, bool meta = false, bool shift = false})
  ShortcutSerializationMate.modifier(
// param: LogicalKeyboardKey trigger
    LogicalKeyboardKey trigger, {
// param: {bool alt = false}
    required bool alt,
// param: {bool control = false}
    required bool control,
// param: {bool meta = false}
    required bool meta,
// param: {bool shift = false}
    required bool shift,
  }) {}
}

/// abstract class PlatformMenuDelegate
abstract class PlatformMenuDelegateMate {
  /// PlatformMenuDelegate PlatformMenuDelegate()
  PlatformMenuDelegateMate() {}
}

/// class DefaultPlatformMenuDelegate extends PlatformMenuDelegate
class DefaultPlatformMenuDelegateMate {
  /// DefaultPlatformMenuDelegate DefaultPlatformMenuDelegate({MethodChannel? channel})
  DefaultPlatformMenuDelegateMate(
      {
// param: {MethodChannel? channel}
      MethodChannel? channel}) {}
}

/// class PlatformMenuBar extends StatefulWidget with DiagnosticableTreeMixin
class PlatformMenuBarMate {
  /// PlatformMenuBar PlatformMenuBar({Key? key, required List<PlatformMenuItem> menus, Widget? child, Widget? body})
  PlatformMenuBarMate({
// param: {Key? key}
    Key? key,
// param: {required List<PlatformMenuItem> menus}
    required List<PlatformMenuItem> menus,
// param: {Widget? child}
    Widget? child,
// param: {Widget? body}
    Widget? body,
  }) {}
}

/// class PlatformMenu extends PlatformMenuItem with DiagnosticableTreeMixin
class PlatformMenuMate {
  /// PlatformMenu PlatformMenu({required String label, void Function()? onOpen, void Function()? onClose, required List<PlatformMenuItem> menus})
  PlatformMenuMate({
// param: {required String label}
    required String label,
// param: {void Function()? onOpen}
    void Function()? onOpen,
// param: {void Function()? onClose}
    void Function()? onClose,
// param: {required List<PlatformMenuItem> menus}
    required List<PlatformMenuItem> menus,
  }) {}
}

/// class PlatformMenuItemGroup extends PlatformMenuItem
class PlatformMenuItemGroupMate {
  /// PlatformMenuItemGroup PlatformMenuItemGroup({required List<PlatformMenuItem> members})
  PlatformMenuItemGroupMate(
      {
// param: {required List<PlatformMenuItem> members}
      required List<PlatformMenuItem> members}) {}
}

/// class PlatformMenuItem with Diagnosticable
class PlatformMenuItemMate {
  /// PlatformMenuItem PlatformMenuItem({required String label, MenuSerializableShortcut? shortcut, void Function()? onSelected, Intent? onSelectedIntent})
  PlatformMenuItemMate({
// param: {required String label}
    required String label,
// param: {MenuSerializableShortcut? shortcut}
    MenuSerializableShortcut? shortcut,
// param: {void Function()? onSelected}
    void Function()? onSelected,
// param: {Intent? onSelectedIntent}
    Intent? onSelectedIntent,
  }) {}
}

/// class PlatformProvidedMenuItem extends PlatformMenuItem
class PlatformProvidedMenuItemMate {
  /// PlatformProvidedMenuItem PlatformProvidedMenuItem({required PlatformProvidedMenuItemType type, bool enabled = true})
  PlatformProvidedMenuItemMate({
// param: {required PlatformProvidedMenuItemType type}
    required PlatformProvidedMenuItemType type,
// param: {bool enabled = true}
    required bool enabled,
  }) {}
}
