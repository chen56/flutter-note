// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.818334

library;

import 'dart:core';
import 'package:flutter/src/widgets/router.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:async';

/// class RouteInformation
class RouteInformationMate {
  /// RouteInformation RouteInformation({String? location, Object? state})
  RouteInformationMate({
// param: {String? location}
    String? location,
// param: {Object? state}
    Object? state,
  }) {}
}

/// class RouterConfig<T>
class RouterConfigMate<T> {
  /// RouterConfig<T> RouterConfig({RouteInformationProvider? routeInformationProvider, RouteInformationParser<T>? routeInformationParser, required RouterDelegate<T> routerDelegate, BackButtonDispatcher? backButtonDispatcher})
  RouterConfigMate({
// param: {RouteInformationProvider? routeInformationProvider}
    RouteInformationProvider? routeInformationProvider,
// param: {RouteInformationParser<T>? routeInformationParser}
    RouteInformationParser<T>? routeInformationParser,
// param: {required RouterDelegate<T> routerDelegate}
    required RouterDelegate<T> routerDelegate,
// param: {BackButtonDispatcher? backButtonDispatcher}
    BackButtonDispatcher? backButtonDispatcher,
  }) {}
}

/// class Router<T> extends StatefulWidget
class RouterMate<T> {
  /// Router<T> Router({Key? key, RouteInformationProvider? routeInformationProvider, RouteInformationParser<T>? routeInformationParser, required RouterDelegate<T> routerDelegate, BackButtonDispatcher? backButtonDispatcher, String? restorationScopeId})
  RouterMate({
// param: {Key? key}
    Key? key,
// param: {RouteInformationProvider? routeInformationProvider}
    RouteInformationProvider? routeInformationProvider,
// param: {RouteInformationParser<T>? routeInformationParser}
    RouteInformationParser<T>? routeInformationParser,
// param: {required RouterDelegate<T> routerDelegate}
    required RouterDelegate<T> routerDelegate,
// param: {BackButtonDispatcher? backButtonDispatcher}
    BackButtonDispatcher? backButtonDispatcher,
// param: {String? restorationScopeId}
    String? restorationScopeId,
  }) {}
}

/// abstract class BackButtonDispatcher extends _CallbackHookProvider<Future<bool>>
abstract class BackButtonDispatcherMate {
  /// BackButtonDispatcher BackButtonDispatcher()
  BackButtonDispatcherMate() {}
}

/// class RootBackButtonDispatcher extends BackButtonDispatcher with WidgetsBindingObserver
class RootBackButtonDispatcherMate {
  /// RootBackButtonDispatcher RootBackButtonDispatcher()
  RootBackButtonDispatcherMate() {}
}

/// class ChildBackButtonDispatcher extends BackButtonDispatcher
class ChildBackButtonDispatcherMate {
  /// ChildBackButtonDispatcher ChildBackButtonDispatcher(BackButtonDispatcher parent)
  ChildBackButtonDispatcherMate(
// param: BackButtonDispatcher parent
      BackButtonDispatcher parent) {}
}

/// class BackButtonListener extends StatefulWidget
class BackButtonListenerMate {
  /// BackButtonListener BackButtonListener({Key? key, required Widget child, required Future<bool> Function() onBackButtonPressed})
  BackButtonListenerMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {required Future<bool> Function() onBackButtonPressed}
    required Future<bool> Function() onBackButtonPressed,
  }) {}
}

/// abstract class RouteInformationParser<T>
abstract class RouteInformationParserMate<T> {
  /// RouteInformationParser<T> RouteInformationParser()
  RouteInformationParserMate() {}
}

/// abstract class RouterDelegate<T> extends Listenable
abstract class RouterDelegateMate<T> {
  /// RouterDelegate<T> RouterDelegate()
  RouterDelegateMate() {}
}

/// abstract class RouteInformationProvider extends ValueListenable<RouteInformation>
abstract class RouteInformationProviderMate {
  /// RouteInformationProvider RouteInformationProvider()
  RouteInformationProviderMate() {}
}

/// class PlatformRouteInformationProvider extends RouteInformationProvider with WidgetsBindingObserver, ChangeNotifier
class PlatformRouteInformationProviderMate {
  /// PlatformRouteInformationProvider PlatformRouteInformationProvider({required RouteInformation initialRouteInformation})
  PlatformRouteInformationProviderMate(
      {
// param: {required RouteInformation initialRouteInformation}
      required RouteInformation initialRouteInformation}) {}
}
