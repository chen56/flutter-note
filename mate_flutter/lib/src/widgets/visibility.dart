// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.874747

import 'package:flutter/src/widgets/visibility.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';

/// class Visibility extends StatelessWidget
class VisibilityMate extends Visibility {
  /// Visibility Visibility({Key? key, required Widget child, Widget replacement = const SizedBox.shrink(), bool visible = true, bool maintainState = false, bool maintainAnimation = false, bool maintainSize = false, bool maintainSemantics = false, bool maintainInteractivity = false})
  VisibilityMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {Widget replacement = const SizedBox.shrink()}
    required Widget replacement,

    /// param: {bool visible = true}
    required bool visible,

    /// param: {bool maintainState = false}
    required bool maintainState,

    /// param: {bool maintainAnimation = false}
    required bool maintainAnimation,

    /// param: {bool maintainSize = false}
    required bool maintainSize,

    /// param: {bool maintainSemantics = false}
    required bool maintainSemantics,

    /// param: {bool maintainInteractivity = false}
    required bool maintainInteractivity,
  }) : super(
          key: key,
          child: child,
          replacement: replacement,
          visible: visible,
          maintainState: maintainState,
          maintainAnimation: maintainAnimation,
          maintainSize: maintainSize,
          maintainSemantics: maintainSemantics,
          maintainInteractivity: maintainInteractivity,
        ) {}

  /// Visibility Visibility.maintain({Key? key, required Widget child, Widget replacement = const SizedBox.shrink(), bool visible = true})
  VisibilityMate.maintain({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {Widget replacement = const SizedBox.shrink()}
    required Widget replacement,

    /// param: {bool visible = true}
    required bool visible,
  }) : super.maintain(
          key: key,
          child: child,
          replacement: replacement,
          visible: visible,
        ) {}
}

/// class SliverVisibility extends StatelessWidget
class SliverVisibilityMate extends SliverVisibility {
  /// SliverVisibility SliverVisibility({Key? key, required Widget sliver, Widget replacementSliver = const SliverToBoxAdapter(), bool visible = true, bool maintainState = false, bool maintainAnimation = false, bool maintainSize = false, bool maintainSemantics = false, bool maintainInteractivity = false})
  SliverVisibilityMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget sliver}
    required Widget sliver,

    /// param: {Widget replacementSliver = const SliverToBoxAdapter()}
    required Widget replacementSliver,

    /// param: {bool visible = true}
    required bool visible,

    /// param: {bool maintainState = false}
    required bool maintainState,

    /// param: {bool maintainAnimation = false}
    required bool maintainAnimation,

    /// param: {bool maintainSize = false}
    required bool maintainSize,

    /// param: {bool maintainSemantics = false}
    required bool maintainSemantics,

    /// param: {bool maintainInteractivity = false}
    required bool maintainInteractivity,
  }) : super(
          key: key,
          sliver: sliver,
          replacementSliver: replacementSliver,
          visible: visible,
          maintainState: maintainState,
          maintainAnimation: maintainAnimation,
          maintainSize: maintainSize,
          maintainSemantics: maintainSemantics,
          maintainInteractivity: maintainInteractivity,
        ) {}

  /// SliverVisibility SliverVisibility.maintain({Key? key, required Widget sliver, Widget replacementSliver = const SliverToBoxAdapter(), bool visible = true})
  SliverVisibilityMate.maintain({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget sliver}
    required Widget sliver,

    /// param: {Widget replacementSliver = const SliverToBoxAdapter()}
    required Widget replacementSliver,

    /// param: {bool visible = true}
    required bool visible,
  }) : super.maintain(
          key: key,
          sliver: sliver,
          replacementSliver: replacementSliver,
          visible: visible,
        ) {}
}
