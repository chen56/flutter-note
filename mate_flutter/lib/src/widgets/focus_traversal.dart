// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:11.107898

library;

import 'package:flutter/src/widgets/focus_traversal.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class NumericFocusOrder extends FocusOrder
class NumericFocusOrderMate extends NumericFocusOrder {
  /// NumericFocusOrder NumericFocusOrder(double order)
  NumericFocusOrderMate(

      /// param: double order
      double order)
      : super(order) {}
}

/// class LexicalFocusOrder extends FocusOrder
class LexicalFocusOrderMate extends LexicalFocusOrder {
  /// LexicalFocusOrder LexicalFocusOrder(String order)
  LexicalFocusOrderMate(

      /// param: String order
      String order)
      : super(order) {}
}

/// class OrderedTraversalPolicy extends FocusTraversalPolicy with DirectionalFocusTraversalPolicyMixin
class OrderedTraversalPolicyMate extends OrderedTraversalPolicy {
  /// OrderedTraversalPolicy OrderedTraversalPolicy({FocusTraversalPolicy? secondary})
  OrderedTraversalPolicyMate(
      {
      /// param: {FocusTraversalPolicy? secondary}
      FocusTraversalPolicy? secondary})
      : super(secondary: secondary) {}
}

/// class FocusTraversalOrder extends InheritedWidget
class FocusTraversalOrderMate extends FocusTraversalOrder {
  /// FocusTraversalOrder FocusTraversalOrder({Key? key, required FocusOrder order, required Widget child})
  FocusTraversalOrderMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required FocusOrder order}
    required FocusOrder order,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          order: order,
          child: child,
        ) {}
}

/// class FocusTraversalGroup extends StatefulWidget
class FocusTraversalGroupMate extends FocusTraversalGroup {
  /// FocusTraversalGroup FocusTraversalGroup({Key? key, FocusTraversalPolicy? policy, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, required Widget child})
  FocusTraversalGroupMate({
    /// param: {Key? key}
    Key? key,

    /// param: {FocusTraversalPolicy? policy}
    FocusTraversalPolicy? policy,

    /// param: {bool descendantsAreFocusable = true}
    required bool descendantsAreFocusable,

    /// param: {bool descendantsAreTraversable = true}
    required bool descendantsAreTraversable,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          policy: policy,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          child: child,
        ) {}
}

/// class RequestFocusIntent extends Intent
class RequestFocusIntentMate extends RequestFocusIntent {
  /// RequestFocusIntent RequestFocusIntent(FocusNode focusNode)
  RequestFocusIntentMate(

      /// param: FocusNode focusNode
      FocusNode focusNode)
      : super(focusNode) {}
}

/// class DirectionalFocusIntent extends Intent
class DirectionalFocusIntentMate extends DirectionalFocusIntent {
  /// DirectionalFocusIntent DirectionalFocusIntent(TraversalDirection direction, {bool ignoreTextFields = true})
  DirectionalFocusIntentMate(
    /// param: TraversalDirection direction
    TraversalDirection direction, {
    /// param: {bool ignoreTextFields = true}
    required bool ignoreTextFields,
  }) : super(
          direction,
          ignoreTextFields: ignoreTextFields,
        ) {}
}

/// class ExcludeFocusTraversal extends StatelessWidget
class ExcludeFocusTraversalMate extends ExcludeFocusTraversal {
  /// ExcludeFocusTraversal ExcludeFocusTraversal({Key? key, bool excluding = true, required Widget child})
  ExcludeFocusTraversalMate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool excluding = true}
    required bool excluding,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          excluding: excluding,
          child: child,
        ) {}
}
