// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.600032

library;

import 'dart:core';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// abstract class FocusTraversalPolicy with Diagnosticable
abstract class FocusTraversalPolicyMate {
  /// FocusTraversalPolicy FocusTraversalPolicy()
  FocusTraversalPolicyMate() {}
}

/// class WidgetOrderTraversalPolicy extends FocusTraversalPolicy with DirectionalFocusTraversalPolicyMixin
class WidgetOrderTraversalPolicyMate {
  /// WidgetOrderTraversalPolicy WidgetOrderTraversalPolicy()
  WidgetOrderTraversalPolicyMate() {}
}

/// class ReadingOrderTraversalPolicy extends FocusTraversalPolicy with DirectionalFocusTraversalPolicyMixin
class ReadingOrderTraversalPolicyMate {
  /// ReadingOrderTraversalPolicy ReadingOrderTraversalPolicy()
  ReadingOrderTraversalPolicyMate() {}
}

/// abstract class FocusOrder with Diagnosticable implements Comparable<FocusOrder>
abstract class FocusOrderMate {
  /// FocusOrder FocusOrder()
  FocusOrderMate() {}
}

/// class NumericFocusOrder extends FocusOrder
class NumericFocusOrderMate {
  /// NumericFocusOrder NumericFocusOrder(double order)
  NumericFocusOrderMate(
// param: double order
      double order) {}
}

/// class LexicalFocusOrder extends FocusOrder
class LexicalFocusOrderMate {
  /// LexicalFocusOrder LexicalFocusOrder(String order)
  LexicalFocusOrderMate(
// param: String order
      String order) {}
}

/// class OrderedTraversalPolicy extends FocusTraversalPolicy with DirectionalFocusTraversalPolicyMixin
class OrderedTraversalPolicyMate {
  /// OrderedTraversalPolicy OrderedTraversalPolicy({FocusTraversalPolicy? secondary})
  OrderedTraversalPolicyMate(
      {
// param: {FocusTraversalPolicy? secondary}
      FocusTraversalPolicy? secondary}) {}
}

/// class FocusTraversalOrder extends InheritedWidget
class FocusTraversalOrderMate {
  /// FocusTraversalOrder FocusTraversalOrder({Key? key, required FocusOrder order, required Widget child})
  FocusTraversalOrderMate({
// param: {Key? key}
    Key? key,
// param: {required FocusOrder order}
    required FocusOrder order,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class FocusTraversalGroup extends StatefulWidget
class FocusTraversalGroupMate {
  /// FocusTraversalGroup FocusTraversalGroup({Key? key, FocusTraversalPolicy? policy, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, required Widget child})
  FocusTraversalGroupMate({
// param: {Key? key}
    Key? key,
// param: {FocusTraversalPolicy? policy}
    FocusTraversalPolicy? policy,
// param: {bool descendantsAreFocusable = true}
    required bool descendantsAreFocusable,
// param: {bool descendantsAreTraversable = true}
    required bool descendantsAreTraversable,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class RequestFocusIntent extends Intent
class RequestFocusIntentMate {
  /// RequestFocusIntent RequestFocusIntent(FocusNode focusNode)
  RequestFocusIntentMate(
// param: FocusNode focusNode
      FocusNode focusNode) {}
}

/// class RequestFocusAction extends Action<RequestFocusIntent>
class RequestFocusActionMate {
  /// RequestFocusAction RequestFocusAction()
  RequestFocusActionMate() {}
}

/// class NextFocusIntent extends Intent
class NextFocusIntentMate {
  /// NextFocusIntent NextFocusIntent()
  NextFocusIntentMate() {}
}

/// class NextFocusAction extends Action<NextFocusIntent>
class NextFocusActionMate {
  /// NextFocusAction NextFocusAction()
  NextFocusActionMate() {}
}

/// class PreviousFocusIntent extends Intent
class PreviousFocusIntentMate {
  /// PreviousFocusIntent PreviousFocusIntent()
  PreviousFocusIntentMate() {}
}

/// class PreviousFocusAction extends Action<PreviousFocusIntent>
class PreviousFocusActionMate {
  /// PreviousFocusAction PreviousFocusAction()
  PreviousFocusActionMate() {}
}

/// class DirectionalFocusIntent extends Intent
class DirectionalFocusIntentMate {
  /// DirectionalFocusIntent DirectionalFocusIntent(TraversalDirection direction, {bool ignoreTextFields = true})
  DirectionalFocusIntentMate(
// param: TraversalDirection direction
    TraversalDirection direction, {
// param: {bool ignoreTextFields = true}
    required bool ignoreTextFields,
  }) {}
}

/// class DirectionalFocusAction extends Action<DirectionalFocusIntent>
class DirectionalFocusActionMate {
  /// DirectionalFocusAction DirectionalFocusAction()
  DirectionalFocusActionMate() {}

  /// DirectionalFocusAction DirectionalFocusAction.forTextField()
  DirectionalFocusActionMate.forTextField() {}
}

/// class ExcludeFocusTraversal extends StatelessWidget
class ExcludeFocusTraversalMate {
  /// ExcludeFocusTraversal ExcludeFocusTraversal({Key? key, bool excluding = true, required Widget child})
  ExcludeFocusTraversalMate({
// param: {Key? key}
    Key? key,
// param: {bool excluding = true}
    required bool excluding,
// param: {required Widget child}
    required Widget child,
  }) {}
}
