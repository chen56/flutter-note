// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:11.174159

library;

import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'dart:io';
import 'package:flutter/src/services/asset_bundle.dart';
import 'dart:typed_data';
export 'package:flutter/painting.dart'
    show
        AssetImage,
        ExactAssetImage,
        FileImage,
        FilterQuality,
        ImageConfiguration,
        ImageInfo,
        ImageProvider,
        ImageStream,
        MemoryImage,
        NetworkImage;

/// class Image extends StatefulWidget
class ImageMate extends Image {
  /// Image Image({Key? key, required ImageProvider<Object> image, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low})
  ImageMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required ImageProvider<Object> image}
    required ImageProvider<Object> image,

    /// param: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder}
    ImageFrameBuilder? frameBuilder,

    /// param: {Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder}
    ImageLoadingBuilder? loadingBuilder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder}
    ImageErrorWidgetBuilder? errorBuilder,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<double>? opacity}
    Animation<double>? opacity,

    /// param: {BlendMode? colorBlendMode}
    BlendMode? colorBlendMode,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {bool gaplessPlayback = false}
    required bool gaplessPlayback,

    /// param: {bool isAntiAlias = false}
    required bool isAntiAlias,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,
  }) : super(
          key: key,
          image: image,
          frameBuilder: frameBuilder,
          loadingBuilder: loadingBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
        ) {}

  /// Image Image.network(String src, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, FilterQuality filterQuality = FilterQuality.low, bool isAntiAlias = false, Map<String, String>? headers, int? cacheWidth, int? cacheHeight})
  ImageMate.network(
    /// param: String src
    String src, {
    /// param: {Key? key}
    Key? key,

    /// param: {double scale = 1.0}
    required double scale,

    /// param: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder}
    ImageFrameBuilder? frameBuilder,

    /// param: {Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder}
    ImageLoadingBuilder? loadingBuilder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder}
    ImageErrorWidgetBuilder? errorBuilder,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<double>? opacity}
    Animation<double>? opacity,

    /// param: {BlendMode? colorBlendMode}
    BlendMode? colorBlendMode,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {bool gaplessPlayback = false}
    required bool gaplessPlayback,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {bool isAntiAlias = false}
    required bool isAntiAlias,

    /// param: {Map<String, String>? headers}
    Map<String, String>? headers,

    /// param: {int? cacheWidth}
    int? cacheWidth,

    /// param: {int? cacheHeight}
    int? cacheHeight,
  }) : super.network(
          src,
          key: key,
          scale: scale,
          frameBuilder: frameBuilder,
          loadingBuilder: loadingBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          filterQuality: filterQuality,
          isAntiAlias: isAntiAlias,
          headers: headers,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {}

  /// Image Image.file(File file, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  ImageMate.file(
    /// param: File file
    File file, {
    /// param: {Key? key}
    Key? key,

    /// param: {double scale = 1.0}
    required double scale,

    /// param: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder}
    ImageFrameBuilder? frameBuilder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder}
    ImageErrorWidgetBuilder? errorBuilder,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<double>? opacity}
    Animation<double>? opacity,

    /// param: {BlendMode? colorBlendMode}
    BlendMode? colorBlendMode,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {bool gaplessPlayback = false}
    required bool gaplessPlayback,

    /// param: {bool isAntiAlias = false}
    required bool isAntiAlias,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {int? cacheWidth}
    int? cacheWidth,

    /// param: {int? cacheHeight}
    int? cacheHeight,
  }) : super.file(
          file,
          key: key,
          scale: scale,
          frameBuilder: frameBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {}

  /// Image Image.asset(String name, {Key? key, AssetBundle? bundle, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? scale, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, String? package, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  ImageMate.asset(
    /// param: String name
    String name, {
    /// param: {Key? key}
    Key? key,

    /// param: {AssetBundle? bundle}
    AssetBundle? bundle,

    /// param: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder}
    ImageFrameBuilder? frameBuilder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder}
    ImageErrorWidgetBuilder? errorBuilder,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {double? scale}
    double? scale,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<double>? opacity}
    Animation<double>? opacity,

    /// param: {BlendMode? colorBlendMode}
    BlendMode? colorBlendMode,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {bool gaplessPlayback = false}
    required bool gaplessPlayback,

    /// param: {bool isAntiAlias = false}
    required bool isAntiAlias,

    /// param: {String? package}
    String? package,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {int? cacheWidth}
    int? cacheWidth,

    /// param: {int? cacheHeight}
    int? cacheHeight,
  }) : super.asset(
          name,
          key: key,
          bundle: bundle,
          frameBuilder: frameBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          scale: scale,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          package: package,
          filterQuality: filterQuality,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {}

  /// Image Image.memory(Uint8List bytes, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  ImageMate.memory(
    /// param: Uint8List bytes
    Uint8List bytes, {
    /// param: {Key? key}
    Key? key,

    /// param: {double scale = 1.0}
    required double scale,

    /// param: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder}
    ImageFrameBuilder? frameBuilder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder}
    ImageErrorWidgetBuilder? errorBuilder,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<double>? opacity}
    Animation<double>? opacity,

    /// param: {BlendMode? colorBlendMode}
    BlendMode? colorBlendMode,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {bool gaplessPlayback = false}
    required bool gaplessPlayback,

    /// param: {bool isAntiAlias = false}
    required bool isAntiAlias,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {int? cacheWidth}
    int? cacheWidth,

    /// param: {int? cacheHeight}
    int? cacheHeight,
  }) : super.memory(
          bytes,
          key: key,
          scale: scale,
          frameBuilder: frameBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {}
}
