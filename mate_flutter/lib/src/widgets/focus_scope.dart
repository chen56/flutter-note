// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.595632

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:core';
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

/// class Focus extends StatefulWidget
class FocusMate {
  /// Focus Focus({Key? key, required Widget child, FocusNode? focusNode, FocusNode? parentNode, bool autofocus = false, void Function(bool)? onFocusChange, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool? canRequestFocus, bool? skipTraversal, bool? descendantsAreFocusable, bool? descendantsAreTraversable, bool includeSemantics = true, String? debugLabel})
  FocusMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {FocusNode? parentNode}
    FocusNode? parentNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent}
    KeyEventResult Function(
      FocusNode,
      KeyEvent, [
      FocusNode,
      KeyEvent,
    ])?
        onKeyEvent,
// param: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey}
    KeyEventResult Function(
      FocusNode,
      RawKeyEvent, [
      FocusNode,
      RawKeyEvent,
    ])?
        onKey,
// param: {bool? canRequestFocus}
    bool? canRequestFocus,
// param: {bool? skipTraversal}
    bool? skipTraversal,
// param: {bool? descendantsAreFocusable}
    bool? descendantsAreFocusable,
// param: {bool? descendantsAreTraversable}
    bool? descendantsAreTraversable,
// param: {bool includeSemantics = true}
    required bool includeSemantics,
// param: {String? debugLabel}
    String? debugLabel,
  }) {}
}

/// class FocusScope extends Focus
class FocusScopeMate {
  /// FocusScope FocusScope({Key? key, FocusScopeNode? node, FocusNode? parentNode, required Widget child, bool autofocus = false, void Function(bool)? onFocusChange, bool? canRequestFocus, bool? skipTraversal, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, String? debugLabel})
  FocusScopeMate({
// param: {Key? key}
    Key? key,
// param: {FocusScopeNode? node}
    FocusScopeNode? node,
// param: {FocusNode? parentNode}
    FocusNode? parentNode,
// param: {required Widget child}
    required Widget child,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {bool? canRequestFocus}
    bool? canRequestFocus,
// param: {bool? skipTraversal}
    bool? skipTraversal,
// param: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent}
    KeyEventResult Function(
      FocusNode,
      KeyEvent, [
      FocusNode,
      KeyEvent,
    ])?
        onKeyEvent,
// param: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey}
    KeyEventResult Function(
      FocusNode,
      RawKeyEvent, [
      FocusNode,
      RawKeyEvent,
    ])?
        onKey,
// param: {String? debugLabel}
    String? debugLabel,
  }) {}
}

/// class ExcludeFocus extends StatelessWidget
class ExcludeFocusMate {
  /// ExcludeFocus ExcludeFocus({Key? key, bool excluding = true, required Widget child})
  ExcludeFocusMate({
// param: {Key? key}
    Key? key,
// param: {bool excluding = true}
    required bool excluding,
// param: {required Widget child}
    required Widget child,
  }) {}
}
