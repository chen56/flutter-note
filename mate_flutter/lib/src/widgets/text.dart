// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.977307

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/inline_span.dart';

/// class DefaultTextStyle extends InheritedTheme
class DefaultTextStyleMate {
  /// DefaultTextStyle DefaultTextStyle({Key? key, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, required Widget child})
  DefaultTextStyleMate({
// param: {Key? key}
    Key? key,
// param: {required TextStyle style}
    required TextStyle style,
// param: {TextAlign? textAlign}
    TextAlign? textAlign,
// param: {bool softWrap = true}
    required bool softWrap,
// param: {TextOverflow overflow = TextOverflow.clip}
    required TextOverflow overflow,
// param: {int? maxLines}
    int? maxLines,
// param: {TextWidthBasis textWidthBasis = TextWidthBasis.parent}
    required TextWidthBasis textWidthBasis,
// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,
// param: {required Widget child}
    required Widget child,
  }) {}

  /// DefaultTextStyle DefaultTextStyle.fallback({Key? key})
  DefaultTextStyleMate.fallback(
      {
// param: {Key? key}
      Key? key}) {}
}

/// class DefaultTextHeightBehavior extends InheritedTheme
class DefaultTextHeightBehaviorMate {
  /// DefaultTextHeightBehavior DefaultTextHeightBehavior({Key? key, required TextHeightBehavior textHeightBehavior, required Widget child})
  DefaultTextHeightBehaviorMate({
// param: {Key? key}
    Key? key,
// param: {required TextHeightBehavior textHeightBehavior}
    required TextHeightBehavior textHeightBehavior,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class Text extends StatelessWidget
class TextMate {
  /// Text Text(String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  TextMate(
// param: String data
    String data, {
// param: {Key? key}
    Key? key,
// param: {TextStyle? style}
    TextStyle? style,
// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,
// param: {TextAlign? textAlign}
    TextAlign? textAlign,
// param: {TextDirection? textDirection}
    TextDirection? textDirection,
// param: {Locale? locale}
    Locale? locale,
// param: {bool? softWrap}
    bool? softWrap,
// param: {TextOverflow? overflow}
    TextOverflow? overflow,
// param: {double? textScaleFactor}
    double? textScaleFactor,
// param: {int? maxLines}
    int? maxLines,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {TextWidthBasis? textWidthBasis}
    TextWidthBasis? textWidthBasis,
// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,
// param: {Color? selectionColor}
    Color? selectionColor,
  }) {}

  /// Text Text.rich(InlineSpan textSpan, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  TextMate.rich(
// param: InlineSpan textSpan
    InlineSpan textSpan, {
// param: {Key? key}
    Key? key,
// param: {TextStyle? style}
    TextStyle? style,
// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,
// param: {TextAlign? textAlign}
    TextAlign? textAlign,
// param: {TextDirection? textDirection}
    TextDirection? textDirection,
// param: {Locale? locale}
    Locale? locale,
// param: {bool? softWrap}
    bool? softWrap,
// param: {TextOverflow? overflow}
    TextOverflow? overflow,
// param: {double? textScaleFactor}
    double? textScaleFactor,
// param: {int? maxLines}
    int? maxLines,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {TextWidthBasis? textWidthBasis}
    TextWidthBasis? textWidthBasis,
// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,
// param: {Color? selectionColor}
    Color? selectionColor,
  }) {}
}
