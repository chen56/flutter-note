// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.788382

library;

import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/rendering/platform_view.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/services/platform_views.dart';
import 'package:flutter/src/widgets/platform_view.dart';

/// class AndroidView extends StatefulWidget
class AndroidViewMate {
  /// AndroidView AndroidView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated, PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque, TextDirection? layoutDirection, Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers, dynamic creationParams, MessageCodec<dynamic>? creationParamsCodec, Clip clipBehavior = Clip.hardEdge})
  AndroidViewMate({
// param: {Key? key}
    Key? key,
// param: {required String viewType}
    required String viewType,
// param: {void Function(int)? onPlatformViewCreated}
    void Function(
      int, [
      int,
    ])?
        onPlatformViewCreated,
// param: {PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque}
    required PlatformViewHitTestBehavior hitTestBehavior,
// param: {TextDirection? layoutDirection}
    TextDirection? layoutDirection,
// param: {Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers}
    Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers,
// param: {dynamic creationParams}
    required dynamic creationParams,
// param: {MessageCodec<dynamic>? creationParamsCodec}
    MessageCodec<dynamic>? creationParamsCodec,
// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) {}
}

/// class UiKitView extends StatefulWidget
class UiKitViewMate {
  /// UiKitView UiKitView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated, PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque, TextDirection? layoutDirection, dynamic creationParams, MessageCodec<dynamic>? creationParamsCodec, Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers})
  UiKitViewMate({
// param: {Key? key}
    Key? key,
// param: {required String viewType}
    required String viewType,
// param: {void Function(int)? onPlatformViewCreated}
    void Function(
      int, [
      int,
    ])?
        onPlatformViewCreated,
// param: {PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque}
    required PlatformViewHitTestBehavior hitTestBehavior,
// param: {TextDirection? layoutDirection}
    TextDirection? layoutDirection,
// param: {dynamic creationParams}
    required dynamic creationParams,
// param: {MessageCodec<dynamic>? creationParamsCodec}
    MessageCodec<dynamic>? creationParamsCodec,
// param: {Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers}
    Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers,
  }) {}
}

/// class HtmlElementView extends StatelessWidget
class HtmlElementViewMate {
  /// HtmlElementView HtmlElementView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated})
  HtmlElementViewMate({
// param: {Key? key}
    Key? key,
// param: {required String viewType}
    required String viewType,
// param: {void Function(int)? onPlatformViewCreated}
    void Function(
      int, [
      int,
    ])?
        onPlatformViewCreated,
  }) {}
}

/// class PlatformViewCreationParams
class PlatformViewCreationParamsMate {}

/// class PlatformViewLink extends StatefulWidget
class PlatformViewLinkMate {
  /// PlatformViewLink PlatformViewLink({Key? key, required Widget Function(BuildContext, PlatformViewController) surfaceFactory, required PlatformViewController Function(PlatformViewCreationParams) onCreatePlatformView, required String viewType})
  PlatformViewLinkMate({
// param: {Key? key}
    Key? key,
// param: {required Widget Function(BuildContext, PlatformViewController) surfaceFactory}
    required Widget Function(
      BuildContext,
      PlatformViewController, [
      BuildContext,
      PlatformViewController,
    ])
        surfaceFactory,
// param: {required PlatformViewController Function(PlatformViewCreationParams) onCreatePlatformView}
    required PlatformViewController Function(
      PlatformViewCreationParams, [
      PlatformViewCreationParams,
    ])
        onCreatePlatformView,
// param: {required String viewType}
    required String viewType,
  }) {}
}

/// class PlatformViewSurface extends LeafRenderObjectWidget
class PlatformViewSurfaceMate {
  /// PlatformViewSurface PlatformViewSurface({Key? key, required PlatformViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  PlatformViewSurfaceMate({
// param: {Key? key}
    Key? key,
// param: {required PlatformViewController controller}
    required PlatformViewController controller,
// param: {required PlatformViewHitTestBehavior hitTestBehavior}
    required PlatformViewHitTestBehavior hitTestBehavior,
// param: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers}
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) {}
}

/// class AndroidViewSurface extends StatefulWidget
class AndroidViewSurfaceMate {
  /// AndroidViewSurface AndroidViewSurface({Key? key, required AndroidViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  AndroidViewSurfaceMate({
// param: {Key? key}
    Key? key,
// param: {required AndroidViewController controller}
    required AndroidViewController controller,
// param: {required PlatformViewHitTestBehavior hitTestBehavior}
    required PlatformViewHitTestBehavior hitTestBehavior,
// param: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers}
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) {}
}
