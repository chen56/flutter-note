// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.620420

library;

import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'package:flutter/src/gestures/force_press.dart';
import 'package:flutter/src/gestures/scale.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'dart:core';
import 'dart:ui';
export 'package:flutter/gestures.dart'
    show
        DragDownDetails,
        DragEndDetails,
        DragStartDetails,
        DragUpdateDetails,
        ForcePressDetails,
        GestureDragCancelCallback,
        GestureDragDownCallback,
        GestureDragEndCallback,
        GestureDragStartCallback,
        GestureDragUpdateCallback,
        GestureForcePressEndCallback,
        GestureForcePressPeakCallback,
        GestureForcePressStartCallback,
        GestureForcePressUpdateCallback,
        GestureLongPressCallback,
        GestureLongPressEndCallback,
        GestureLongPressMoveUpdateCallback,
        GestureLongPressStartCallback,
        GestureLongPressUpCallback,
        GestureScaleEndCallback,
        GestureScaleStartCallback,
        GestureScaleUpdateCallback,
        GestureTapCallback,
        GestureTapCancelCallback,
        GestureTapDownCallback,
        GestureTapUpCallback,
        LongPressEndDetails,
        LongPressMoveUpdateDetails,
        LongPressStartDetails,
        ScaleEndDetails,
        ScaleStartDetails,
        ScaleUpdateDetails,
        TapDownDetails,
        TapUpDetails,
        Velocity;
export 'package:flutter/rendering.dart' show RenderSemanticsGestureHandler;

/// abstract class GestureRecognizerFactory<T extends GestureRecognizer>
abstract class GestureRecognizerFactoryMate<T extends GestureRecognizer> {
  /// GestureRecognizerFactory<T> GestureRecognizerFactory()
  GestureRecognizerFactoryMate() {}
}

/// class GestureRecognizerFactoryWithHandlers<T extends GestureRecognizer> extends GestureRecognizerFactory<T>
class GestureRecognizerFactoryWithHandlersMate<T extends GestureRecognizer> {
  /// GestureRecognizerFactoryWithHandlers<T> GestureRecognizerFactoryWithHandlers(T Function() _constructor, void Function(T) _initializer)
  GestureRecognizerFactoryWithHandlersMate(
// param: T Function() _constructor
    T Function() _constructor,
// param: void Function(T) _initializer
    void Function(
      T, [
      T,
    ])
        _initializer,
  ) {}
}

/// class GestureDetector extends StatelessWidget
class GestureDetectorMate {
  /// GestureDetector GestureDetector({Key? key, Widget? child, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTap, void Function()? onTapCancel, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapUpDetails)? onSecondaryTapUp, void Function()? onSecondaryTapCancel, void Function(TapDownDetails)? onTertiaryTapDown, void Function(TapUpDetails)? onTertiaryTapUp, void Function()? onTertiaryTapCancel, void Function(TapDownDetails)? onDoubleTapDown, void Function()? onDoubleTap, void Function()? onDoubleTapCancel, void Function(LongPressDownDetails)? onLongPressDown, void Function()? onLongPressCancel, void Function()? onLongPress, void Function(LongPressStartDetails)? onLongPressStart, void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate, void Function()? onLongPressUp, void Function(LongPressEndDetails)? onLongPressEnd, void Function(LongPressDownDetails)? onSecondaryLongPressDown, void Function()? onSecondaryLongPressCancel, void Function()? onSecondaryLongPress, void Function(LongPressStartDetails)? onSecondaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate, void Function()? onSecondaryLongPressUp, void Function(LongPressEndDetails)? onSecondaryLongPressEnd, void Function(LongPressDownDetails)? onTertiaryLongPressDown, void Function()? onTertiaryLongPressCancel, void Function()? onTertiaryLongPress, void Function(LongPressStartDetails)? onTertiaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate, void Function()? onTertiaryLongPressUp, void Function(LongPressEndDetails)? onTertiaryLongPressEnd, void Function(DragDownDetails)? onVerticalDragDown, void Function(DragStartDetails)? onVerticalDragStart, void Function(DragUpdateDetails)? onVerticalDragUpdate, void Function(DragEndDetails)? onVerticalDragEnd, void Function()? onVerticalDragCancel, void Function(DragDownDetails)? onHorizontalDragDown, void Function(DragStartDetails)? onHorizontalDragStart, void Function(DragUpdateDetails)? onHorizontalDragUpdate, void Function(DragEndDetails)? onHorizontalDragEnd, void Function()? onHorizontalDragCancel, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressPeak, void Function(ForcePressDetails)? onForcePressUpdate, void Function(ForcePressDetails)? onForcePressEnd, void Function(DragDownDetails)? onPanDown, void Function(DragStartDetails)? onPanStart, void Function(DragUpdateDetails)? onPanUpdate, void Function(DragEndDetails)? onPanEnd, void Function()? onPanCancel, void Function(ScaleStartDetails)? onScaleStart, void Function(ScaleUpdateDetails)? onScaleUpdate, void Function(ScaleEndDetails)? onScaleEnd, HitTestBehavior? behavior, bool excludeFromSemantics = false, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool trackpadScrollCausesScale = false, Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor, Set<PointerDeviceKind>? supportedDevices})
  GestureDetectorMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {void Function(TapDownDetails)? onTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onTapDown,
// param: {void Function(TapUpDetails)? onTapUp}
    void Function(
      TapUpDetails, [
      TapUpDetails,
    ])?
        onTapUp,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {void Function()? onTapCancel}
    void Function()? onTapCancel,
// param: {void Function()? onSecondaryTap}
    void Function()? onSecondaryTap,
// param: {void Function(TapDownDetails)? onSecondaryTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onSecondaryTapDown,
// param: {void Function(TapUpDetails)? onSecondaryTapUp}
    void Function(
      TapUpDetails, [
      TapUpDetails,
    ])?
        onSecondaryTapUp,
// param: {void Function()? onSecondaryTapCancel}
    void Function()? onSecondaryTapCancel,
// param: {void Function(TapDownDetails)? onTertiaryTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onTertiaryTapDown,
// param: {void Function(TapUpDetails)? onTertiaryTapUp}
    void Function(
      TapUpDetails, [
      TapUpDetails,
    ])?
        onTertiaryTapUp,
// param: {void Function()? onTertiaryTapCancel}
    void Function()? onTertiaryTapCancel,
// param: {void Function(TapDownDetails)? onDoubleTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onDoubleTapDown,
// param: {void Function()? onDoubleTap}
    void Function()? onDoubleTap,
// param: {void Function()? onDoubleTapCancel}
    void Function()? onDoubleTapCancel,
// param: {void Function(LongPressDownDetails)? onLongPressDown}
    void Function(
      LongPressDownDetails, [
      LongPressDownDetails,
    ])?
        onLongPressDown,
// param: {void Function()? onLongPressCancel}
    void Function()? onLongPressCancel,
// param: {void Function()? onLongPress}
    void Function()? onLongPress,
// param: {void Function(LongPressStartDetails)? onLongPressStart}
    void Function(
      LongPressStartDetails, [
      LongPressStartDetails,
    ])?
        onLongPressStart,
// param: {void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate}
    void Function(
      LongPressMoveUpdateDetails, [
      LongPressMoveUpdateDetails,
    ])?
        onLongPressMoveUpdate,
// param: {void Function()? onLongPressUp}
    void Function()? onLongPressUp,
// param: {void Function(LongPressEndDetails)? onLongPressEnd}
    void Function(
      LongPressEndDetails, [
      LongPressEndDetails,
    ])?
        onLongPressEnd,
// param: {void Function(LongPressDownDetails)? onSecondaryLongPressDown}
    void Function(
      LongPressDownDetails, [
      LongPressDownDetails,
    ])?
        onSecondaryLongPressDown,
// param: {void Function()? onSecondaryLongPressCancel}
    void Function()? onSecondaryLongPressCancel,
// param: {void Function()? onSecondaryLongPress}
    void Function()? onSecondaryLongPress,
// param: {void Function(LongPressStartDetails)? onSecondaryLongPressStart}
    void Function(
      LongPressStartDetails, [
      LongPressStartDetails,
    ])?
        onSecondaryLongPressStart,
// param: {void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate}
    void Function(
      LongPressMoveUpdateDetails, [
      LongPressMoveUpdateDetails,
    ])?
        onSecondaryLongPressMoveUpdate,
// param: {void Function()? onSecondaryLongPressUp}
    void Function()? onSecondaryLongPressUp,
// param: {void Function(LongPressEndDetails)? onSecondaryLongPressEnd}
    void Function(
      LongPressEndDetails, [
      LongPressEndDetails,
    ])?
        onSecondaryLongPressEnd,
// param: {void Function(LongPressDownDetails)? onTertiaryLongPressDown}
    void Function(
      LongPressDownDetails, [
      LongPressDownDetails,
    ])?
        onTertiaryLongPressDown,
// param: {void Function()? onTertiaryLongPressCancel}
    void Function()? onTertiaryLongPressCancel,
// param: {void Function()? onTertiaryLongPress}
    void Function()? onTertiaryLongPress,
// param: {void Function(LongPressStartDetails)? onTertiaryLongPressStart}
    void Function(
      LongPressStartDetails, [
      LongPressStartDetails,
    ])?
        onTertiaryLongPressStart,
// param: {void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate}
    void Function(
      LongPressMoveUpdateDetails, [
      LongPressMoveUpdateDetails,
    ])?
        onTertiaryLongPressMoveUpdate,
// param: {void Function()? onTertiaryLongPressUp}
    void Function()? onTertiaryLongPressUp,
// param: {void Function(LongPressEndDetails)? onTertiaryLongPressEnd}
    void Function(
      LongPressEndDetails, [
      LongPressEndDetails,
    ])?
        onTertiaryLongPressEnd,
// param: {void Function(DragDownDetails)? onVerticalDragDown}
    void Function(
      DragDownDetails, [
      DragDownDetails,
    ])?
        onVerticalDragDown,
// param: {void Function(DragStartDetails)? onVerticalDragStart}
    void Function(
      DragStartDetails, [
      DragStartDetails,
    ])?
        onVerticalDragStart,
// param: {void Function(DragUpdateDetails)? onVerticalDragUpdate}
    void Function(
      DragUpdateDetails, [
      DragUpdateDetails,
    ])?
        onVerticalDragUpdate,
// param: {void Function(DragEndDetails)? onVerticalDragEnd}
    void Function(
      DragEndDetails, [
      DragEndDetails,
    ])?
        onVerticalDragEnd,
// param: {void Function()? onVerticalDragCancel}
    void Function()? onVerticalDragCancel,
// param: {void Function(DragDownDetails)? onHorizontalDragDown}
    void Function(
      DragDownDetails, [
      DragDownDetails,
    ])?
        onHorizontalDragDown,
// param: {void Function(DragStartDetails)? onHorizontalDragStart}
    void Function(
      DragStartDetails, [
      DragStartDetails,
    ])?
        onHorizontalDragStart,
// param: {void Function(DragUpdateDetails)? onHorizontalDragUpdate}
    void Function(
      DragUpdateDetails, [
      DragUpdateDetails,
    ])?
        onHorizontalDragUpdate,
// param: {void Function(DragEndDetails)? onHorizontalDragEnd}
    void Function(
      DragEndDetails, [
      DragEndDetails,
    ])?
        onHorizontalDragEnd,
// param: {void Function()? onHorizontalDragCancel}
    void Function()? onHorizontalDragCancel,
// param: {void Function(ForcePressDetails)? onForcePressStart}
    void Function(
      ForcePressDetails, [
      ForcePressDetails,
    ])?
        onForcePressStart,
// param: {void Function(ForcePressDetails)? onForcePressPeak}
    void Function(
      ForcePressDetails, [
      ForcePressDetails,
    ])?
        onForcePressPeak,
// param: {void Function(ForcePressDetails)? onForcePressUpdate}
    void Function(
      ForcePressDetails, [
      ForcePressDetails,
    ])?
        onForcePressUpdate,
// param: {void Function(ForcePressDetails)? onForcePressEnd}
    void Function(
      ForcePressDetails, [
      ForcePressDetails,
    ])?
        onForcePressEnd,
// param: {void Function(DragDownDetails)? onPanDown}
    void Function(
      DragDownDetails, [
      DragDownDetails,
    ])?
        onPanDown,
// param: {void Function(DragStartDetails)? onPanStart}
    void Function(
      DragStartDetails, [
      DragStartDetails,
    ])?
        onPanStart,
// param: {void Function(DragUpdateDetails)? onPanUpdate}
    void Function(
      DragUpdateDetails, [
      DragUpdateDetails,
    ])?
        onPanUpdate,
// param: {void Function(DragEndDetails)? onPanEnd}
    void Function(
      DragEndDetails, [
      DragEndDetails,
    ])?
        onPanEnd,
// param: {void Function()? onPanCancel}
    void Function()? onPanCancel,
// param: {void Function(ScaleStartDetails)? onScaleStart}
    void Function(
      ScaleStartDetails, [
      ScaleStartDetails,
    ])?
        onScaleStart,
// param: {void Function(ScaleUpdateDetails)? onScaleUpdate}
    void Function(
      ScaleUpdateDetails, [
      ScaleUpdateDetails,
    ])?
        onScaleUpdate,
// param: {void Function(ScaleEndDetails)? onScaleEnd}
    void Function(
      ScaleEndDetails, [
      ScaleEndDetails,
    ])?
        onScaleEnd,
// param: {HitTestBehavior? behavior}
    HitTestBehavior? behavior,
// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,
// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,
// param: {bool trackpadScrollCausesScale = false}
    required bool trackpadScrollCausesScale,
// param: {Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor}
    required Offset trackpadScrollToScaleFactor,
// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,
  }) {}
}

/// class RawGestureDetector extends StatefulWidget
class RawGestureDetectorMate {
  /// RawGestureDetector RawGestureDetector({Key? key, Widget? child, Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}, HitTestBehavior? behavior, bool excludeFromSemantics = false, SemanticsGestureDelegate? semantics})
  RawGestureDetectorMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}}
    required Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures,
// param: {HitTestBehavior? behavior}
    HitTestBehavior? behavior,
// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,
// param: {SemanticsGestureDelegate? semantics}
    SemanticsGestureDelegate? semantics,
  }) {}
}

/// class RawGestureDetectorState extends State<RawGestureDetector>
class RawGestureDetectorStateMate {
  /// RawGestureDetectorState RawGestureDetectorState()
  RawGestureDetectorStateMate() {}
}

/// abstract class SemanticsGestureDelegate
abstract class SemanticsGestureDelegateMate {
  /// SemanticsGestureDelegate SemanticsGestureDelegate()
  SemanticsGestureDelegateMate() {}
}
