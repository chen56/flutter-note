// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.567698

import 'package:flutter/src/widgets/page_view.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/sliver.dart';

/// class PageController extends ScrollController
class PageControllerMate extends PageController {
  /// PageController PageController({int initialPage = 0, bool keepPage = true, double viewportFraction = 1.0})
  PageControllerMate({
    /// param: {int initialPage = 0}
    required int initialPage,

    /// param: {bool keepPage = true}
    required bool keepPage,

    /// param: {double viewportFraction = 1.0}
    required double viewportFraction,
  }) : super(
          initialPage: initialPage,
          keepPage: keepPage,
          viewportFraction: viewportFraction,
        ) {}
}

/// class PageMetrics extends FixedScrollMetrics
class PageMetricsMate extends PageMetrics {
  /// PageMetrics PageMetrics({required double? minScrollExtent, required double? maxScrollExtent, required double? pixels, required double? viewportDimension, required AxisDirection axisDirection, required double viewportFraction, required double devicePixelRatio})
  PageMetricsMate({
    /// param: {required double? minScrollExtent}
    required double? minScrollExtent,

    /// param: {required double? maxScrollExtent}
    required double? maxScrollExtent,

    /// param: {required double? pixels}
    required double? pixels,

    /// param: {required double? viewportDimension}
    required double? viewportDimension,

    /// param: {required AxisDirection axisDirection}
    required AxisDirection axisDirection,

    /// param: {required double viewportFraction}
    required double viewportFraction,

    /// param: {required double devicePixelRatio}
    required double devicePixelRatio,
  }) : super(
          minScrollExtent: minScrollExtent,
          maxScrollExtent: maxScrollExtent,
          pixels: pixels,
          viewportDimension: viewportDimension,
          axisDirection: axisDirection,
          viewportFraction: viewportFraction,
          devicePixelRatio: devicePixelRatio,
        ) {}
}

/// class PageScrollPhysics extends ScrollPhysics
class PageScrollPhysicsMate extends PageScrollPhysics {
  /// PageScrollPhysics PageScrollPhysics({ScrollPhysics? parent})
  PageScrollPhysicsMate(
      {
      /// param: {ScrollPhysics? parent}
      ScrollPhysics? parent})
      : super(parent: parent) {}
}

/// class PageView extends StatefulWidget
class PageViewMate extends PageView {
  /// PageView PageView({Key? key, Axis scrollDirection = Axis.horizontal, bool reverse = false, PageController? controller, ScrollPhysics? physics, bool pageSnapping = true, void Function(int)? onPageChanged, List<Widget> children = const <Widget>[], DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool allowImplicitScrolling = false, String? restorationId, Clip clipBehavior = Clip.hardEdge, ScrollBehavior? scrollBehavior, bool padEnds = true})
  PageViewMate({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.horizontal}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {PageController? controller}
    PageController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool pageSnapping = true}
    required bool pageSnapping,

    /// param: {void Function(int)? onPageChanged}
    ValueChanged<int>? onPageChanged,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {bool allowImplicitScrolling = false}
    required bool allowImplicitScrolling,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {bool padEnds = true}
    required bool padEnds,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          physics: physics,
          pageSnapping: pageSnapping,
          onPageChanged: onPageChanged,
          children: children,
          dragStartBehavior: dragStartBehavior,
          allowImplicitScrolling: allowImplicitScrolling,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
          scrollBehavior: scrollBehavior,
          padEnds: padEnds,
        ) {}

  /// PageView PageView.builder({Key? key, Axis scrollDirection = Axis.horizontal, bool reverse = false, PageController? controller, ScrollPhysics? physics, bool pageSnapping = true, void Function(int)? onPageChanged, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool allowImplicitScrolling = false, String? restorationId, Clip clipBehavior = Clip.hardEdge, ScrollBehavior? scrollBehavior, bool padEnds = true})
  PageViewMate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.horizontal}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {PageController? controller}
    PageController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool pageSnapping = true}
    required bool pageSnapping,

    /// param: {void Function(int)? onPageChanged}
    ValueChanged<int>? onPageChanged,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {bool allowImplicitScrolling = false}
    required bool allowImplicitScrolling,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {bool padEnds = true}
    required bool padEnds,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          physics: physics,
          pageSnapping: pageSnapping,
          onPageChanged: onPageChanged,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          dragStartBehavior: dragStartBehavior,
          allowImplicitScrolling: allowImplicitScrolling,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
          scrollBehavior: scrollBehavior,
          padEnds: padEnds,
        ) {}

  /// PageView PageView.custom({Key? key, Axis scrollDirection = Axis.horizontal, bool reverse = false, PageController? controller, ScrollPhysics? physics, bool pageSnapping = true, void Function(int)? onPageChanged, required SliverChildDelegate childrenDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool allowImplicitScrolling = false, String? restorationId, Clip clipBehavior = Clip.hardEdge, ScrollBehavior? scrollBehavior, bool padEnds = true})
  PageViewMate.custom({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.horizontal}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {PageController? controller}
    PageController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool pageSnapping = true}
    required bool pageSnapping,

    /// param: {void Function(int)? onPageChanged}
    ValueChanged<int>? onPageChanged,

    /// param: {required SliverChildDelegate childrenDelegate}
    required SliverChildDelegate childrenDelegate,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {bool allowImplicitScrolling = false}
    required bool allowImplicitScrolling,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {bool padEnds = true}
    required bool padEnds,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          physics: physics,
          pageSnapping: pageSnapping,
          onPageChanged: onPageChanged,
          childrenDelegate: childrenDelegate,
          dragStartBehavior: dragStartBehavior,
          allowImplicitScrolling: allowImplicitScrolling,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
          scrollBehavior: scrollBehavior,
          padEnds: padEnds,
        ) {}
}
