// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.832308

library;

import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'dart:core';
import 'package:flutter/src/physics/simulation.dart';
import 'package:flutter/src/scheduler/ticker.dart';
import 'package:flutter/src/animation/curves.dart';

/// abstract class ScrollActivityDelegate
abstract class ScrollActivityDelegateMate {
  /// ScrollActivityDelegate ScrollActivityDelegate()
  ScrollActivityDelegateMate() {}
}

/// abstract class ScrollActivity
abstract class ScrollActivityMate {
  /// ScrollActivity ScrollActivity(ScrollActivityDelegate _delegate)
  ScrollActivityMate(
// param: ScrollActivityDelegate _delegate
      ScrollActivityDelegate _delegate) {}
}

/// class IdleScrollActivity extends ScrollActivity
class IdleScrollActivityMate {
  /// IdleScrollActivity IdleScrollActivity(ScrollActivityDelegate delegate)
  IdleScrollActivityMate(
// param: ScrollActivityDelegate delegate
      ScrollActivityDelegate delegate) {}
}

/// abstract class ScrollHoldController
abstract class ScrollHoldControllerMate {
  /// ScrollHoldController ScrollHoldController()
  ScrollHoldControllerMate() {}
}

/// class HoldScrollActivity extends ScrollActivity implements ScrollHoldController
class HoldScrollActivityMate {
  /// HoldScrollActivity HoldScrollActivity({required ScrollActivityDelegate delegate, void Function()? onHoldCanceled})
  HoldScrollActivityMate({
// param: {required ScrollActivityDelegate delegate}
    required ScrollActivityDelegate delegate,
// param: {void Function()? onHoldCanceled}
    void Function()? onHoldCanceled,
  }) {}
}

/// class ScrollDragController implements Drag
class ScrollDragControllerMate {
  /// ScrollDragController ScrollDragController({required ScrollActivityDelegate delegate, required DragStartDetails details, void Function()? onDragCanceled, double? carriedVelocity, double? motionStartDistanceThreshold})
  ScrollDragControllerMate({
// param: {required ScrollActivityDelegate delegate}
    required ScrollActivityDelegate delegate,
// param: {required DragStartDetails details}
    required DragStartDetails details,
// param: {void Function()? onDragCanceled}
    void Function()? onDragCanceled,
// param: {double? carriedVelocity}
    double? carriedVelocity,
// param: {double? motionStartDistanceThreshold}
    double? motionStartDistanceThreshold,
  }) {}
}

/// class DragScrollActivity extends ScrollActivity
class DragScrollActivityMate {
  /// DragScrollActivity DragScrollActivity(ScrollActivityDelegate delegate, ScrollDragController controller)
  DragScrollActivityMate(
// param: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate,
// param: ScrollDragController controller
    ScrollDragController controller,
  ) {}
}

/// class BallisticScrollActivity extends ScrollActivity
class BallisticScrollActivityMate {
  /// BallisticScrollActivity BallisticScrollActivity(ScrollActivityDelegate delegate, Simulation simulation, TickerProvider vsync, bool shouldIgnorePointer)
  BallisticScrollActivityMate(
// param: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate,
// param: Simulation simulation
    Simulation simulation,
// param: TickerProvider vsync
    TickerProvider vsync,
// param: bool shouldIgnorePointer
    bool shouldIgnorePointer,
  ) {}
}

/// class DrivenScrollActivity extends ScrollActivity
class DrivenScrollActivityMate {
  /// DrivenScrollActivity DrivenScrollActivity(ScrollActivityDelegate delegate, {required double from, required double to, required Duration duration, required Curve curve, required TickerProvider vsync})
  DrivenScrollActivityMate(
// param: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate, {
// param: {required double from}
    required double from,
// param: {required double to}
    required double to,
// param: {required Duration duration}
    required Duration duration,
// param: {required Curve curve}
    required Curve curve,
// param: {required TickerProvider vsync}
    required TickerProvider vsync,
  }) {}
}
