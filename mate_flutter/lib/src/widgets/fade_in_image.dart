// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:11.081713

library;

import 'package:flutter/src/widgets/fade_in_image.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:core';
import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'dart:typed_data';
import 'package:flutter/src/services/asset_bundle.dart';

/// class FadeInImage extends StatefulWidget
class FadeInImageMate extends FadeInImage {
  /// FadeInImage FadeInImage({Key? key, required ImageProvider<Object> placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required ImageProvider<Object> image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false})
  FadeInImageMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required ImageProvider<Object> placeholder}
    required ImageProvider<Object> placeholder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder}
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// param: {required ImageProvider<Object> image}
    required ImageProvider<Object> image,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder}
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {String? imageSemanticLabel}
    String? imageSemanticLabel,

    /// param: {Duration fadeOutDuration = const Duration(milliseconds: 300)}
    required Duration fadeOutDuration,

    /// param: {Curve fadeOutCurve = Curves.easeOut}
    required Curve fadeOutCurve,

    /// param: {Duration fadeInDuration = const Duration(milliseconds: 700)}
    required Duration fadeInDuration,

    /// param: {Curve fadeInCurve = Curves.easeIn}
    required Curve fadeInCurve,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {BoxFit? placeholderFit}
    BoxFit? placeholderFit,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {FilterQuality? placeholderFilterQuality}
    FilterQuality? placeholderFilterQuality,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,
  }) : super(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
        ) {}

  /// FadeInImage FadeInImage.memoryNetwork({Key? key, required Uint8List placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required String image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, double placeholderScale = 1.0, double imageScale = 1.0, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, int? placeholderCacheWidth, int? placeholderCacheHeight, int? imageCacheWidth, int? imageCacheHeight})
  FadeInImageMate.memoryNetwork({
    /// param: {Key? key}
    Key? key,

    /// param: {required Uint8List placeholder}
    required Uint8List placeholder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder}
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// param: {required String image}
    required String image,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder}
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// param: {double placeholderScale = 1.0}
    required double placeholderScale,

    /// param: {double imageScale = 1.0}
    required double imageScale,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {String? imageSemanticLabel}
    String? imageSemanticLabel,

    /// param: {Duration fadeOutDuration = const Duration(milliseconds: 300)}
    required Duration fadeOutDuration,

    /// param: {Curve fadeOutCurve = Curves.easeOut}
    required Curve fadeOutCurve,

    /// param: {Duration fadeInDuration = const Duration(milliseconds: 700)}
    required Duration fadeInDuration,

    /// param: {Curve fadeInCurve = Curves.easeIn}
    required Curve fadeInCurve,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {BoxFit? placeholderFit}
    BoxFit? placeholderFit,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {FilterQuality? placeholderFilterQuality}
    FilterQuality? placeholderFilterQuality,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {int? placeholderCacheWidth}
    int? placeholderCacheWidth,

    /// param: {int? placeholderCacheHeight}
    int? placeholderCacheHeight,

    /// param: {int? imageCacheWidth}
    int? imageCacheWidth,

    /// param: {int? imageCacheHeight}
    int? imageCacheHeight,
  }) : super.memoryNetwork(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          placeholderScale: placeholderScale,
          imageScale: imageScale,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          placeholderCacheWidth: placeholderCacheWidth,
          placeholderCacheHeight: placeholderCacheHeight,
          imageCacheWidth: imageCacheWidth,
          imageCacheHeight: imageCacheHeight,
        ) {}

  /// FadeInImage FadeInImage.assetNetwork({Key? key, required String placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required String image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, AssetBundle? bundle, double? placeholderScale, double imageScale = 1.0, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, int? placeholderCacheWidth, int? placeholderCacheHeight, int? imageCacheWidth, int? imageCacheHeight})
  FadeInImageMate.assetNetwork({
    /// param: {Key? key}
    Key? key,

    /// param: {required String placeholder}
    required String placeholder,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder}
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// param: {required String image}
    required String image,

    /// param: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder}
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// param: {AssetBundle? bundle}
    AssetBundle? bundle,

    /// param: {double? placeholderScale}
    double? placeholderScale,

    /// param: {double imageScale = 1.0}
    required double imageScale,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {String? imageSemanticLabel}
    String? imageSemanticLabel,

    /// param: {Duration fadeOutDuration = const Duration(milliseconds: 300)}
    required Duration fadeOutDuration,

    /// param: {Curve fadeOutCurve = Curves.easeOut}
    required Curve fadeOutCurve,

    /// param: {Duration fadeInDuration = const Duration(milliseconds: 700)}
    required Duration fadeInDuration,

    /// param: {Curve fadeInCurve = Curves.easeIn}
    required Curve fadeInCurve,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {BoxFit? placeholderFit}
    BoxFit? placeholderFit,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {FilterQuality? placeholderFilterQuality}
    FilterQuality? placeholderFilterQuality,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {int? placeholderCacheWidth}
    int? placeholderCacheWidth,

    /// param: {int? placeholderCacheHeight}
    int? placeholderCacheHeight,

    /// param: {int? imageCacheWidth}
    int? imageCacheWidth,

    /// param: {int? imageCacheHeight}
    int? imageCacheHeight,
  }) : super.assetNetwork(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          bundle: bundle,
          placeholderScale: placeholderScale,
          imageScale: imageScale,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          placeholderCacheWidth: placeholderCacheWidth,
          placeholderCacheHeight: placeholderCacheHeight,
          imageCacheWidth: imageCacheWidth,
          imageCacheHeight: imageCacheHeight,
        ) {}
}
