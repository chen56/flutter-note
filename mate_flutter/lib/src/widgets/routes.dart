// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.822732

library;

import 'package:flutter/src/widgets/navigator.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_traversal.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/animation/animation.dart';

/// abstract class OverlayRoute<T> extends Route<T>
abstract class OverlayRouteMate<T> {
  /// OverlayRoute<T> OverlayRoute({RouteSettings? settings})
  OverlayRouteMate(
      {
// param: {RouteSettings? settings}
      RouteSettings? settings}) {}
}

/// abstract class TransitionRoute<T> extends OverlayRoute<T>
abstract class TransitionRouteMate<T> {
  /// TransitionRoute<T> TransitionRoute({RouteSettings? settings})
  TransitionRouteMate(
      {
// param: {RouteSettings? settings}
      RouteSettings? settings}) {}
}

/// class LocalHistoryEntry
class LocalHistoryEntryMate {
  /// LocalHistoryEntry LocalHistoryEntry({void Function()? onRemove, bool impliesAppBarDismissal = true})
  LocalHistoryEntryMate({
// param: {void Function()? onRemove}
    void Function()? onRemove,
// param: {bool impliesAppBarDismissal = true}
    required bool impliesAppBarDismissal,
  }) {}
}

/// abstract class ModalRoute<T> extends TransitionRoute<T> with LocalHistoryRoute<T>
abstract class ModalRouteMate<T> {
  /// ModalRoute<T> ModalRoute({RouteSettings? settings, ImageFilter? filter, TraversalEdgeBehavior? traversalEdgeBehavior})
  ModalRouteMate({
// param: {RouteSettings? settings}
    RouteSettings? settings,
// param: {ImageFilter? filter}
    ImageFilter? filter,
// param: {TraversalEdgeBehavior? traversalEdgeBehavior}
    TraversalEdgeBehavior? traversalEdgeBehavior,
  }) {}
}

/// abstract class PopupRoute<T> extends ModalRoute<T>
abstract class PopupRouteMate<T> {
  /// PopupRoute<T> PopupRoute({RouteSettings? settings, ImageFilter? filter, TraversalEdgeBehavior? traversalEdgeBehavior})
  PopupRouteMate({
// param: {RouteSettings? settings}
    RouteSettings? settings,
// param: {ImageFilter? filter}
    ImageFilter? filter,
// param: {TraversalEdgeBehavior? traversalEdgeBehavior}
    TraversalEdgeBehavior? traversalEdgeBehavior,
  }) {}
}

/// class RouteObserver<R extends Route<dynamic>> extends NavigatorObserver
class RouteObserverMate<R extends Route<dynamic>> {
  /// RouteObserver<R> RouteObserver()
  RouteObserverMate() {}
}

/// abstract class RouteAware
abstract class RouteAwareMate {
  /// RouteAware RouteAware()
  RouteAwareMate() {}
}

/// class RawDialogRoute<T> extends PopupRoute<T>
class RawDialogRouteMate<T> {
  /// RawDialogRoute<T> RawDialogRoute({required Widget Function(BuildContext, Animation<double>, Animation<double>) pageBuilder, bool barrierDismissible = true, Color? barrierColor = const Color(0x80000000), String? barrierLabel, Duration transitionDuration = const Duration(milliseconds: 200), Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder, RouteSettings? settings, Offset? anchorPoint, TraversalEdgeBehavior? traversalEdgeBehavior})
  RawDialogRouteMate({
// param: {required Widget Function(BuildContext, Animation<double>, Animation<double>) pageBuilder}
    required Widget Function(
      BuildContext,
      Animation<double>,
      Animation<double>, [
      BuildContext,
      Animation<double>,
      Animation<double>,
    ])
        pageBuilder,
// param: {bool barrierDismissible = true}
    required bool barrierDismissible,
// param: {Color? barrierColor = const Color(0x80000000)}
    Color? barrierColor,
// param: {String? barrierLabel}
    String? barrierLabel,
// param: {Duration transitionDuration = const Duration(milliseconds: 200)}
    required Duration transitionDuration,
// param: {Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder}
    Widget Function(
      BuildContext,
      Animation<double>,
      Animation<double>,
      Widget, [
      BuildContext,
      Animation<double>,
      Animation<double>,
      Widget,
    ])?
        transitionBuilder,
// param: {RouteSettings? settings}
    RouteSettings? settings,
// param: {Offset? anchorPoint}
    Offset? anchorPoint,
// param: {TraversalEdgeBehavior? traversalEdgeBehavior}
    TraversalEdgeBehavior? traversalEdgeBehavior,
  }) {}
}
