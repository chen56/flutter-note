// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.604309

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:async';
import 'dart:core';
import 'package:flutter/src/widgets/form.dart';

/// class Form extends StatefulWidget
class FormMate {
  /// Form Form({Key? key, required Widget child, Future<bool> Function()? onWillPop, void Function()? onChanged, AutovalidateMode? autovalidateMode})
  FormMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {Future<bool> Function()? onWillPop}
    Future<bool> Function()? onWillPop,
// param: {void Function()? onChanged}
    void Function()? onChanged,
// param: {AutovalidateMode? autovalidateMode}
    AutovalidateMode? autovalidateMode,
  }) {}
}

/// class FormState extends State<Form>
class FormStateMate {
  /// FormState FormState()
  FormStateMate() {}
}

/// class FormField<T> extends StatefulWidget
class FormFieldMate<T> {
  /// FormField<T> FormField({Key? key, required Widget Function(FormFieldState<T>) builder, void Function(T?)? onSaved, String? Function(T?)? validator, T? initialValue, bool enabled = true, AutovalidateMode? autovalidateMode, String? restorationId})
  FormFieldMate({
// param: {Key? key}
    Key? key,
// param: {required Widget Function(FormFieldState<T>) builder}
    required Widget Function(
      FormFieldState<T>, [
      FormFieldState<T>,
    ])
        builder,
// param: {void Function(T?)? onSaved}
    void Function(
      T?, [
      T?,
    ])?
        onSaved,
// param: {String? Function(T?)? validator}
    String? Function(
      T?, [
      T?,
    ])?
        validator,
// param: {T? initialValue}
    T? initialValue,
// param: {bool enabled = true}
    required bool enabled,
// param: {AutovalidateMode? autovalidateMode}
    AutovalidateMode? autovalidateMode,
// param: {String? restorationId}
    String? restorationId,
  }) {}
}

/// class FormFieldState<T> extends State<FormField<T>> with RestorationMixin<FormField<T>>
class FormFieldStateMate<T> {
  /// FormFieldState<T> FormFieldState()
  FormFieldStateMate() {}
}
