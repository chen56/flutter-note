// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.966288

library;

import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';

/// class TapDragDownDetails with Diagnosticable
class TapDragDownDetailsMate {
  /// TapDragDownDetails TapDragDownDetails({required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragDownDetailsMate({
// param: {required Offset globalPosition}
    required Offset globalPosition,
// param: {required Offset localPosition}
    required Offset localPosition,
// param: {PointerDeviceKind? kind}
    PointerDeviceKind? kind,
// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,
// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) {}
}

/// class TapDragUpDetails with Diagnosticable
class TapDragUpDetailsMate {
  /// TapDragUpDetails TapDragUpDetails({required PointerDeviceKind kind, required Offset globalPosition, required Offset localPosition, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragUpDetailsMate({
// param: {required PointerDeviceKind kind}
    required PointerDeviceKind kind,
// param: {required Offset globalPosition}
    required Offset globalPosition,
// param: {required Offset localPosition}
    required Offset localPosition,
// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,
// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) {}
}

/// class TapDragStartDetails with Diagnosticable
class TapDragStartDetailsMate {
  /// TapDragStartDetails TapDragStartDetails({Duration? sourceTimeStamp, required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragStartDetailsMate({
// param: {Duration? sourceTimeStamp}
    Duration? sourceTimeStamp,
// param: {required Offset globalPosition}
    required Offset globalPosition,
// param: {required Offset localPosition}
    required Offset localPosition,
// param: {PointerDeviceKind? kind}
    PointerDeviceKind? kind,
// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,
// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) {}
}

/// class TapDragUpdateDetails with Diagnosticable
class TapDragUpdateDetailsMate {
  /// TapDragUpdateDetails TapDragUpdateDetails({Duration? sourceTimeStamp, Offset delta = Offset.zero, double? primaryDelta, required Offset globalPosition, PointerDeviceKind? kind, required Offset localPosition, required Offset offsetFromOrigin, required Offset localOffsetFromOrigin, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragUpdateDetailsMate({
// param: {Duration? sourceTimeStamp}
    Duration? sourceTimeStamp,
// param: {Offset delta = Offset.zero}
    required Offset delta,
// param: {double? primaryDelta}
    double? primaryDelta,
// param: {required Offset globalPosition}
    required Offset globalPosition,
// param: {PointerDeviceKind? kind}
    PointerDeviceKind? kind,
// param: {required Offset localPosition}
    required Offset localPosition,
// param: {required Offset offsetFromOrigin}
    required Offset offsetFromOrigin,
// param: {required Offset localOffsetFromOrigin}
    required Offset localOffsetFromOrigin,
// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,
// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) {}
}

/// class TapDragEndDetails with Diagnosticable
class TapDragEndDetailsMate {
  /// TapDragEndDetails TapDragEndDetails({Velocity velocity = Velocity.zero, double? primaryVelocity, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragEndDetailsMate({
// param: {Velocity velocity = Velocity.zero}
    required Velocity velocity,
// param: {double? primaryVelocity}
    double? primaryVelocity,
// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,
// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) {}
}

/// class TapAndDragGestureRecognizer extends OneSequenceGestureRecognizer with _TapStatusTrackerMixin
class TapAndDragGestureRecognizerMate {
  /// TapAndDragGestureRecognizer TapAndDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  TapAndDragGestureRecognizerMate({
// param: {Object? debugOwner}
    Object? debugOwner,
// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,
// param: {bool Function(int)? allowedButtonsFilter}
    bool Function(
      int, [
      int,
    ])?
        allowedButtonsFilter,
  }) {}
}
