// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.989665

library;

import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/editable.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/rendering/selection.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';
import 'package:flutter/src/gestures/force_press.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
export 'package:flutter/rendering.dart' show TextSelectionPoint;
export 'package:flutter/services.dart' show TextSelectionDelegate;

/// class ToolbarItemsParentData extends ContainerBoxParentData<RenderBox>
class ToolbarItemsParentDataMate {
  /// ToolbarItemsParentData ToolbarItemsParentData()
  ToolbarItemsParentDataMate() {}
}

/// abstract class TextSelectionControls
abstract class TextSelectionControlsMate {
  /// TextSelectionControls TextSelectionControls()
  TextSelectionControlsMate() {}
}

/// class EmptyTextSelectionControls extends TextSelectionControls
class EmptyTextSelectionControlsMate {
  /// EmptyTextSelectionControls EmptyTextSelectionControls()
  EmptyTextSelectionControlsMate() {}
}

/// class TextSelectionOverlay
class TextSelectionOverlayMate {
  /// TextSelectionOverlay TextSelectionOverlay({required TextEditingValue value, required BuildContext context, Widget? debugRequiredFor, required LayerLink toolbarLayerLink, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required RenderEditable renderObject, TextSelectionControls? selectionControls, bool handlesVisible = false, required TextSelectionDelegate selectionDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, ClipboardStatusNotifier? clipboardStatus, Widget Function(BuildContext)? contextMenuBuilder, required TextMagnifierConfiguration magnifierConfiguration})
  TextSelectionOverlayMate({
// param: {required TextEditingValue value}
    required TextEditingValue value,
// param: {required BuildContext context}
    required BuildContext context,
// param: {Widget? debugRequiredFor}
    Widget? debugRequiredFor,
// param: {required LayerLink toolbarLayerLink}
    required LayerLink toolbarLayerLink,
// param: {required LayerLink startHandleLayerLink}
    required LayerLink startHandleLayerLink,
// param: {required LayerLink endHandleLayerLink}
    required LayerLink endHandleLayerLink,
// param: {required RenderEditable renderObject}
    required RenderEditable renderObject,
// param: {TextSelectionControls? selectionControls}
    TextSelectionControls? selectionControls,
// param: {bool handlesVisible = false}
    required bool handlesVisible,
// param: {required TextSelectionDelegate selectionDelegate}
    required TextSelectionDelegate selectionDelegate,
// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,
// param: {void Function()? onSelectionHandleTapped}
    void Function()? onSelectionHandleTapped,
// param: {ClipboardStatusNotifier? clipboardStatus}
    ClipboardStatusNotifier? clipboardStatus,
// param: {Widget Function(BuildContext)? contextMenuBuilder}
    Widget Function(
      BuildContext, [
      BuildContext,
    ])?
        contextMenuBuilder,
// param: {required TextMagnifierConfiguration magnifierConfiguration}
    required TextMagnifierConfiguration magnifierConfiguration,
  }) {}
}

/// class SelectionOverlay
class SelectionOverlayMate {
  /// SelectionOverlay SelectionOverlay({required BuildContext context, Widget? debugRequiredFor, required TextSelectionHandleType startHandleType, required double lineHeightAtStart, ValueListenable<bool>? startHandlesVisible, void Function(DragStartDetails)? onStartHandleDragStart, void Function(DragUpdateDetails)? onStartHandleDragUpdate, void Function(DragEndDetails)? onStartHandleDragEnd, required TextSelectionHandleType endHandleType, required double lineHeightAtEnd, ValueListenable<bool>? endHandlesVisible, void Function(DragStartDetails)? onEndHandleDragStart, void Function(DragUpdateDetails)? onEndHandleDragUpdate, void Function(DragEndDetails)? onEndHandleDragEnd, ValueListenable<bool>? toolbarVisible, required List<TextSelectionPoint> selectionEndpoints, required TextSelectionControls? selectionControls, required TextSelectionDelegate? selectionDelegate, required ClipboardStatusNotifier? clipboardStatus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required LayerLink toolbarLayerLink, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, Offset? toolbarLocation, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  SelectionOverlayMate({
// param: {required BuildContext context}
    required BuildContext context,
// param: {Widget? debugRequiredFor}
    Widget? debugRequiredFor,
// param: {required TextSelectionHandleType startHandleType}
    required TextSelectionHandleType startHandleType,
// param: {required double lineHeightAtStart}
    required double lineHeightAtStart,
// param: {ValueListenable<bool>? startHandlesVisible}
    ValueListenable<bool>? startHandlesVisible,
// param: {void Function(DragStartDetails)? onStartHandleDragStart}
    void Function(
      DragStartDetails, [
      DragStartDetails,
    ])?
        onStartHandleDragStart,
// param: {void Function(DragUpdateDetails)? onStartHandleDragUpdate}
    void Function(
      DragUpdateDetails, [
      DragUpdateDetails,
    ])?
        onStartHandleDragUpdate,
// param: {void Function(DragEndDetails)? onStartHandleDragEnd}
    void Function(
      DragEndDetails, [
      DragEndDetails,
    ])?
        onStartHandleDragEnd,
// param: {required TextSelectionHandleType endHandleType}
    required TextSelectionHandleType endHandleType,
// param: {required double lineHeightAtEnd}
    required double lineHeightAtEnd,
// param: {ValueListenable<bool>? endHandlesVisible}
    ValueListenable<bool>? endHandlesVisible,
// param: {void Function(DragStartDetails)? onEndHandleDragStart}
    void Function(
      DragStartDetails, [
      DragStartDetails,
    ])?
        onEndHandleDragStart,
// param: {void Function(DragUpdateDetails)? onEndHandleDragUpdate}
    void Function(
      DragUpdateDetails, [
      DragUpdateDetails,
    ])?
        onEndHandleDragUpdate,
// param: {void Function(DragEndDetails)? onEndHandleDragEnd}
    void Function(
      DragEndDetails, [
      DragEndDetails,
    ])?
        onEndHandleDragEnd,
// param: {ValueListenable<bool>? toolbarVisible}
    ValueListenable<bool>? toolbarVisible,
// param: {required List<TextSelectionPoint> selectionEndpoints}
    required List<TextSelectionPoint> selectionEndpoints,
// param: {required TextSelectionControls? selectionControls}
    required TextSelectionControls? selectionControls,
// param: {required TextSelectionDelegate? selectionDelegate}
    required TextSelectionDelegate? selectionDelegate,
// param: {required ClipboardStatusNotifier? clipboardStatus}
    required ClipboardStatusNotifier? clipboardStatus,
// param: {required LayerLink startHandleLayerLink}
    required LayerLink startHandleLayerLink,
// param: {required LayerLink endHandleLayerLink}
    required LayerLink endHandleLayerLink,
// param: {required LayerLink toolbarLayerLink}
    required LayerLink toolbarLayerLink,
// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,
// param: {void Function()? onSelectionHandleTapped}
    void Function()? onSelectionHandleTapped,
// param: {Offset? toolbarLocation}
    Offset? toolbarLocation,
// param: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled}
    required TextMagnifierConfiguration magnifierConfiguration,
  }) {}
}

/// abstract class TextSelectionGestureDetectorBuilderDelegate
abstract class TextSelectionGestureDetectorBuilderDelegateMate {
  /// TextSelectionGestureDetectorBuilderDelegate TextSelectionGestureDetectorBuilderDelegate()
  TextSelectionGestureDetectorBuilderDelegateMate() {}
}

/// class TextSelectionGestureDetectorBuilder
class TextSelectionGestureDetectorBuilderMate {
  /// TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilder({required TextSelectionGestureDetectorBuilderDelegate delegate})
  TextSelectionGestureDetectorBuilderMate(
      {
// param: {required TextSelectionGestureDetectorBuilderDelegate delegate}
      required TextSelectionGestureDetectorBuilderDelegate delegate}) {}
}

/// class TextSelectionGestureDetector extends StatefulWidget
class TextSelectionGestureDetectorMate {
  /// TextSelectionGestureDetector TextSelectionGestureDetector({Key? key, void Function(TapDragDownDetails)? onTapDown, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressEnd, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapDragUpDetails)? onSingleTapUp, void Function()? onSingleTapCancel, void Function(LongPressStartDetails)? onSingleLongTapStart, void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate, void Function(LongPressEndDetails)? onSingleLongTapEnd, void Function(TapDragDownDetails)? onDoubleTapDown, void Function(TapDragStartDetails)? onDragSelectionStart, void Function(TapDragUpdateDetails)? onDragSelectionUpdate, void Function(TapDragEndDetails)? onDragSelectionEnd, HitTestBehavior? behavior, required Widget child})
  TextSelectionGestureDetectorMate({
// param: {Key? key}
    Key? key,
// param: {void Function(TapDragDownDetails)? onTapDown}
    void Function(
      TapDragDownDetails, [
      TapDragDownDetails,
    ])?
        onTapDown,
// param: {void Function(ForcePressDetails)? onForcePressStart}
    void Function(
      ForcePressDetails, [
      ForcePressDetails,
    ])?
        onForcePressStart,
// param: {void Function(ForcePressDetails)? onForcePressEnd}
    void Function(
      ForcePressDetails, [
      ForcePressDetails,
    ])?
        onForcePressEnd,
// param: {void Function()? onSecondaryTap}
    void Function()? onSecondaryTap,
// param: {void Function(TapDownDetails)? onSecondaryTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onSecondaryTapDown,
// param: {void Function(TapDragUpDetails)? onSingleTapUp}
    void Function(
      TapDragUpDetails, [
      TapDragUpDetails,
    ])?
        onSingleTapUp,
// param: {void Function()? onSingleTapCancel}
    void Function()? onSingleTapCancel,
// param: {void Function(LongPressStartDetails)? onSingleLongTapStart}
    void Function(
      LongPressStartDetails, [
      LongPressStartDetails,
    ])?
        onSingleLongTapStart,
// param: {void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate}
    void Function(
      LongPressMoveUpdateDetails, [
      LongPressMoveUpdateDetails,
    ])?
        onSingleLongTapMoveUpdate,
// param: {void Function(LongPressEndDetails)? onSingleLongTapEnd}
    void Function(
      LongPressEndDetails, [
      LongPressEndDetails,
    ])?
        onSingleLongTapEnd,
// param: {void Function(TapDragDownDetails)? onDoubleTapDown}
    void Function(
      TapDragDownDetails, [
      TapDragDownDetails,
    ])?
        onDoubleTapDown,
// param: {void Function(TapDragStartDetails)? onDragSelectionStart}
    void Function(
      TapDragStartDetails, [
      TapDragStartDetails,
    ])?
        onDragSelectionStart,
// param: {void Function(TapDragUpdateDetails)? onDragSelectionUpdate}
    void Function(
      TapDragUpdateDetails, [
      TapDragUpdateDetails,
    ])?
        onDragSelectionUpdate,
// param: {void Function(TapDragEndDetails)? onDragSelectionEnd}
    void Function(
      TapDragEndDetails, [
      TapDragEndDetails,
    ])?
        onDragSelectionEnd,
// param: {HitTestBehavior? behavior}
    HitTestBehavior? behavior,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver
class ClipboardStatusNotifierMate {
  /// ClipboardStatusNotifier ClipboardStatusNotifier({ClipboardStatus value = ClipboardStatus.unknown})
  ClipboardStatusNotifierMate(
      {
// param: {ClipboardStatus value = ClipboardStatus.unknown}
      required ClipboardStatus value}) {}
}
