// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.669868

library;

import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/animation/curves.dart';
import 'dart:core';
import 'package:flutter/src/widgets/implicit_animations.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_painter.dart';

/// class BoxConstraintsTween extends Tween<BoxConstraints>
class BoxConstraintsTweenMate {
  /// BoxConstraintsTween BoxConstraintsTween({BoxConstraints? begin, BoxConstraints? end})
  BoxConstraintsTweenMate({
// param: {BoxConstraints? begin}
    BoxConstraints? begin,
// param: {BoxConstraints? end}
    BoxConstraints? end,
  }) {}
}

/// class DecorationTween extends Tween<Decoration>
class DecorationTweenMate {
  /// DecorationTween DecorationTween({Decoration? begin, Decoration? end})
  DecorationTweenMate({
// param: {Decoration? begin}
    Decoration? begin,
// param: {Decoration? end}
    Decoration? end,
  }) {}
}

/// class EdgeInsetsTween extends Tween<EdgeInsets>
class EdgeInsetsTweenMate {
  /// EdgeInsetsTween EdgeInsetsTween({EdgeInsets? begin, EdgeInsets? end})
  EdgeInsetsTweenMate({
// param: {EdgeInsets? begin}
    EdgeInsets? begin,
// param: {EdgeInsets? end}
    EdgeInsets? end,
  }) {}
}

/// class EdgeInsetsGeometryTween extends Tween<EdgeInsetsGeometry>
class EdgeInsetsGeometryTweenMate {
  /// EdgeInsetsGeometryTween EdgeInsetsGeometryTween({EdgeInsetsGeometry? begin, EdgeInsetsGeometry? end})
  EdgeInsetsGeometryTweenMate({
// param: {EdgeInsetsGeometry? begin}
    EdgeInsetsGeometry? begin,
// param: {EdgeInsetsGeometry? end}
    EdgeInsetsGeometry? end,
  }) {}
}

/// class BorderRadiusTween extends Tween<BorderRadius?>
class BorderRadiusTweenMate {
  /// BorderRadiusTween BorderRadiusTween({BorderRadius? begin, BorderRadius? end})
  BorderRadiusTweenMate({
// param: {BorderRadius? begin}
    BorderRadius? begin,
// param: {BorderRadius? end}
    BorderRadius? end,
  }) {}
}

/// class BorderTween extends Tween<Border?>
class BorderTweenMate {
  /// BorderTween BorderTween({Border? begin, Border? end})
  BorderTweenMate({
// param: {Border? begin}
    Border? begin,
// param: {Border? end}
    Border? end,
  }) {}
}

/// class Matrix4Tween extends Tween<Matrix4>
class Matrix4TweenMate {
  /// Matrix4Tween Matrix4Tween({Matrix4? begin, Matrix4? end})
  Matrix4TweenMate({
// param: {Matrix4? begin}
    Matrix4? begin,
// param: {Matrix4? end}
    Matrix4? end,
  }) {}
}

/// class TextStyleTween extends Tween<TextStyle>
class TextStyleTweenMate {
  /// TextStyleTween TextStyleTween({TextStyle? begin, TextStyle? end})
  TextStyleTweenMate({
// param: {TextStyle? begin}
    TextStyle? begin,
// param: {TextStyle? end}
    TextStyle? end,
  }) {}
}

/// abstract class ImplicitlyAnimatedWidget extends StatefulWidget
abstract class ImplicitlyAnimatedWidgetMate {
  /// ImplicitlyAnimatedWidget ImplicitlyAnimatedWidget({Key? key, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  ImplicitlyAnimatedWidgetMate({
// param: {Key? key}
    Key? key,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// abstract class ImplicitlyAnimatedWidgetState<T extends ImplicitlyAnimatedWidget> extends State<T> with SingleTickerProviderStateMixin<T>
abstract class ImplicitlyAnimatedWidgetStateMate<T extends ImplicitlyAnimatedWidget> {
  /// ImplicitlyAnimatedWidgetState<T> ImplicitlyAnimatedWidgetState()
  ImplicitlyAnimatedWidgetStateMate() {}
}

/// abstract class AnimatedWidgetBaseState<T extends ImplicitlyAnimatedWidget> extends ImplicitlyAnimatedWidgetState<T>
abstract class AnimatedWidgetBaseStateMate<T extends ImplicitlyAnimatedWidget> {
  /// AnimatedWidgetBaseState<T> AnimatedWidgetBaseState()
  AnimatedWidgetBaseStateMate() {}
}

/// class AnimatedContainer extends ImplicitlyAnimatedWidget
class AnimatedContainerMate {
  /// AnimatedContainer AnimatedContainer({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior = Clip.none, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedContainerMate({
// param: {Key? key}
    Key? key,
// param: {AlignmentGeometry? alignment}
    AlignmentGeometry? alignment,
// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,
// param: {Color? color}
    Color? color,
// param: {Decoration? decoration}
    Decoration? decoration,
// param: {Decoration? foregroundDecoration}
    Decoration? foregroundDecoration,
// param: {double? width}
    double? width,
// param: {double? height}
    double? height,
// param: {BoxConstraints? constraints}
    BoxConstraints? constraints,
// param: {EdgeInsetsGeometry? margin}
    EdgeInsetsGeometry? margin,
// param: {Matrix4? transform}
    Matrix4? transform,
// param: {AlignmentGeometry? transformAlignment}
    AlignmentGeometry? transformAlignment,
// param: {Widget? child}
    Widget? child,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedPadding extends ImplicitlyAnimatedWidget
class AnimatedPaddingMate {
  /// AnimatedPadding AnimatedPadding({Key? key, required EdgeInsetsGeometry padding, Widget? child, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPaddingMate({
// param: {Key? key}
    Key? key,
// param: {required EdgeInsetsGeometry padding}
    required EdgeInsetsGeometry padding,
// param: {Widget? child}
    Widget? child,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedAlign extends ImplicitlyAnimatedWidget
class AnimatedAlignMate {
  /// AnimatedAlign AnimatedAlign({Key? key, required AlignmentGeometry alignment, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedAlignMate({
// param: {Key? key}
    Key? key,
// param: {required AlignmentGeometry alignment}
    required AlignmentGeometry alignment,
// param: {Widget? child}
    Widget? child,
// param: {double? heightFactor}
    double? heightFactor,
// param: {double? widthFactor}
    double? widthFactor,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedPositioned extends ImplicitlyAnimatedWidget
class AnimatedPositionedMate {
  /// AnimatedPositioned AnimatedPositioned({Key? key, required Widget child, double? left, double? top, double? right, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositionedMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {double? left}
    double? left,
// param: {double? top}
    double? top,
// param: {double? right}
    double? right,
// param: {double? bottom}
    double? bottom,
// param: {double? width}
    double? width,
// param: {double? height}
    double? height,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}

  /// AnimatedPositioned AnimatedPositioned.fromRect({Key? key, required Widget child, required Rect rect, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositionedMate.fromRect({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {required Rect rect}
    required Rect rect,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedPositionedDirectional extends ImplicitlyAnimatedWidget
class AnimatedPositionedDirectionalMate {
  /// AnimatedPositionedDirectional AnimatedPositionedDirectional({Key? key, required Widget child, double? start, double? top, double? end, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositionedDirectionalMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {double? start}
    double? start,
// param: {double? top}
    double? top,
// param: {double? end}
    double? end,
// param: {double? bottom}
    double? bottom,
// param: {double? width}
    double? width,
// param: {double? height}
    double? height,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedScale extends ImplicitlyAnimatedWidget
class AnimatedScaleMate {
  /// AnimatedScale AnimatedScale({Key? key, Widget? child, required double scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedScaleMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {required double scale}
    required double scale,
// param: {Alignment alignment = Alignment.center}
    required Alignment alignment,
// param: {FilterQuality? filterQuality}
    FilterQuality? filterQuality,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedRotation extends ImplicitlyAnimatedWidget
class AnimatedRotationMate {
  /// AnimatedRotation AnimatedRotation({Key? key, Widget? child, required double turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedRotationMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {required double turns}
    required double turns,
// param: {Alignment alignment = Alignment.center}
    required Alignment alignment,
// param: {FilterQuality? filterQuality}
    FilterQuality? filterQuality,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedSlide extends ImplicitlyAnimatedWidget
class AnimatedSlideMate {
  /// AnimatedSlide AnimatedSlide({Key? key, Widget? child, required Offset offset, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedSlideMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {required Offset offset}
    required Offset offset,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedOpacity extends ImplicitlyAnimatedWidget
class AnimatedOpacityMate {
  /// AnimatedOpacity AnimatedOpacity({Key? key, Widget? child, required double opacity, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd, bool alwaysIncludeSemantics = false})
  AnimatedOpacityMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {required double opacity}
    required double opacity,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
// param: {bool alwaysIncludeSemantics = false}
    required bool alwaysIncludeSemantics,
  }) {}
}

/// class SliverAnimatedOpacity extends ImplicitlyAnimatedWidget
class SliverAnimatedOpacityMate {
  /// SliverAnimatedOpacity SliverAnimatedOpacity({Key? key, Widget? sliver, required double opacity, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd, bool alwaysIncludeSemantics = false})
  SliverAnimatedOpacityMate({
// param: {Key? key}
    Key? key,
// param: {Widget? sliver}
    Widget? sliver,
// param: {required double opacity}
    required double opacity,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
// param: {bool alwaysIncludeSemantics = false}
    required bool alwaysIncludeSemantics,
  }) {}
}

/// class AnimatedDefaultTextStyle extends ImplicitlyAnimatedWidget
class AnimatedDefaultTextStyleMate {
  /// AnimatedDefaultTextStyle AnimatedDefaultTextStyle({Key? key, required Widget child, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedDefaultTextStyleMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {required TextStyle style}
    required TextStyle style,
// param: {TextAlign? textAlign}
    TextAlign? textAlign,
// param: {bool softWrap = true}
    required bool softWrap,
// param: {TextOverflow overflow = TextOverflow.clip}
    required TextOverflow overflow,
// param: {int? maxLines}
    int? maxLines,
// param: {TextWidthBasis textWidthBasis = TextWidthBasis.parent}
    required TextWidthBasis textWidthBasis,
// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedPhysicalModel extends ImplicitlyAnimatedWidget
class AnimatedPhysicalModelMate {
  /// AnimatedPhysicalModel AnimatedPhysicalModel({Key? key, required Widget child, required BoxShape shape, Clip clipBehavior = Clip.none, BorderRadius borderRadius = BorderRadius.zero, required double elevation, required Color color, bool animateColor = true, required Color shadowColor, bool animateShadowColor = true, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPhysicalModelMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
// param: {required BoxShape shape}
    required BoxShape shape,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {BorderRadius borderRadius = BorderRadius.zero}
    required BorderRadius borderRadius,
// param: {required double elevation}
    required double elevation,
// param: {required Color color}
    required Color color,
// param: {bool animateColor = true}
    required bool animateColor,
// param: {required Color shadowColor}
    required Color shadowColor,
// param: {bool animateShadowColor = true}
    required bool animateShadowColor,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}

/// class AnimatedFractionallySizedBox extends ImplicitlyAnimatedWidget
class AnimatedFractionallySizedBoxMate {
  /// AnimatedFractionallySizedBox AnimatedFractionallySizedBox({Key? key, AlignmentGeometry alignment = Alignment.center, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedFractionallySizedBoxMate({
// param: {Key? key}
    Key? key,
// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,
// param: {Widget? child}
    Widget? child,
// param: {double? heightFactor}
    double? heightFactor,
// param: {double? widthFactor}
    double? widthFactor,
// param: {Curve curve = Curves.linear}
    required Curve curve,
// param: {required Duration duration}
    required Duration duration,
// param: {void Function()? onEnd}
    void Function()? onEnd,
  }) {}
}
