// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.221475

import 'package:flutter/src/widgets/app.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/widget_inspector.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/router.dart';
export 'dart:ui' show Locale;

/// class WidgetsApp extends StatefulWidget
class WidgetsAppMate extends WidgetsApp {
  /// WidgetsApp WidgetsApp({Key? key, GlobalKey<NavigatorState>? navigatorKey, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, List<Route<dynamic>> Function(String)? onGenerateInitialRoutes, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[], String? initialRoute, PageRoute<T> Function<T>(RouteSettings, Widget Function(BuildContext))? pageRouteBuilder, Widget? home, Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}, Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, TextStyle? textStyle, required Color color, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowWidgetInspector = false, bool debugShowCheckedModeBanner = true, Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, bool useInheritedMediaQuery = false})
  WidgetsAppMate({
    /// param: {Key? key}
    Key? key,

    /// param: {GlobalKey<NavigatorState>? navigatorKey}
    GlobalKey<NavigatorState>? navigatorKey,

    /// param: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute}
    RouteFactory? onGenerateRoute,

    /// param: {List<Route<dynamic>> Function(String)? onGenerateInitialRoutes}
    InitialRouteListFactory? onGenerateInitialRoutes,

    /// param: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute}
    RouteFactory? onUnknownRoute,

    /// param: {List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[]}
    required List<NavigatorObserver> navigatorObservers,

    /// param: {String? initialRoute}
    String? initialRoute,

    /// param: {PageRoute<T> Function<T>(RouteSettings, Widget Function(BuildContext))? pageRouteBuilder}
    PageRouteFactory? pageRouteBuilder,

    /// param: {Widget? home}
    Widget? home,

    /// param: {Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}}
    required Map<String, WidgetBuilder> routes,

    /// param: {Widget Function(BuildContext, Widget?)? builder}
    TransitionBuilder? builder,

    /// param: {String title = ''}
    required String title,

    /// param: {String Function(BuildContext)? onGenerateTitle}
    GenerateAppTitle? onGenerateTitle,

    /// param: {TextStyle? textStyle}
    TextStyle? textStyle,

    /// param: {required Color color}
    required Color color,

    /// param: {Locale? locale}
    Locale? locale,

    /// param: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates}
    Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates,

    /// param: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback}
    LocaleListResolutionCallback? localeListResolutionCallback,

    /// param: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback}
    LocaleResolutionCallback? localeResolutionCallback,

    /// param: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]}
    required Iterable<Locale> supportedLocales,

    /// param: {bool showPerformanceOverlay = false}
    required bool showPerformanceOverlay,

    /// param: {bool checkerboardRasterCacheImages = false}
    required bool checkerboardRasterCacheImages,

    /// param: {bool checkerboardOffscreenLayers = false}
    required bool checkerboardOffscreenLayers,

    /// param: {bool showSemanticsDebugger = false}
    required bool showSemanticsDebugger,

    /// param: {bool debugShowWidgetInspector = false}
    required bool debugShowWidgetInspector,

    /// param: {bool debugShowCheckedModeBanner = true}
    required bool debugShowCheckedModeBanner,

    /// param: {Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder}
    InspectorSelectButtonBuilder? inspectorSelectButtonBuilder,

    /// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,

    /// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,

    /// param: {String? restorationScopeId}
    String? restorationScopeId,

    /// param: {bool useInheritedMediaQuery = false}
    required bool useInheritedMediaQuery,
  }) : super(
          key: key,
          navigatorKey: navigatorKey,
          onGenerateRoute: onGenerateRoute,
          onGenerateInitialRoutes: onGenerateInitialRoutes,
          onUnknownRoute: onUnknownRoute,
          navigatorObservers: navigatorObservers,
          initialRoute: initialRoute,
          pageRouteBuilder: pageRouteBuilder,
          home: home,
          routes: routes,
          builder: builder,
          title: title,
          onGenerateTitle: onGenerateTitle,
          textStyle: textStyle,
          color: color,
          locale: locale,
          localizationsDelegates: localizationsDelegates,
          localeListResolutionCallback: localeListResolutionCallback,
          localeResolutionCallback: localeResolutionCallback,
          supportedLocales: supportedLocales,
          showPerformanceOverlay: showPerformanceOverlay,
          checkerboardRasterCacheImages: checkerboardRasterCacheImages,
          checkerboardOffscreenLayers: checkerboardOffscreenLayers,
          showSemanticsDebugger: showSemanticsDebugger,
          debugShowWidgetInspector: debugShowWidgetInspector,
          debugShowCheckedModeBanner: debugShowCheckedModeBanner,
          inspectorSelectButtonBuilder: inspectorSelectButtonBuilder,
          shortcuts: shortcuts,
          actions: actions,
          restorationScopeId: restorationScopeId,
          useInheritedMediaQuery: useInheritedMediaQuery,
        ) {}

  /// WidgetsApp WidgetsApp.router({Key? key, RouteInformationProvider? routeInformationProvider, RouteInformationParser<Object>? routeInformationParser, RouterDelegate<Object>? routerDelegate, RouterConfig<Object>? routerConfig, BackButtonDispatcher? backButtonDispatcher, Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, TextStyle? textStyle, required Color color, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowWidgetInspector = false, bool debugShowCheckedModeBanner = true, Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, bool useInheritedMediaQuery = false})
  WidgetsAppMate.router({
    /// param: {Key? key}
    Key? key,

    /// param: {RouteInformationProvider? routeInformationProvider}
    RouteInformationProvider? routeInformationProvider,

    /// param: {RouteInformationParser<Object>? routeInformationParser}
    RouteInformationParser<Object>? routeInformationParser,

    /// param: {RouterDelegate<Object>? routerDelegate}
    RouterDelegate<Object>? routerDelegate,

    /// param: {RouterConfig<Object>? routerConfig}
    RouterConfig<Object>? routerConfig,

    /// param: {BackButtonDispatcher? backButtonDispatcher}
    BackButtonDispatcher? backButtonDispatcher,

    /// param: {Widget Function(BuildContext, Widget?)? builder}
    TransitionBuilder? builder,

    /// param: {String title = ''}
    required String title,

    /// param: {String Function(BuildContext)? onGenerateTitle}
    GenerateAppTitle? onGenerateTitle,

    /// param: {TextStyle? textStyle}
    TextStyle? textStyle,

    /// param: {required Color color}
    required Color color,

    /// param: {Locale? locale}
    Locale? locale,

    /// param: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates}
    Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates,

    /// param: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback}
    LocaleListResolutionCallback? localeListResolutionCallback,

    /// param: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback}
    LocaleResolutionCallback? localeResolutionCallback,

    /// param: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]}
    required Iterable<Locale> supportedLocales,

    /// param: {bool showPerformanceOverlay = false}
    required bool showPerformanceOverlay,

    /// param: {bool checkerboardRasterCacheImages = false}
    required bool checkerboardRasterCacheImages,

    /// param: {bool checkerboardOffscreenLayers = false}
    required bool checkerboardOffscreenLayers,

    /// param: {bool showSemanticsDebugger = false}
    required bool showSemanticsDebugger,

    /// param: {bool debugShowWidgetInspector = false}
    required bool debugShowWidgetInspector,

    /// param: {bool debugShowCheckedModeBanner = true}
    required bool debugShowCheckedModeBanner,

    /// param: {Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder}
    InspectorSelectButtonBuilder? inspectorSelectButtonBuilder,

    /// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,

    /// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,

    /// param: {String? restorationScopeId}
    String? restorationScopeId,

    /// param: {bool useInheritedMediaQuery = false}
    required bool useInheritedMediaQuery,
  }) : super.router(
          key: key,
          routeInformationProvider: routeInformationProvider,
          routeInformationParser: routeInformationParser,
          routerDelegate: routerDelegate,
          routerConfig: routerConfig,
          backButtonDispatcher: backButtonDispatcher,
          builder: builder,
          title: title,
          onGenerateTitle: onGenerateTitle,
          textStyle: textStyle,
          color: color,
          locale: locale,
          localizationsDelegates: localizationsDelegates,
          localeListResolutionCallback: localeListResolutionCallback,
          localeResolutionCallback: localeResolutionCallback,
          supportedLocales: supportedLocales,
          showPerformanceOverlay: showPerformanceOverlay,
          checkerboardRasterCacheImages: checkerboardRasterCacheImages,
          checkerboardOffscreenLayers: checkerboardOffscreenLayers,
          showSemanticsDebugger: showSemanticsDebugger,
          debugShowWidgetInspector: debugShowWidgetInspector,
          debugShowCheckedModeBanner: debugShowCheckedModeBanner,
          inspectorSelectButtonBuilder: inspectorSelectButtonBuilder,
          shortcuts: shortcuts,
          actions: actions,
          restorationScopeId: restorationScopeId,
          useInheritedMediaQuery: useInheritedMediaQuery,
        ) {}
}
