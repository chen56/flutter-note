// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.543907

import 'package:flutter/src/widgets/nested_scroll_view.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// class NestedScrollView extends StatefulWidget
class NestedScrollViewMate extends NestedScrollView {
  /// NestedScrollView NestedScrollView({Key? key, ScrollController? controller, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollPhysics? physics, required List<Widget> Function(BuildContext, bool) headerSliverBuilder, required Widget body, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool floatHeaderSlivers = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior})
  NestedScrollViewMate({
    /// param: {Key? key}
    Key? key,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {required List<Widget> Function(BuildContext, bool) headerSliverBuilder}
    required NestedScrollViewHeaderSliversBuilder headerSliverBuilder,

    /// param: {required Widget body}
    required Widget body,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {bool floatHeaderSlivers = false}
    required bool floatHeaderSlivers,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,
  }) : super(
          key: key,
          controller: controller,
          scrollDirection: scrollDirection,
          reverse: reverse,
          physics: physics,
          headerSliverBuilder: headerSliverBuilder,
          body: body,
          dragStartBehavior: dragStartBehavior,
          floatHeaderSlivers: floatHeaderSlivers,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
        ) {}
}

/// class SliverOverlapAbsorber extends SingleChildRenderObjectWidget
class SliverOverlapAbsorberMate extends SliverOverlapAbsorber {
  /// SliverOverlapAbsorber SliverOverlapAbsorber({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapAbsorberMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverOverlapAbsorberHandle handle}
    required SliverOverlapAbsorberHandle handle,

    /// param: {Widget? sliver}
    Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {}
}

/// class RenderSliverOverlapAbsorber extends RenderSliver with RenderObjectWithChildMixin<RenderSliver>
class RenderSliverOverlapAbsorberMate extends RenderSliverOverlapAbsorber {
  /// RenderSliverOverlapAbsorber RenderSliverOverlapAbsorber({required SliverOverlapAbsorberHandle handle, RenderSliver? sliver})
  RenderSliverOverlapAbsorberMate({
    /// param: {required SliverOverlapAbsorberHandle handle}
    required SliverOverlapAbsorberHandle handle,

    /// param: {RenderSliver? sliver}
    RenderSliver? sliver,
  }) : super(
          handle: handle,
          sliver: sliver,
        ) {}
}

/// class SliverOverlapInjector extends SingleChildRenderObjectWidget
class SliverOverlapInjectorMate extends SliverOverlapInjector {
  /// SliverOverlapInjector SliverOverlapInjector({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapInjectorMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverOverlapAbsorberHandle handle}
    required SliverOverlapAbsorberHandle handle,

    /// param: {Widget? sliver}
    Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {}
}

/// class RenderSliverOverlapInjector extends RenderSliver
class RenderSliverOverlapInjectorMate extends RenderSliverOverlapInjector {
  /// RenderSliverOverlapInjector RenderSliverOverlapInjector({required SliverOverlapAbsorberHandle handle})
  RenderSliverOverlapInjectorMate(
      {
      /// param: {required SliverOverlapAbsorberHandle handle}
      required SliverOverlapAbsorberHandle handle})
      : super(handle: handle) {}
}

/// class NestedScrollViewViewport extends Viewport
class NestedScrollViewViewportMate extends NestedScrollViewViewport {
  /// NestedScrollViewViewport NestedScrollViewViewport({Key? key, AxisDirection axisDirection = AxisDirection.down, AxisDirection? crossAxisDirection, double anchor = 0.0, required ViewportOffset offset, Key? center, List<Widget> slivers = const <Widget>[], required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  NestedScrollViewViewportMate({
    /// param: {Key? key}
    Key? key,

    /// param: {AxisDirection axisDirection = AxisDirection.down}
    required AxisDirection axisDirection,

    /// param: {AxisDirection? crossAxisDirection}
    AxisDirection? crossAxisDirection,

    /// param: {double anchor = 0.0}
    required double anchor,

    /// param: {required ViewportOffset offset}
    required ViewportOffset offset,

    /// param: {Key? center}
    Key? center,

    /// param: {List<Widget> slivers = const <Widget>[]}
    required List<Widget> slivers,

    /// param: {required SliverOverlapAbsorberHandle handle}
    required SliverOverlapAbsorberHandle handle,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          anchor: anchor,
          offset: offset,
          center: center,
          slivers: slivers,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {}
}

/// class RenderNestedScrollViewViewport extends RenderViewport
class RenderNestedScrollViewViewportMate extends RenderNestedScrollViewViewport {
  /// RenderNestedScrollViewViewport RenderNestedScrollViewViewport({AxisDirection axisDirection = AxisDirection.down, required AxisDirection crossAxisDirection, required ViewportOffset offset, double anchor = 0.0, List<RenderSliver>? children, RenderSliver? center, required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  RenderNestedScrollViewViewportMate({
    /// param: {AxisDirection axisDirection = AxisDirection.down}
    required AxisDirection axisDirection,

    /// param: {required AxisDirection crossAxisDirection}
    required AxisDirection crossAxisDirection,

    /// param: {required ViewportOffset offset}
    required ViewportOffset offset,

    /// param: {double anchor = 0.0}
    required double anchor,

    /// param: {List<RenderSliver>? children}
    List<RenderSliver>? children,

    /// param: {RenderSliver? center}
    RenderSliver? center,

    /// param: {required SliverOverlapAbsorberHandle handle}
    required SliverOverlapAbsorberHandle handle,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          anchor: anchor,
          children: children,
          center: center,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {}
}
