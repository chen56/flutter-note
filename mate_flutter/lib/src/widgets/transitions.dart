// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:02.008857

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/stack.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/text_painter.dart';
export 'package:flutter/rendering.dart' show RelativeRect;

/// abstract class AnimatedWidget extends StatefulWidget
abstract class AnimatedWidgetMate {
  /// AnimatedWidget AnimatedWidget({Key? key, required Listenable listenable})
  AnimatedWidgetMate({
// param: {Key? key}
    Key? key,
// param: {required Listenable listenable}
    required Listenable listenable,
  }) {}
}

/// class SlideTransition extends AnimatedWidget
class SlideTransitionMate {
  /// SlideTransition SlideTransition({Key? key, required Animation<Offset> position, bool transformHitTests = true, TextDirection? textDirection, Widget? child})
  SlideTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<Offset> position}
    required Animation<Offset> position,
// param: {bool transformHitTests = true}
    required bool transformHitTests,
// param: {TextDirection? textDirection}
    TextDirection? textDirection,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class ScaleTransition extends AnimatedWidget
class ScaleTransitionMate {
  /// ScaleTransition ScaleTransition({Key? key, required Animation<double> scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  ScaleTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<double> scale}
    required Animation<double> scale,
// param: {Alignment alignment = Alignment.center}
    required Alignment alignment,
// param: {FilterQuality? filterQuality}
    FilterQuality? filterQuality,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class RotationTransition extends AnimatedWidget
class RotationTransitionMate {
  /// RotationTransition RotationTransition({Key? key, required Animation<double> turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  RotationTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<double> turns}
    required Animation<double> turns,
// param: {Alignment alignment = Alignment.center}
    required Alignment alignment,
// param: {FilterQuality? filterQuality}
    FilterQuality? filterQuality,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class SizeTransition extends AnimatedWidget
class SizeTransitionMate {
  /// SizeTransition SizeTransition({Key? key, Axis axis = Axis.vertical, required Animation<double> sizeFactor, double axisAlignment = 0.0, Widget? child})
  SizeTransitionMate({
// param: {Key? key}
    Key? key,
// param: {Axis axis = Axis.vertical}
    required Axis axis,
// param: {required Animation<double> sizeFactor}
    required Animation<double> sizeFactor,
// param: {double axisAlignment = 0.0}
    required double axisAlignment,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class FadeTransition extends SingleChildRenderObjectWidget
class FadeTransitionMate {
  /// FadeTransition FadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? child})
  FadeTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<double> opacity}
    required Animation<double> opacity,
// param: {bool alwaysIncludeSemantics = false}
    required bool alwaysIncludeSemantics,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class SliverFadeTransition extends SingleChildRenderObjectWidget
class SliverFadeTransitionMate {
  /// SliverFadeTransition SliverFadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverFadeTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<double> opacity}
    required Animation<double> opacity,
// param: {bool alwaysIncludeSemantics = false}
    required bool alwaysIncludeSemantics,
// param: {Widget? sliver}
    Widget? sliver,
  }) {}
}

/// class RelativeRectTween extends Tween<RelativeRect>
class RelativeRectTweenMate {
  /// RelativeRectTween RelativeRectTween({RelativeRect? begin, RelativeRect? end})
  RelativeRectTweenMate({
// param: {RelativeRect? begin}
    RelativeRect? begin,
// param: {RelativeRect? end}
    RelativeRect? end,
  }) {}
}

/// class PositionedTransition extends AnimatedWidget
class PositionedTransitionMate {
  /// PositionedTransition PositionedTransition({Key? key, required Animation<RelativeRect> rect, required Widget child})
  PositionedTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<RelativeRect> rect}
    required Animation<RelativeRect> rect,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class RelativePositionedTransition extends AnimatedWidget
class RelativePositionedTransitionMate {
  /// RelativePositionedTransition RelativePositionedTransition({Key? key, required Animation<Rect?> rect, required Size size, required Widget child})
  RelativePositionedTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<Rect?> rect}
    required Animation<Rect?> rect,
// param: {required Size size}
    required Size size,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class DecoratedBoxTransition extends AnimatedWidget
class DecoratedBoxTransitionMate {
  /// DecoratedBoxTransition DecoratedBoxTransition({Key? key, required Animation<Decoration> decoration, DecorationPosition position = DecorationPosition.background, required Widget child})
  DecoratedBoxTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<Decoration> decoration}
    required Animation<Decoration> decoration,
// param: {DecorationPosition position = DecorationPosition.background}
    required DecorationPosition position,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class AlignTransition extends AnimatedWidget
class AlignTransitionMate {
  /// AlignTransition AlignTransition({Key? key, required Animation<AlignmentGeometry> alignment, required Widget child, double? widthFactor, double? heightFactor})
  AlignTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<AlignmentGeometry> alignment}
    required Animation<AlignmentGeometry> alignment,
// param: {required Widget child}
    required Widget child,
// param: {double? widthFactor}
    double? widthFactor,
// param: {double? heightFactor}
    double? heightFactor,
  }) {}
}

/// class DefaultTextStyleTransition extends AnimatedWidget
class DefaultTextStyleTransitionMate {
  /// DefaultTextStyleTransition DefaultTextStyleTransition({Key? key, required Animation<TextStyle> style, required Widget child, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines})
  DefaultTextStyleTransitionMate({
// param: {Key? key}
    Key? key,
// param: {required Animation<TextStyle> style}
    required Animation<TextStyle> style,
// param: {required Widget child}
    required Widget child,
// param: {TextAlign? textAlign}
    TextAlign? textAlign,
// param: {bool softWrap = true}
    required bool softWrap,
// param: {TextOverflow overflow = TextOverflow.clip}
    required TextOverflow overflow,
// param: {int? maxLines}
    int? maxLines,
  }) {}
}

/// class ListenableBuilder extends AnimatedWidget
class ListenableBuilderMate {
  /// ListenableBuilder ListenableBuilder({Key? key, required Listenable listenable, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  ListenableBuilderMate({
// param: {Key? key}
    Key? key,
// param: {required Listenable listenable}
    required Listenable listenable,
// param: {required Widget Function(BuildContext, Widget?) builder}
    required Widget Function(
      BuildContext,
      Widget?, [
      BuildContext,
      Widget?,
    ])
        builder,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class AnimatedBuilder extends ListenableBuilder
class AnimatedBuilderMate {
  /// AnimatedBuilder AnimatedBuilder({Key? key, required Listenable animation, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  AnimatedBuilderMate({
// param: {Key? key}
    Key? key,
// param: {required Listenable animation}
    required Listenable animation,
// param: {required Widget Function(BuildContext, Widget?) builder}
    required Widget Function(
      BuildContext,
      Widget?, [
      BuildContext,
      Widget?,
    ])
        builder,
// param: {Widget? child}
    Widget? child,
  }) {}
}
