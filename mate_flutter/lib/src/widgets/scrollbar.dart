// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.717618

import 'package:flutter/src/widgets/scrollbar.dart';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';

/// class ScrollbarPainter extends ChangeNotifier implements CustomPainter
class ScrollbarPainterMate extends ScrollbarPainter {
  /// ScrollbarPainter ScrollbarPainter({required Color color, required Animation<double> fadeoutOpacityAnimation, Color trackColor = const Color(0x00000000), Color trackBorderColor = const Color(0x00000000), TextDirection? textDirection, double thickness = _kScrollbarThickness, EdgeInsets padding = EdgeInsets.zero, double mainAxisMargin = 0.0, double crossAxisMargin = 0.0, Radius? radius, Radius? trackRadius, OutlinedBorder? shape, double minLength = _kMinThumbExtent, double? minOverscrollLength, ScrollbarOrientation? scrollbarOrientation, bool ignorePointer = false})
  ScrollbarPainterMate({
    /// param: {required Color color}
    required Color color,

    /// param: {required Animation<double> fadeoutOpacityAnimation}
    required Animation<double> fadeoutOpacityAnimation,

    /// param: {Color trackColor = const Color(0x00000000)}
    required Color trackColor,

    /// param: {Color trackBorderColor = const Color(0x00000000)}
    required Color trackBorderColor,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {double thickness = _kScrollbarThickness}
    required double thickness,

    /// param: {EdgeInsets padding = EdgeInsets.zero}
    required EdgeInsets padding,

    /// param: {double mainAxisMargin = 0.0}
    required double mainAxisMargin,

    /// param: {double crossAxisMargin = 0.0}
    required double crossAxisMargin,

    /// param: {Radius? radius}
    Radius? radius,

    /// param: {Radius? trackRadius}
    Radius? trackRadius,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {double minLength = _kMinThumbExtent}
    required double minLength,

    /// param: {double? minOverscrollLength}
    double? minOverscrollLength,

    /// param: {ScrollbarOrientation? scrollbarOrientation}
    ScrollbarOrientation? scrollbarOrientation,

    /// param: {bool ignorePointer = false}
    required bool ignorePointer,
  }) : super(
          color: color,
          fadeoutOpacityAnimation: fadeoutOpacityAnimation,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          textDirection: textDirection,
          thickness: thickness,
          padding: padding,
          mainAxisMargin: mainAxisMargin,
          crossAxisMargin: crossAxisMargin,
          radius: radius,
          trackRadius: trackRadius,
          shape: shape,
          minLength: minLength,
          minOverscrollLength: minOverscrollLength,
          scrollbarOrientation: scrollbarOrientation,
          ignorePointer: ignorePointer,
        ) {}
}

/// class RawScrollbar extends StatefulWidget
class RawScrollbarMate extends RawScrollbar {
  /// RawScrollbar RawScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, OutlinedBorder? shape, Radius? radius, double? thickness, Color? thumbColor, double minThumbLength = _kMinThumbExtent, double? minOverscrollLength, bool? trackVisibility, Radius? trackRadius, Color? trackColor, Color? trackBorderColor, Duration fadeDuration = _kScrollbarFadeDuration, Duration timeToFade = _kScrollbarTimeToFade, Duration pressDuration = Duration.zero, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, bool? interactive, ScrollbarOrientation? scrollbarOrientation, double mainAxisMargin = 0.0, double crossAxisMargin = 0.0, EdgeInsets? padding, bool? isAlwaysShown})
  RawScrollbarMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? thumbVisibility}
    bool? thumbVisibility,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {Radius? radius}
    Radius? radius,

    /// param: {double? thickness}
    double? thickness,

    /// param: {Color? thumbColor}
    Color? thumbColor,

    /// param: {double minThumbLength = _kMinThumbExtent}
    required double minThumbLength,

    /// param: {double? minOverscrollLength}
    double? minOverscrollLength,

    /// param: {bool? trackVisibility}
    bool? trackVisibility,

    /// param: {Radius? trackRadius}
    Radius? trackRadius,

    /// param: {Color? trackColor}
    Color? trackColor,

    /// param: {Color? trackBorderColor}
    Color? trackBorderColor,

    /// param: {Duration fadeDuration = _kScrollbarFadeDuration}
    required Duration fadeDuration,

    /// param: {Duration timeToFade = _kScrollbarTimeToFade}
    required Duration timeToFade,

    /// param: {Duration pressDuration = Duration.zero}
    required Duration pressDuration,

    /// param: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate}
    required ScrollNotificationPredicate notificationPredicate,

    /// param: {bool? interactive}
    bool? interactive,

    /// param: {ScrollbarOrientation? scrollbarOrientation}
    ScrollbarOrientation? scrollbarOrientation,

    /// param: {double mainAxisMargin = 0.0}
    required double mainAxisMargin,

    /// param: {double crossAxisMargin = 0.0}
    required double crossAxisMargin,

    /// param: {EdgeInsets? padding}
    EdgeInsets? padding,

    /// param: {bool? isAlwaysShown}
    bool? isAlwaysShown,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          shape: shape,
          radius: radius,
          thickness: thickness,
          thumbColor: thumbColor,
          minThumbLength: minThumbLength,
          minOverscrollLength: minOverscrollLength,
          trackVisibility: trackVisibility,
          trackRadius: trackRadius,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          fadeDuration: fadeDuration,
          timeToFade: timeToFade,
          pressDuration: pressDuration,
          notificationPredicate: notificationPredicate,
          interactive: interactive,
          scrollbarOrientation: scrollbarOrientation,
          mainAxisMargin: mainAxisMargin,
          crossAxisMargin: crossAxisMargin,
          padding: padding,
          isAlwaysShown: isAlwaysShown,
        ) {}
}
