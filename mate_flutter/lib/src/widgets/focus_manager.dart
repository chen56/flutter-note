// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.590040

library;

import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/services/raw_keyboard.dart';
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// class FocusAttachment
class FocusAttachmentMate {}

/// class FocusNode with DiagnosticableTreeMixin, ChangeNotifier
class FocusNodeMate {
  /// FocusNode FocusNode({String? debugLabel, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, bool skipTraversal = false, bool canRequestFocus = true, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true})
  FocusNodeMate({
// param: {String? debugLabel}
    String? debugLabel,
// param: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey}
    KeyEventResult Function(
      FocusNode,
      RawKeyEvent, [
      FocusNode,
      RawKeyEvent,
    ])?
        onKey,
// param: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent}
    KeyEventResult Function(
      FocusNode,
      KeyEvent, [
      FocusNode,
      KeyEvent,
    ])?
        onKeyEvent,
// param: {bool skipTraversal = false}
    required bool skipTraversal,
// param: {bool canRequestFocus = true}
    required bool canRequestFocus,
// param: {bool descendantsAreFocusable = true}
    required bool descendantsAreFocusable,
// param: {bool descendantsAreTraversable = true}
    required bool descendantsAreTraversable,
  }) {}
}

/// class FocusScopeNode extends FocusNode
class FocusScopeNodeMate {
  /// FocusScopeNode FocusScopeNode({String? debugLabel, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool skipTraversal = false, bool canRequestFocus = true, TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop})
  FocusScopeNodeMate({
// param: {String? debugLabel}
    String? debugLabel,
// param: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent}
    KeyEventResult Function(
      FocusNode,
      KeyEvent, [
      FocusNode,
      KeyEvent,
    ])?
        onKeyEvent,
// param: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey}
    KeyEventResult Function(
      FocusNode,
      RawKeyEvent, [
      FocusNode,
      RawKeyEvent,
    ])?
        onKey,
// param: {bool skipTraversal = false}
    required bool skipTraversal,
// param: {bool canRequestFocus = true}
    required bool canRequestFocus,
// param: {TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop}
    required TraversalEdgeBehavior traversalEdgeBehavior,
  }) {}
}

/// class FocusManager with DiagnosticableTreeMixin, ChangeNotifier
class FocusManagerMate {
  /// FocusManager FocusManager()
  FocusManagerMate() {}
}
