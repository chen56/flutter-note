// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.297017

library;

import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// abstract class Intent with Diagnosticable
abstract class IntentMate {
  /// Intent Intent()
  IntentMate() {}
}

/// abstract class Action<T extends Intent> with Diagnosticable
abstract class ActionMate<T extends Intent> {
  /// Action<T> Action()
  ActionMate() {}
}

/// class ActionListener extends StatefulWidget
class ActionListenerMate {
  /// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
  ActionListenerMate({
// param: {Key? key}
    Key? key,
// param: {required void Function(Action<Intent>) listener}
    required void Function(
      Action<Intent>, [
      Action<Intent>,
    ])
        listener,
// param: {required Action<Intent> action}
    required Action<Intent> action,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// abstract class ContextAction<T extends Intent> extends Action<T>
abstract class ContextActionMate<T extends Intent> {
  /// ContextAction<T> ContextAction()
  ContextActionMate() {}
}

/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackActionMate<T extends Intent> {
  /// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
  CallbackActionMate(
      {
// param: {required Object? Function(T) onInvoke}
      required Object? Function(
        T, [
        T,
      ])
          onInvoke}) {}
}

/// class ActionDispatcher with Diagnosticable
class ActionDispatcherMate {
  /// ActionDispatcher ActionDispatcher()
  ActionDispatcherMate() {}
}

/// class Actions extends StatefulWidget
class ActionsMate {
  /// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
  ActionsMate({
// param: {Key? key}
    Key? key,
// param: {ActionDispatcher? dispatcher}
    ActionDispatcher? dispatcher,
// param: {required Map<Type, Action<Intent>> actions}
    required Map<Type, Action<Intent>> actions,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetectorMate {
  /// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
  FocusableActionDetectorMate({
// param: {Key? key}
    Key? key,
// param: {bool enabled = true}
    required bool enabled,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {bool descendantsAreFocusable = true}
    required bool descendantsAreFocusable,
// param: {bool descendantsAreTraversable = true}
    required bool descendantsAreTraversable,
// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,
// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,
// param: {void Function(bool)? onShowFocusHighlight}
    void Function(
      bool, [
      bool,
    ])?
        onShowFocusHighlight,
// param: {void Function(bool)? onShowHoverHighlight}
    void Function(
      bool, [
      bool,
    ])?
        onShowHoverHighlight,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {MouseCursor mouseCursor = MouseCursor.defer}
    required MouseCursor mouseCursor,
// param: {bool includeFocusSemantics = true}
    required bool includeFocusSemantics,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class VoidCallbackIntent extends Intent
class VoidCallbackIntentMate {
  /// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
  VoidCallbackIntentMate(
// param: void Function() callback
      void Function() callback) {}
}

/// class VoidCallbackAction extends Action<VoidCallbackIntent>
class VoidCallbackActionMate {
  /// VoidCallbackAction VoidCallbackAction()
  VoidCallbackActionMate() {}
}

/// class DoNothingIntent extends Intent
class DoNothingIntentMate {}

/// class DoNothingAndStopPropagationIntent extends Intent
class DoNothingAndStopPropagationIntentMate {}

/// class DoNothingAction extends Action<Intent>
class DoNothingActionMate {
  /// DoNothingAction DoNothingAction({bool consumesKey = true})
  DoNothingActionMate(
      {
// param: {bool consumesKey = true}
      required bool consumesKey}) {}
}

/// class ActivateIntent extends Intent
class ActivateIntentMate {
  /// ActivateIntent ActivateIntent()
  ActivateIntentMate() {}
}

/// class ButtonActivateIntent extends Intent
class ButtonActivateIntentMate {
  /// ButtonActivateIntent ButtonActivateIntent()
  ButtonActivateIntentMate() {}
}

/// abstract class ActivateAction extends Action<ActivateIntent>
abstract class ActivateActionMate {
  /// ActivateAction ActivateAction()
  ActivateActionMate() {}
}

/// class SelectIntent extends Intent
class SelectIntentMate {
  /// SelectIntent SelectIntent()
  SelectIntentMate() {}
}

/// abstract class SelectAction extends Action<SelectIntent>
abstract class SelectActionMate {
  /// SelectAction SelectAction()
  SelectActionMate() {}
}

/// class DismissIntent extends Intent
class DismissIntentMate {
  /// DismissIntent DismissIntent()
  DismissIntentMate() {}
}

/// abstract class DismissAction extends Action<DismissIntent>
abstract class DismissActionMate {
  /// DismissAction DismissAction()
  DismissActionMate() {}
}

/// class PrioritizedIntents extends Intent
class PrioritizedIntentsMate {
  /// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
  PrioritizedIntentsMate(
      {
// param: {required List<Intent> orderedIntents}
      required List<Intent> orderedIntents}) {}
}

/// class PrioritizedAction extends Action<PrioritizedIntents>
class PrioritizedActionMate {
  /// PrioritizedAction PrioritizedAction()
  PrioritizedActionMate() {}
}
