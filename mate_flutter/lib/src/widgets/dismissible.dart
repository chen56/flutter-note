// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.338015

import 'package:flutter/src/widgets/dismissible.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/rendering/proxy_box.dart';

/// class Dismissible extends StatefulWidget
class DismissibleMate extends Dismissible {
  /// Dismissible Dismissible({required Key key, required Widget child, Widget? background, Widget? secondaryBackground, Future<bool?> Function(DismissDirection)? confirmDismiss, void Function()? onResize, void Function(DismissUpdateDetails)? onUpdate, void Function(DismissDirection)? onDismissed, DismissDirection direction = DismissDirection.horizontal, Duration? resizeDuration = const Duration(milliseconds: 300), Map<DismissDirection, double> dismissThresholds = const <DismissDirection, double>{}, Duration movementDuration = const Duration(milliseconds: 200), double crossAxisEndOffset = 0.0, DragStartBehavior dragStartBehavior = DragStartBehavior.start, HitTestBehavior behavior = HitTestBehavior.opaque})
  DismissibleMate({
    /// param: {required Key key}
    required Key key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {Widget? background}
    Widget? background,

    /// param: {Widget? secondaryBackground}
    Widget? secondaryBackground,

    /// param: {Future<bool?> Function(DismissDirection)? confirmDismiss}
    ConfirmDismissCallback? confirmDismiss,

    /// param: {void Function()? onResize}
    VoidCallback? onResize,

    /// param: {void Function(DismissUpdateDetails)? onUpdate}
    DismissUpdateCallback? onUpdate,

    /// param: {void Function(DismissDirection)? onDismissed}
    DismissDirectionCallback? onDismissed,

    /// param: {DismissDirection direction = DismissDirection.horizontal}
    required DismissDirection direction,

    /// param: {Duration? resizeDuration = const Duration(milliseconds: 300)}
    Duration? resizeDuration,

    /// param: {Map<DismissDirection, double> dismissThresholds = const <DismissDirection, double>{}}
    required Map<DismissDirection, double> dismissThresholds,

    /// param: {Duration movementDuration = const Duration(milliseconds: 200)}
    required Duration movementDuration,

    /// param: {double crossAxisEndOffset = 0.0}
    required double crossAxisEndOffset,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {HitTestBehavior behavior = HitTestBehavior.opaque}
    required HitTestBehavior behavior,
  }) : super(
          key: key,
          child: child,
          background: background,
          secondaryBackground: secondaryBackground,
          confirmDismiss: confirmDismiss,
          onResize: onResize,
          onUpdate: onUpdate,
          onDismissed: onDismissed,
          direction: direction,
          resizeDuration: resizeDuration,
          dismissThresholds: dismissThresholds,
          movementDuration: movementDuration,
          crossAxisEndOffset: crossAxisEndOffset,
          dragStartBehavior: dragStartBehavior,
          behavior: behavior,
        ) {}
}

/// class DismissUpdateDetails
class DismissUpdateDetailsMate extends DismissUpdateDetails {
  /// DismissUpdateDetails DismissUpdateDetails({DismissDirection direction = DismissDirection.horizontal, bool reached = false, bool previousReached = false, double progress = 0.0})
  DismissUpdateDetailsMate({
    /// param: {DismissDirection direction = DismissDirection.horizontal}
    required DismissDirection direction,

    /// param: {bool reached = false}
    required bool reached,

    /// param: {bool previousReached = false}
    required bool previousReached,

    /// param: {double progress = 0.0}
    required double progress,
  }) : super(
          direction: direction,
          reached: reached,
          previousReached: previousReached,
          progress: progress,
        ) {}
}
