// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:11.256434

library;

import 'package:flutter/src/widgets/navigator.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/heroes.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// abstract class Route<T>
abstract class RouteMate<T> extends Route<T> {
  /// Route<T> Route({RouteSettings? settings})
  RouteMate(
      {
      /// param: {RouteSettings? settings}
      RouteSettings? settings})
      : super(settings: settings) {}
}

/// class RouteSettings
class RouteSettingsMate extends RouteSettings {
  /// RouteSettings RouteSettings({String? name, Object? arguments})
  RouteSettingsMate({
    /// param: {String? name}
    String? name,

    /// param: {Object? arguments}
    Object? arguments,
  }) : super(
          name: name,
          arguments: arguments,
        ) {}
}

/// abstract class Page<T> extends RouteSettings
abstract class PageMate<T> extends Page<T> {
  /// Page<T> Page({LocalKey? key, String? name, Object? arguments, String? restorationId})
  PageMate({
    /// param: {LocalKey? key}
    LocalKey? key,

    /// param: {String? name}
    String? name,

    /// param: {Object? arguments}
    Object? arguments,

    /// param: {String? restorationId}
    String? restorationId,
  }) : super(
          key: key,
          name: name,
          arguments: arguments,
          restorationId: restorationId,
        ) {}
}

/// class HeroControllerScope extends InheritedWidget
class HeroControllerScopeMate extends HeroControllerScope {
  /// HeroControllerScope HeroControllerScope({Key? key, required HeroController controller, required Widget child})
  HeroControllerScopeMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required HeroController controller}
    required HeroController controller,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          controller: controller,
          child: child,
        ) {}

  /// HeroControllerScope HeroControllerScope.none({Key? key, required Widget child})
  HeroControllerScopeMate.none({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,
  }) : super.none(
          key: key,
          child: child,
        ) {}
}

/// class Navigator extends StatefulWidget
class NavigatorMate extends Navigator {
  /// Navigator Navigator({Key? key, List<Page<dynamic>> pages = const <Page<dynamic>>[], bool Function(Route<dynamic>, dynamic)? onPopPage, String? initialRoute, List<Route<dynamic>> Function(NavigatorState, String) onGenerateInitialRoutes = Navigator.defaultGenerateInitialRoutes, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, TransitionDelegate<dynamic> transitionDelegate = const DefaultTransitionDelegate<dynamic>(), bool reportsRouteUpdateToEngine = false, Clip clipBehavior = Clip.hardEdge, List<NavigatorObserver> observers = const <NavigatorObserver>[], bool requestFocus = true, String? restorationScopeId, TraversalEdgeBehavior routeTraversalEdgeBehavior = kDefaultRouteTraversalEdgeBehavior})
  NavigatorMate({
    /// param: {Key? key}
    Key? key,

    /// param: {List<Page<dynamic>> pages = const <Page<dynamic>>[]}
    required List<Page<dynamic>> pages,

    /// param: {bool Function(Route<dynamic>, dynamic)? onPopPage}
    PopPageCallback? onPopPage,

    /// param: {String? initialRoute}
    String? initialRoute,

    /// param: {List<Route<dynamic>> Function(NavigatorState, String) onGenerateInitialRoutes = Navigator.defaultGenerateInitialRoutes}
    required RouteListFactory onGenerateInitialRoutes,

    /// param: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute}
    RouteFactory? onGenerateRoute,

    /// param: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute}
    RouteFactory? onUnknownRoute,

    /// param: {TransitionDelegate<dynamic> transitionDelegate = const DefaultTransitionDelegate<dynamic>()}
    required TransitionDelegate<dynamic> transitionDelegate,

    /// param: {bool reportsRouteUpdateToEngine = false}
    required bool reportsRouteUpdateToEngine,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {List<NavigatorObserver> observers = const <NavigatorObserver>[]}
    required List<NavigatorObserver> observers,

    /// param: {bool requestFocus = true}
    required bool requestFocus,

    /// param: {String? restorationScopeId}
    String? restorationScopeId,

    /// param: {TraversalEdgeBehavior routeTraversalEdgeBehavior = kDefaultRouteTraversalEdgeBehavior}
    required TraversalEdgeBehavior routeTraversalEdgeBehavior,
  }) : super(
          key: key,
          pages: pages,
          onPopPage: onPopPage,
          initialRoute: initialRoute,
          onGenerateInitialRoutes: onGenerateInitialRoutes,
          onGenerateRoute: onGenerateRoute,
          onUnknownRoute: onUnknownRoute,
          transitionDelegate: transitionDelegate,
          reportsRouteUpdateToEngine: reportsRouteUpdateToEngine,
          clipBehavior: clipBehavior,
          observers: observers,
          requestFocus: requestFocus,
          restorationScopeId: restorationScopeId,
          routeTraversalEdgeBehavior: routeTraversalEdgeBehavior,
        ) {}
}

/// class RestorableRouteFuture<T> extends RestorableProperty<String?>
class RestorableRouteFutureMate<T> extends RestorableRouteFuture<T> {
  /// RestorableRouteFuture<T> RestorableRouteFuture({NavigatorState Function(BuildContext) navigatorFinder = _defaultNavigatorFinder, required String Function(NavigatorState, Object?) onPresent, void Function(T)? onComplete})
  RestorableRouteFutureMate({
    /// param: {NavigatorState Function(BuildContext) navigatorFinder = _defaultNavigatorFinder}
    required NavigatorFinderCallback navigatorFinder,

    /// param: {required String Function(NavigatorState, Object?) onPresent}
    required RoutePresentationCallback onPresent,

    /// param: {void Function(T)? onComplete}
    RouteCompletionCallback<T>? onComplete,
  }) : super(
          navigatorFinder: navigatorFinder,
          onPresent: onPresent,
          onComplete: onComplete,
        ) {}
}
