// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.731199

library;

import 'package:flutter/src/widgets/navigator.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/heroes.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// abstract class Route<T>
abstract class RouteMate<T> {
  /// Route<T> Route({RouteSettings? settings})
  RouteMate(
      {
// param: {RouteSettings? settings}
      RouteSettings? settings}) {}
}

/// class RouteSettings
class RouteSettingsMate {
  /// RouteSettings RouteSettings({String? name, Object? arguments})
  RouteSettingsMate({
// param: {String? name}
    String? name,
// param: {Object? arguments}
    Object? arguments,
  }) {}
}

/// abstract class Page<T> extends RouteSettings
abstract class PageMate<T> {
  /// Page<T> Page({LocalKey? key, String? name, Object? arguments, String? restorationId})
  PageMate({
// param: {LocalKey? key}
    LocalKey? key,
// param: {String? name}
    String? name,
// param: {Object? arguments}
    Object? arguments,
// param: {String? restorationId}
    String? restorationId,
  }) {}
}

/// class NavigatorObserver
class NavigatorObserverMate {
  /// NavigatorObserver NavigatorObserver()
  NavigatorObserverMate() {}
}

/// class HeroControllerScope extends InheritedWidget
class HeroControllerScopeMate {
  /// HeroControllerScope HeroControllerScope({Key? key, required HeroController controller, required Widget child})
  HeroControllerScopeMate({
// param: {Key? key}
    Key? key,
// param: {required HeroController controller}
    required HeroController controller,
// param: {required Widget child}
    required Widget child,
  }) {}

  /// HeroControllerScope HeroControllerScope.none({Key? key, required Widget child})
  HeroControllerScopeMate.none({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// abstract class RouteTransitionRecord
abstract class RouteTransitionRecordMate {
  /// RouteTransitionRecord RouteTransitionRecord()
  RouteTransitionRecordMate() {}
}

/// abstract class TransitionDelegate<T>
abstract class TransitionDelegateMate<T> {
  /// TransitionDelegate<T> TransitionDelegate()
  TransitionDelegateMate() {}
}

/// class DefaultTransitionDelegate<T> extends TransitionDelegate<T>
class DefaultTransitionDelegateMate<T> {
  /// DefaultTransitionDelegate<T> DefaultTransitionDelegate()
  DefaultTransitionDelegateMate() {}
}

/// class Navigator extends StatefulWidget
class NavigatorMate {
  /// Navigator Navigator({Key? key, List<Page<dynamic>> pages = const <Page<dynamic>>[], bool Function(Route<dynamic>, dynamic)? onPopPage, String? initialRoute, List<Route<dynamic>> Function(NavigatorState, String) onGenerateInitialRoutes = Navigator.defaultGenerateInitialRoutes, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, TransitionDelegate<dynamic> transitionDelegate = const DefaultTransitionDelegate<dynamic>(), bool reportsRouteUpdateToEngine = false, Clip clipBehavior = Clip.hardEdge, List<NavigatorObserver> observers = const <NavigatorObserver>[], bool requestFocus = true, String? restorationScopeId, TraversalEdgeBehavior routeTraversalEdgeBehavior = kDefaultRouteTraversalEdgeBehavior})
  NavigatorMate({
// param: {Key? key}
    Key? key,
// param: {List<Page<dynamic>> pages = const <Page<dynamic>>[]}
    required List<Page<dynamic>> pages,
// param: {bool Function(Route<dynamic>, dynamic)? onPopPage}
    bool Function(
      Route<dynamic>,
      dynamic, [
      Route<dynamic>,
      dynamic,
    ])?
        onPopPage,
// param: {String? initialRoute}
    String? initialRoute,
// param: {List<Route<dynamic>> Function(NavigatorState, String) onGenerateInitialRoutes = Navigator.defaultGenerateInitialRoutes}
    required List<Route<dynamic>> Function(
      NavigatorState,
      String, [
      NavigatorState,
      String,
    ])
        onGenerateInitialRoutes,
// param: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute}
    Route<dynamic>? Function(
      RouteSettings, [
      RouteSettings,
    ])?
        onGenerateRoute,
// param: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute}
    Route<dynamic>? Function(
      RouteSettings, [
      RouteSettings,
    ])?
        onUnknownRoute,
// param: {TransitionDelegate<dynamic> transitionDelegate = const DefaultTransitionDelegate<dynamic>()}
    required TransitionDelegate<dynamic> transitionDelegate,
// param: {bool reportsRouteUpdateToEngine = false}
    required bool reportsRouteUpdateToEngine,
// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
// param: {List<NavigatorObserver> observers = const <NavigatorObserver>[]}
    required List<NavigatorObserver> observers,
// param: {bool requestFocus = true}
    required bool requestFocus,
// param: {String? restorationScopeId}
    String? restorationScopeId,
// param: {TraversalEdgeBehavior routeTraversalEdgeBehavior = kDefaultRouteTraversalEdgeBehavior}
    required TraversalEdgeBehavior routeTraversalEdgeBehavior,
  }) {}
}

/// class NavigatorState extends State<Navigator> with TickerProviderStateMixin<Navigator>, RestorationMixin<Navigator>
class NavigatorStateMate {
  /// NavigatorState NavigatorState()
  NavigatorStateMate() {}
}

/// class RestorableRouteFuture<T> extends RestorableProperty<String?>
class RestorableRouteFutureMate<T> {
  /// RestorableRouteFuture<T> RestorableRouteFuture({NavigatorState Function(BuildContext) navigatorFinder = _defaultNavigatorFinder, required String Function(NavigatorState, Object?) onPresent, void Function(T)? onComplete})
  RestorableRouteFutureMate({
// param: {NavigatorState Function(BuildContext) navigatorFinder = _defaultNavigatorFinder}
    required NavigatorState Function(
      BuildContext, [
      BuildContext,
    ])
        navigatorFinder,
// param: {required String Function(NavigatorState, Object?) onPresent}
    required String Function(
      NavigatorState,
      Object?, [
      NavigatorState,
      Object?,
    ])
        onPresent,
// param: {void Function(T)? onComplete}
    void Function(
      T, [
      T,
    ])?
        onComplete,
  }) {}
}
