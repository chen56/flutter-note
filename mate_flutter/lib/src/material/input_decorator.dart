// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.090296

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/painting/borders.dart';

/// class FloatingLabelAlignment
class FloatingLabelAlignmentMate {}

/// class InputDecorator extends StatefulWidget
class InputDecoratorMate {
  /// InputDecorator InputDecorator({Key? key, required InputDecoration decoration, TextStyle? baseStyle, TextAlign? textAlign, TextAlignVertical? textAlignVertical, bool isFocused = false, bool isHovering = false, bool expands = false, bool isEmpty = false, Widget? child})
  InputDecoratorMate({
// param: {Key? key}
    Key? key,
// param: {required InputDecoration decoration}
    required InputDecoration decoration,
// param: {TextStyle? baseStyle}
    TextStyle? baseStyle,
// param: {TextAlign? textAlign}
    TextAlign? textAlign,
// param: {TextAlignVertical? textAlignVertical}
    TextAlignVertical? textAlignVertical,
// param: {bool isFocused = false}
    required bool isFocused,
// param: {bool isHovering = false}
    required bool isHovering,
// param: {bool expands = false}
    required bool expands,
// param: {bool isEmpty = false}
    required bool isEmpty,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class InputDecoration
class InputDecorationMate {
  /// InputDecoration InputDecoration({Widget? icon, Color? iconColor, Widget? label, String? labelText, TextStyle? labelStyle, TextStyle? floatingLabelStyle, String? helperText, TextStyle? helperStyle, int? helperMaxLines, String? hintText, TextStyle? hintStyle, TextDirection? hintTextDirection, int? hintMaxLines, String? errorText, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, bool isCollapsed = false, bool? isDense, EdgeInsetsGeometry? contentPadding, Widget? prefixIcon, BoxConstraints? prefixIconConstraints, Widget? prefix, String? prefixText, TextStyle? prefixStyle, Color? prefixIconColor, Widget? suffixIcon, Widget? suffix, String? suffixText, TextStyle? suffixStyle, Color? suffixIconColor, BoxConstraints? suffixIconConstraints, Widget? counter, String? counterText, TextStyle? counterStyle, bool? filled, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool enabled = true, String? semanticCounterText, bool? alignLabelWithHint, BoxConstraints? constraints})
  InputDecorationMate({
// param: {Widget? icon}
    Widget? icon,
// param: {Color? iconColor}
    Color? iconColor,
// param: {Widget? label}
    Widget? label,
// param: {String? labelText}
    String? labelText,
// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,
// param: {TextStyle? floatingLabelStyle}
    TextStyle? floatingLabelStyle,
// param: {String? helperText}
    String? helperText,
// param: {TextStyle? helperStyle}
    TextStyle? helperStyle,
// param: {int? helperMaxLines}
    int? helperMaxLines,
// param: {String? hintText}
    String? hintText,
// param: {TextStyle? hintStyle}
    TextStyle? hintStyle,
// param: {TextDirection? hintTextDirection}
    TextDirection? hintTextDirection,
// param: {int? hintMaxLines}
    int? hintMaxLines,
// param: {String? errorText}
    String? errorText,
// param: {TextStyle? errorStyle}
    TextStyle? errorStyle,
// param: {int? errorMaxLines}
    int? errorMaxLines,
// param: {FloatingLabelBehavior? floatingLabelBehavior}
    FloatingLabelBehavior? floatingLabelBehavior,
// param: {FloatingLabelAlignment? floatingLabelAlignment}
    FloatingLabelAlignment? floatingLabelAlignment,
// param: {bool isCollapsed = false}
    required bool isCollapsed,
// param: {bool? isDense}
    bool? isDense,
// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,
// param: {Widget? prefixIcon}
    Widget? prefixIcon,
// param: {BoxConstraints? prefixIconConstraints}
    BoxConstraints? prefixIconConstraints,
// param: {Widget? prefix}
    Widget? prefix,
// param: {String? prefixText}
    String? prefixText,
// param: {TextStyle? prefixStyle}
    TextStyle? prefixStyle,
// param: {Color? prefixIconColor}
    Color? prefixIconColor,
// param: {Widget? suffixIcon}
    Widget? suffixIcon,
// param: {Widget? suffix}
    Widget? suffix,
// param: {String? suffixText}
    String? suffixText,
// param: {TextStyle? suffixStyle}
    TextStyle? suffixStyle,
// param: {Color? suffixIconColor}
    Color? suffixIconColor,
// param: {BoxConstraints? suffixIconConstraints}
    BoxConstraints? suffixIconConstraints,
// param: {Widget? counter}
    Widget? counter,
// param: {String? counterText}
    String? counterText,
// param: {TextStyle? counterStyle}
    TextStyle? counterStyle,
// param: {bool? filled}
    bool? filled,
// param: {Color? fillColor}
    Color? fillColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {InputBorder? errorBorder}
    InputBorder? errorBorder,
// param: {InputBorder? focusedBorder}
    InputBorder? focusedBorder,
// param: {InputBorder? focusedErrorBorder}
    InputBorder? focusedErrorBorder,
// param: {InputBorder? disabledBorder}
    InputBorder? disabledBorder,
// param: {InputBorder? enabledBorder}
    InputBorder? enabledBorder,
// param: {InputBorder? border}
    InputBorder? border,
// param: {bool enabled = true}
    required bool enabled,
// param: {String? semanticCounterText}
    String? semanticCounterText,
// param: {bool? alignLabelWithHint}
    bool? alignLabelWithHint,
// param: {BoxConstraints? constraints}
    BoxConstraints? constraints,
  }) {}

  /// InputDecoration InputDecoration.collapsed({required String? hintText, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, TextStyle? hintStyle, TextDirection? hintTextDirection, bool? filled = false, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? border = InputBorder.none, bool enabled = true})
  InputDecorationMate.collapsed({
// param: {required String? hintText}
    required String? hintText,
// param: {FloatingLabelBehavior? floatingLabelBehavior}
    FloatingLabelBehavior? floatingLabelBehavior,
// param: {FloatingLabelAlignment? floatingLabelAlignment}
    FloatingLabelAlignment? floatingLabelAlignment,
// param: {TextStyle? hintStyle}
    TextStyle? hintStyle,
// param: {TextDirection? hintTextDirection}
    TextDirection? hintTextDirection,
// param: {bool? filled = false}
    bool? filled,
// param: {Color? fillColor}
    Color? fillColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {InputBorder? border = InputBorder.none}
    InputBorder? border,
// param: {bool enabled = true}
    required bool enabled,
  }) {}
}

/// class InputDecorationTheme with Diagnosticable
class InputDecorationThemeMate {
  /// InputDecorationTheme InputDecorationTheme({TextStyle? labelStyle, TextStyle? floatingLabelStyle, TextStyle? helperStyle, int? helperMaxLines, TextStyle? hintStyle, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto, FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start, bool isDense = false, EdgeInsetsGeometry? contentPadding, bool isCollapsed = false, Color? iconColor, TextStyle? prefixStyle, Color? prefixIconColor, TextStyle? suffixStyle, Color? suffixIconColor, TextStyle? counterStyle, bool filled = false, Color? fillColor, BorderSide? activeIndicatorBorder, BorderSide? outlineBorder, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool alignLabelWithHint = false, BoxConstraints? constraints})
  InputDecorationThemeMate({
// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,
// param: {TextStyle? floatingLabelStyle}
    TextStyle? floatingLabelStyle,
// param: {TextStyle? helperStyle}
    TextStyle? helperStyle,
// param: {int? helperMaxLines}
    int? helperMaxLines,
// param: {TextStyle? hintStyle}
    TextStyle? hintStyle,
// param: {TextStyle? errorStyle}
    TextStyle? errorStyle,
// param: {int? errorMaxLines}
    int? errorMaxLines,
// param: {FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto}
    required FloatingLabelBehavior floatingLabelBehavior,
// param: {FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start}
    required FloatingLabelAlignment floatingLabelAlignment,
// param: {bool isDense = false}
    required bool isDense,
// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,
// param: {bool isCollapsed = false}
    required bool isCollapsed,
// param: {Color? iconColor}
    Color? iconColor,
// param: {TextStyle? prefixStyle}
    TextStyle? prefixStyle,
// param: {Color? prefixIconColor}
    Color? prefixIconColor,
// param: {TextStyle? suffixStyle}
    TextStyle? suffixStyle,
// param: {Color? suffixIconColor}
    Color? suffixIconColor,
// param: {TextStyle? counterStyle}
    TextStyle? counterStyle,
// param: {bool filled = false}
    required bool filled,
// param: {Color? fillColor}
    Color? fillColor,
// param: {BorderSide? activeIndicatorBorder}
    BorderSide? activeIndicatorBorder,
// param: {BorderSide? outlineBorder}
    BorderSide? outlineBorder,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {InputBorder? errorBorder}
    InputBorder? errorBorder,
// param: {InputBorder? focusedBorder}
    InputBorder? focusedBorder,
// param: {InputBorder? focusedErrorBorder}
    InputBorder? focusedErrorBorder,
// param: {InputBorder? disabledBorder}
    InputBorder? disabledBorder,
// param: {InputBorder? enabledBorder}
    InputBorder? enabledBorder,
// param: {InputBorder? border}
    InputBorder? border,
// param: {bool alignLabelWithHint = false}
    required bool alignLabelWithHint,
// param: {BoxConstraints? constraints}
    BoxConstraints? constraints,
  }) {}
}
