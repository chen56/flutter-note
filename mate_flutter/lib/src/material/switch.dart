// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.377813

library;

import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/icon.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class Switch extends StatelessWidget
class SwitchMate {
  /// Switch Switch({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, MaterialTapTargetSize? materialTapTargetSize, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false})
  SwitchMate({
// param: {Key? key}
    Key? key,
// param: {required bool value}
    required bool value,
// param: {required void Function(bool)? onChanged}
    required void Function(
      bool, [
      bool,
    ])?
        onChanged,
// param: {Color? activeColor}
    Color? activeColor,
// param: {Color? activeTrackColor}
    Color? activeTrackColor,
// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,
// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,
// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,
// param: {void Function(Object, StackTrace?)? onActiveThumbImageError}
    void Function(
      Object,
      StackTrace?, [
      Object,
      StackTrace?,
    ])?
        onActiveThumbImageError,
// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,
// param: {void Function(Object, StackTrace?)? onInactiveThumbImageError}
    void Function(
      Object,
      StackTrace?, [
      Object,
      StackTrace?,
    ])?
        onInactiveThumbImageError,
// param: {MaterialStateProperty<Color?>? thumbColor}
    MaterialStateProperty<Color?>? thumbColor,
// param: {MaterialStateProperty<Color?>? trackColor}
    MaterialStateProperty<Color?>? trackColor,
// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,
// param: {MaterialStateProperty<Icon?>? thumbIcon}
    MaterialStateProperty<Icon?>? thumbIcon,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {double? splashRadius}
    double? splashRadius,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {bool autofocus = false}
    required bool autofocus,
  }) {}

  /// Switch Switch.adaptive({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialTapTargetSize? materialTapTargetSize, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false, bool? applyCupertinoTheme})
  SwitchMate.adaptive({
// param: {Key? key}
    Key? key,
// param: {required bool value}
    required bool value,
// param: {required void Function(bool)? onChanged}
    required void Function(
      bool, [
      bool,
    ])?
        onChanged,
// param: {Color? activeColor}
    Color? activeColor,
// param: {Color? activeTrackColor}
    Color? activeTrackColor,
// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,
// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,
// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,
// param: {void Function(Object, StackTrace?)? onActiveThumbImageError}
    void Function(
      Object,
      StackTrace?, [
      Object,
      StackTrace?,
    ])?
        onActiveThumbImageError,
// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,
// param: {void Function(Object, StackTrace?)? onInactiveThumbImageError}
    void Function(
      Object,
      StackTrace?, [
      Object,
      StackTrace?,
    ])?
        onInactiveThumbImageError,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {MaterialStateProperty<Color?>? thumbColor}
    MaterialStateProperty<Color?>? thumbColor,
// param: {MaterialStateProperty<Color?>? trackColor}
    MaterialStateProperty<Color?>? trackColor,
// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,
// param: {MaterialStateProperty<Icon?>? thumbIcon}
    MaterialStateProperty<Icon?>? thumbIcon,
// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {double? splashRadius}
    double? splashRadius,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {bool? applyCupertinoTheme}
    bool? applyCupertinoTheme,
  }) {}
}
