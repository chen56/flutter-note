// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.102689

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class ListTile extends StatelessWidget
class ListTileMate {
  /// ListTile ListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine = false, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, bool enabled = true, void Function()? onTap, void Function()? onLongPress, void Function(bool)? onFocusChange, MouseCursor? mouseCursor, bool selected = false, Color? focusColor, Color? hoverColor, Color? splashColor, FocusNode? focusNode, bool autofocus = false, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth})
  ListTileMate({
// param: {Key? key}
    Key? key,
// param: {Widget? leading}
    Widget? leading,
// param: {Widget? title}
    Widget? title,
// param: {Widget? subtitle}
    Widget? subtitle,
// param: {Widget? trailing}
    Widget? trailing,
// param: {bool isThreeLine = false}
    required bool isThreeLine,
// param: {bool? dense}
    bool? dense,
// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,
// param: {ShapeBorder? shape}
    ShapeBorder? shape,
// param: {ListTileStyle? style}
    ListTileStyle? style,
// param: {Color? selectedColor}
    Color? selectedColor,
// param: {Color? iconColor}
    Color? iconColor,
// param: {Color? textColor}
    Color? textColor,
// param: {TextStyle? titleTextStyle}
    TextStyle? titleTextStyle,
// param: {TextStyle? subtitleTextStyle}
    TextStyle? subtitleTextStyle,
// param: {TextStyle? leadingAndTrailingTextStyle}
    TextStyle? leadingAndTrailingTextStyle,
// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,
// param: {bool enabled = true}
    required bool enabled,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {void Function()? onLongPress}
    void Function()? onLongPress,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {bool selected = false}
    required bool selected,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Color? splashColor}
    Color? splashColor,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {Color? tileColor}
    Color? tileColor,
// param: {Color? selectedTileColor}
    Color? selectedTileColor,
// param: {bool? enableFeedback}
    bool? enableFeedback,
// param: {double? horizontalTitleGap}
    double? horizontalTitleGap,
// param: {double? minVerticalPadding}
    double? minVerticalPadding,
// param: {double? minLeadingWidth}
    double? minLeadingWidth,
  }) {}
}
