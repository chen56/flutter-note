// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.164566

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/menu_anchor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/platform_menu_bar.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/material/material_state.dart';

/// class MenuAnchor extends StatefulWidget
class MenuAnchorMate {
  /// MenuAnchor MenuAnchor({Key? key, MenuController? controller, FocusNode? childFocusNode, MenuStyle? style, Offset? alignmentOffset = Offset.zero, Clip clipBehavior = Clip.none, bool anchorTapClosesMenu = false, void Function()? onOpen, void Function()? onClose, bool crossAxisUnconstrained = true, required List<Widget> menuChildren, Widget Function(BuildContext, MenuController, Widget?)? builder, Widget? child})
  MenuAnchorMate({
// param: {Key? key}
    Key? key,
// param: {MenuController? controller}
    MenuController? controller,
// param: {FocusNode? childFocusNode}
    FocusNode? childFocusNode,
// param: {MenuStyle? style}
    MenuStyle? style,
// param: {Offset? alignmentOffset = Offset.zero}
    Offset? alignmentOffset,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {bool anchorTapClosesMenu = false}
    required bool anchorTapClosesMenu,
// param: {void Function()? onOpen}
    void Function()? onOpen,
// param: {void Function()? onClose}
    void Function()? onClose,
// param: {bool crossAxisUnconstrained = true}
    required bool crossAxisUnconstrained,
// param: {required List<Widget> menuChildren}
    required List<Widget> menuChildren,
// param: {Widget Function(BuildContext, MenuController, Widget?)? builder}
    Widget Function(
      BuildContext,
      MenuController,
      Widget?, [
      BuildContext,
      MenuController,
      Widget?,
    ])?
        builder,
// param: {Widget? child}
    Widget? child,
  }) {}
}

/// class MenuController
class MenuControllerMate {
  /// MenuController MenuController()
  MenuControllerMate() {}
}

/// class MenuBar extends StatelessWidget
class MenuBarMate {
  /// MenuBar MenuBar({Key? key, MenuStyle? style, Clip clipBehavior = Clip.none, MenuController? controller, required List<Widget> children})
  MenuBarMate({
// param: {Key? key}
    Key? key,
// param: {MenuStyle? style}
    MenuStyle? style,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {MenuController? controller}
    MenuController? controller,
// param: {required List<Widget> children}
    required List<Widget> children,
  }) {}
}

/// class MenuItemButton extends StatefulWidget
class MenuItemButtonMate {
  /// MenuItemButton MenuItemButton({Key? key, void Function()? onPressed, void Function(bool)? onHover, bool requestFocusOnHover = true, void Function(bool)? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? leadingIcon, Widget? trailingIcon, required Widget? child})
  MenuItemButtonMate({
// param: {Key? key}
    Key? key,
// param: {void Function()? onPressed}
    void Function()? onPressed,
// param: {void Function(bool)? onHover}
    void Function(
      bool, [
      bool,
    ])?
        onHover,
// param: {bool requestFocusOnHover = true}
    required bool requestFocusOnHover,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {MenuSerializableShortcut? shortcut}
    MenuSerializableShortcut? shortcut,
// param: {ButtonStyle? style}
    ButtonStyle? style,
// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {Widget? leadingIcon}
    Widget? leadingIcon,
// param: {Widget? trailingIcon}
    Widget? trailingIcon,
// param: {required Widget? child}
    required Widget? child,
  }) {}
}

/// class CheckboxMenuButton extends StatelessWidget
class CheckboxMenuButtonMate {
  /// CheckboxMenuButton CheckboxMenuButton({Key? key, required bool? value, bool tristate = false, bool isError = false, required void Function(bool?)? onChanged, void Function(bool)? onHover, void Function(bool)? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? trailingIcon, required Widget? child})
  CheckboxMenuButtonMate({
// param: {Key? key}
    Key? key,
// param: {required bool? value}
    required bool? value,
// param: {bool tristate = false}
    required bool tristate,
// param: {bool isError = false}
    required bool isError,
// param: {required void Function(bool?)? onChanged}
    required void Function(
      bool?, [
      bool?,
    ])?
        onChanged,
// param: {void Function(bool)? onHover}
    void Function(
      bool, [
      bool,
    ])?
        onHover,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {MenuSerializableShortcut? shortcut}
    MenuSerializableShortcut? shortcut,
// param: {ButtonStyle? style}
    ButtonStyle? style,
// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {Widget? trailingIcon}
    Widget? trailingIcon,
// param: {required Widget? child}
    required Widget? child,
  }) {}
}

/// class RadioMenuButton<T> extends StatelessWidget
class RadioMenuButtonMate<T> {
  /// RadioMenuButton<T> RadioMenuButton({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, bool toggleable = false, void Function(bool)? onHover, void Function(bool)? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? trailingIcon, required Widget? child})
  RadioMenuButtonMate({
// param: {Key? key}
    Key? key,
// param: {required T value}
    required T value,
// param: {required T? groupValue}
    required T? groupValue,
// param: {required void Function(T?)? onChanged}
    required void Function(
      T?, [
      T?,
    ])?
        onChanged,
// param: {bool toggleable = false}
    required bool toggleable,
// param: {void Function(bool)? onHover}
    void Function(
      bool, [
      bool,
    ])?
        onHover,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {MenuSerializableShortcut? shortcut}
    MenuSerializableShortcut? shortcut,
// param: {ButtonStyle? style}
    ButtonStyle? style,
// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {Widget? trailingIcon}
    Widget? trailingIcon,
// param: {required Widget? child}
    required Widget? child,
  }) {}
}

/// class SubmenuButton extends StatefulWidget
class SubmenuButtonMate {
  /// SubmenuButton SubmenuButton({Key? key, void Function(bool)? onHover, void Function(bool)? onFocusChange, void Function()? onOpen, void Function()? onClose, ButtonStyle? style, MenuStyle? menuStyle, Offset? alignmentOffset, Clip clipBehavior = Clip.none, FocusNode? focusNode, MaterialStatesController? statesController, Widget? leadingIcon, Widget? trailingIcon, required List<Widget> menuChildren, required Widget? child})
  SubmenuButtonMate({
// param: {Key? key}
    Key? key,
// param: {void Function(bool)? onHover}
    void Function(
      bool, [
      bool,
    ])?
        onHover,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {void Function()? onOpen}
    void Function()? onOpen,
// param: {void Function()? onClose}
    void Function()? onClose,
// param: {ButtonStyle? style}
    ButtonStyle? style,
// param: {MenuStyle? menuStyle}
    MenuStyle? menuStyle,
// param: {Offset? alignmentOffset}
    Offset? alignmentOffset,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
// param: {Widget? leadingIcon}
    Widget? leadingIcon,
// param: {Widget? trailingIcon}
    Widget? trailingIcon,
// param: {required List<Widget> menuChildren}
    required List<Widget> menuChildren,
// param: {required Widget? child}
    required Widget? child,
  }) {}
}

/// class DismissMenuAction extends DismissAction
class DismissMenuActionMate {
  /// DismissMenuAction DismissMenuAction({required MenuController controller})
  DismissMenuActionMate(
      {
// param: {required MenuController controller}
      required MenuController controller}) {}
}

/// class MenuAcceleratorCallbackBinding extends InheritedWidget
class MenuAcceleratorCallbackBindingMate {
  /// MenuAcceleratorCallbackBinding MenuAcceleratorCallbackBinding({Key? key, void Function()? onInvoke, bool hasSubmenu = false, required Widget child})
  MenuAcceleratorCallbackBindingMate({
// param: {Key? key}
    Key? key,
// param: {void Function()? onInvoke}
    void Function()? onInvoke,
// param: {bool hasSubmenu = false}
    required bool hasSubmenu,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class MenuAcceleratorLabel extends StatefulWidget
class MenuAcceleratorLabelMate {
  /// MenuAcceleratorLabel MenuAcceleratorLabel(String label, {Key? key, Widget Function(BuildContext, String, int) builder = defaultLabelBuilder})
  MenuAcceleratorLabelMate(
// param: String label
    String label, {
// param: {Key? key}
    Key? key,
// param: {Widget Function(BuildContext, String, int) builder = defaultLabelBuilder}
    required Widget Function(
      BuildContext,
      String,
      int, [
      BuildContext,
      String,
      int,
    ])
        builder,
  }) {}
}
