// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.282848

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/radio.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class Radio<T> extends StatefulWidget
class RadioMate<T> {
  /// Radio<T> Radio({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false})
  RadioMate({
// param: {Key? key}
    Key? key,
// param: {required T value}
    required T value,
// param: {required T? groupValue}
    required T? groupValue,
// param: {required void Function(T?)? onChanged}
    required void Function(
      T?, [
      T?,
    ])?
        onChanged,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {bool toggleable = false}
    required bool toggleable,
// param: {Color? activeColor}
    Color? activeColor,
// param: {MaterialStateProperty<Color?>? fillColor}
    MaterialStateProperty<Color?>? fillColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {double? splashRadius}
    double? splashRadius,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
  }) {}
}
