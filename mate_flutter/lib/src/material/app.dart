// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:15:59.409163

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/material/scaffold.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/material/app.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/widgets/localizations.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/router.dart';

/// class MaterialApp extends StatefulWidget
class MaterialAppMate {
  /// MaterialApp MaterialApp({Key? key, GlobalKey<NavigatorState>? navigatorKey, GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey, Widget? home, Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}, String? initialRoute, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, List<Route<dynamic>> Function(String)? onGenerateInitialRoutes, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[], Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, Color? color, ThemeData? theme, ThemeData? darkTheme, ThemeData? highContrastTheme, ThemeData? highContrastDarkTheme, ThemeMode? themeMode = ThemeMode.system, Duration themeAnimationDuration = kThemeAnimationDuration, Curve themeAnimationCurve = Curves.linear, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool debugShowMaterialGrid = false, bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowCheckedModeBanner = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, ScrollBehavior? scrollBehavior, bool useInheritedMediaQuery = false})
  MaterialAppMate({
// param: {Key? key}
    Key? key,
// param: {GlobalKey<NavigatorState>? navigatorKey}
    GlobalKey<NavigatorState>? navigatorKey,
// param: {GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey}
    GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey,
// param: {Widget? home}
    Widget? home,
// param: {Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}}
    required Map<
            String,
            Widget Function(
      BuildContext, [
      BuildContext,
    ])>
        routes,
// param: {String? initialRoute}
    String? initialRoute,
// param: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute}
    Route<dynamic>? Function(
      RouteSettings, [
      RouteSettings,
    ])?
        onGenerateRoute,
// param: {List<Route<dynamic>> Function(String)? onGenerateInitialRoutes}
    List<Route<dynamic>> Function(
      String, [
      String,
    ])?
        onGenerateInitialRoutes,
// param: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute}
    Route<dynamic>? Function(
      RouteSettings, [
      RouteSettings,
    ])?
        onUnknownRoute,
// param: {List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[]}
    required List<NavigatorObserver> navigatorObservers,
// param: {Widget Function(BuildContext, Widget?)? builder}
    Widget Function(
      BuildContext,
      Widget?, [
      BuildContext,
      Widget?,
    ])?
        builder,
// param: {String title = ''}
    required String title,
// param: {String Function(BuildContext)? onGenerateTitle}
    String Function(
      BuildContext, [
      BuildContext,
    ])?
        onGenerateTitle,
// param: {Color? color}
    Color? color,
// param: {ThemeData? theme}
    ThemeData? theme,
// param: {ThemeData? darkTheme}
    ThemeData? darkTheme,
// param: {ThemeData? highContrastTheme}
    ThemeData? highContrastTheme,
// param: {ThemeData? highContrastDarkTheme}
    ThemeData? highContrastDarkTheme,
// param: {ThemeMode? themeMode = ThemeMode.system}
    ThemeMode? themeMode,
// param: {Duration themeAnimationDuration = kThemeAnimationDuration}
    required Duration themeAnimationDuration,
// param: {Curve themeAnimationCurve = Curves.linear}
    required Curve themeAnimationCurve,
// param: {Locale? locale}
    Locale? locale,
// param: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates}
    Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates,
// param: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback}
    Locale? Function(
      List<Locale>?,
      Iterable<Locale>, [
      List<Locale>?,
      Iterable<Locale>,
    ])?
        localeListResolutionCallback,
// param: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback}
    Locale? Function(
      Locale?,
      Iterable<Locale>, [
      Locale?,
      Iterable<Locale>,
    ])?
        localeResolutionCallback,
// param: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]}
    required Iterable<Locale> supportedLocales,
// param: {bool debugShowMaterialGrid = false}
    required bool debugShowMaterialGrid,
// param: {bool showPerformanceOverlay = false}
    required bool showPerformanceOverlay,
// param: {bool checkerboardRasterCacheImages = false}
    required bool checkerboardRasterCacheImages,
// param: {bool checkerboardOffscreenLayers = false}
    required bool checkerboardOffscreenLayers,
// param: {bool showSemanticsDebugger = false}
    required bool showSemanticsDebugger,
// param: {bool debugShowCheckedModeBanner = true}
    required bool debugShowCheckedModeBanner,
// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,
// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,
// param: {String? restorationScopeId}
    String? restorationScopeId,
// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,
// param: {bool useInheritedMediaQuery = false}
    required bool useInheritedMediaQuery,
  }) {}

  /// MaterialApp MaterialApp.router({Key? key, GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey, RouteInformationProvider? routeInformationProvider, RouteInformationParser<Object>? routeInformationParser, RouterDelegate<Object>? routerDelegate, RouterConfig<Object>? routerConfig, BackButtonDispatcher? backButtonDispatcher, Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, Color? color, ThemeData? theme, ThemeData? darkTheme, ThemeData? highContrastTheme, ThemeData? highContrastDarkTheme, ThemeMode? themeMode = ThemeMode.system, Duration themeAnimationDuration = kThemeAnimationDuration, Curve themeAnimationCurve = Curves.linear, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool debugShowMaterialGrid = false, bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowCheckedModeBanner = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, ScrollBehavior? scrollBehavior, bool useInheritedMediaQuery = false})
  MaterialAppMate.router({
// param: {Key? key}
    Key? key,
// param: {GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey}
    GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey,
// param: {RouteInformationProvider? routeInformationProvider}
    RouteInformationProvider? routeInformationProvider,
// param: {RouteInformationParser<Object>? routeInformationParser}
    RouteInformationParser<Object>? routeInformationParser,
// param: {RouterDelegate<Object>? routerDelegate}
    RouterDelegate<Object>? routerDelegate,
// param: {RouterConfig<Object>? routerConfig}
    RouterConfig<Object>? routerConfig,
// param: {BackButtonDispatcher? backButtonDispatcher}
    BackButtonDispatcher? backButtonDispatcher,
// param: {Widget Function(BuildContext, Widget?)? builder}
    Widget Function(
      BuildContext,
      Widget?, [
      BuildContext,
      Widget?,
    ])?
        builder,
// param: {String title = ''}
    required String title,
// param: {String Function(BuildContext)? onGenerateTitle}
    String Function(
      BuildContext, [
      BuildContext,
    ])?
        onGenerateTitle,
// param: {Color? color}
    Color? color,
// param: {ThemeData? theme}
    ThemeData? theme,
// param: {ThemeData? darkTheme}
    ThemeData? darkTheme,
// param: {ThemeData? highContrastTheme}
    ThemeData? highContrastTheme,
// param: {ThemeData? highContrastDarkTheme}
    ThemeData? highContrastDarkTheme,
// param: {ThemeMode? themeMode = ThemeMode.system}
    ThemeMode? themeMode,
// param: {Duration themeAnimationDuration = kThemeAnimationDuration}
    required Duration themeAnimationDuration,
// param: {Curve themeAnimationCurve = Curves.linear}
    required Curve themeAnimationCurve,
// param: {Locale? locale}
    Locale? locale,
// param: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates}
    Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates,
// param: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback}
    Locale? Function(
      List<Locale>?,
      Iterable<Locale>, [
      List<Locale>?,
      Iterable<Locale>,
    ])?
        localeListResolutionCallback,
// param: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback}
    Locale? Function(
      Locale?,
      Iterable<Locale>, [
      Locale?,
      Iterable<Locale>,
    ])?
        localeResolutionCallback,
// param: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]}
    required Iterable<Locale> supportedLocales,
// param: {bool debugShowMaterialGrid = false}
    required bool debugShowMaterialGrid,
// param: {bool showPerformanceOverlay = false}
    required bool showPerformanceOverlay,
// param: {bool checkerboardRasterCacheImages = false}
    required bool checkerboardRasterCacheImages,
// param: {bool checkerboardOffscreenLayers = false}
    required bool checkerboardOffscreenLayers,
// param: {bool showSemanticsDebugger = false}
    required bool showSemanticsDebugger,
// param: {bool debugShowCheckedModeBanner = true}
    required bool debugShowCheckedModeBanner,
// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,
// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,
// param: {String? restorationScopeId}
    String? restorationScopeId,
// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,
// param: {bool useInheritedMediaQuery = false}
    required bool useInheritedMediaQuery,
  }) {}
}

/// class MaterialScrollBehavior extends ScrollBehavior
class MaterialScrollBehaviorMate {
  /// MaterialScrollBehavior MaterialScrollBehavior({AndroidOverscrollIndicator? androidOverscrollIndicator})
  MaterialScrollBehaviorMate(
      {
// param: {AndroidOverscrollIndicator? androidOverscrollIndicator}
      AndroidOverscrollIndicator? androidOverscrollIndicator}) {}
}
