// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.056912

library;

import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/rendering/box.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// abstract class InteractiveInkFeature extends InkFeature
abstract class InteractiveInkFeatureMate {
  /// InteractiveInkFeature InteractiveInkFeature({required MaterialInkController controller, required RenderBox referenceBox, required Color color, void Function()? onRemoved})
  InteractiveInkFeatureMate({
// param: {required MaterialInkController controller}
    required MaterialInkController controller,
// param: {required RenderBox referenceBox}
    required RenderBox referenceBox,
// param: {required Color color}
    required Color color,
// param: {void Function()? onRemoved}
    void Function()? onRemoved,
  }) {}
}

/// abstract class InteractiveInkFeatureFactory
abstract class InteractiveInkFeatureFactoryMate {
  /// InteractiveInkFeatureFactory InteractiveInkFeatureFactory()
  InteractiveInkFeatureFactoryMate() {}
}

/// class InkResponse extends StatelessWidget
class InkResponseMate {
  /// InkResponse InkResponse({Key? key, Widget? child, void Function()? onTap, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, bool containedInkWell = false, BoxShape highlightShape = BoxShape.circle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, bool enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkResponseMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {void Function(TapDownDetails)? onTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onTapDown,
// param: {void Function(TapUpDetails)? onTapUp}
    void Function(
      TapUpDetails, [
      TapUpDetails,
    ])?
        onTapUp,
// param: {void Function()? onTapCancel}
    void Function()? onTapCancel,
// param: {void Function()? onDoubleTap}
    void Function()? onDoubleTap,
// param: {void Function()? onLongPress}
    void Function()? onLongPress,
// param: {void Function(bool)? onHighlightChanged}
    void Function(
      bool, [
      bool,
    ])?
        onHighlightChanged,
// param: {void Function(bool)? onHover}
    void Function(
      bool, [
      bool,
    ])?
        onHover,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {bool containedInkWell = false}
    required bool containedInkWell,
// param: {BoxShape highlightShape = BoxShape.circle}
    required BoxShape highlightShape,
// param: {double? radius}
    double? radius,
// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,
// param: {ShapeBorder? customBorder}
    ShapeBorder? customBorder,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Color? highlightColor}
    Color? highlightColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {Color? splashColor}
    Color? splashColor,
// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,
// param: {bool enableFeedback = true}
    required bool enableFeedback,
// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool canRequestFocus = true}
    required bool canRequestFocus,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
  }) {}
}

/// class InkWell extends InkResponse
class InkWellMate {
  /// InkWell InkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkWellMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {void Function()? onDoubleTap}
    void Function()? onDoubleTap,
// param: {void Function()? onLongPress}
    void Function()? onLongPress,
// param: {void Function(TapDownDetails)? onTapDown}
    void Function(
      TapDownDetails, [
      TapDownDetails,
    ])?
        onTapDown,
// param: {void Function(TapUpDetails)? onTapUp}
    void Function(
      TapUpDetails, [
      TapUpDetails,
    ])?
        onTapUp,
// param: {void Function()? onTapCancel}
    void Function()? onTapCancel,
// param: {void Function(bool)? onHighlightChanged}
    void Function(
      bool, [
      bool,
    ])?
        onHighlightChanged,
// param: {void Function(bool)? onHover}
    void Function(
      bool, [
      bool,
    ])?
        onHover,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Color? highlightColor}
    Color? highlightColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {Color? splashColor}
    Color? splashColor,
// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,
// param: {double? radius}
    double? radius,
// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,
// param: {ShapeBorder? customBorder}
    ShapeBorder? customBorder,
// param: {bool? enableFeedback = true}
    bool? enableFeedback,
// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool canRequestFocus = true}
    required bool canRequestFocus,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
  }) {}
}
