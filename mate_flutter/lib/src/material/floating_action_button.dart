// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:15:59.968118

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';

/// class FloatingActionButton extends StatelessWidget
class FloatingActionButtonMate {
  /// FloatingActionButton FloatingActionButton({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor, bool mini = false, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool isExtended = false, bool? enableFeedback})
  FloatingActionButtonMate({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {String? tooltip}
    String? tooltip,
// param: {Color? foregroundColor}
    Color? foregroundColor,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Color? splashColor}
    Color? splashColor,
// param: {Object? heroTag = const _DefaultHeroTag()}
    Object? heroTag,
// param: {double? elevation}
    double? elevation,
// param: {double? focusElevation}
    double? focusElevation,
// param: {double? hoverElevation}
    double? hoverElevation,
// param: {double? highlightElevation}
    double? highlightElevation,
// param: {double? disabledElevation}
    double? disabledElevation,
// param: {required void Function()? onPressed}
    required void Function()? onPressed,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {bool mini = false}
    required bool mini,
// param: {ShapeBorder? shape}
    ShapeBorder? shape,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {bool isExtended = false}
    required bool isExtended,
// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) {}

  /// FloatingActionButton FloatingActionButton.small({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool? enableFeedback})
  FloatingActionButtonMate.small({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {String? tooltip}
    String? tooltip,
// param: {Color? foregroundColor}
    Color? foregroundColor,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Color? splashColor}
    Color? splashColor,
// param: {Object? heroTag = const _DefaultHeroTag()}
    Object? heroTag,
// param: {double? elevation}
    double? elevation,
// param: {double? focusElevation}
    double? focusElevation,
// param: {double? hoverElevation}
    double? hoverElevation,
// param: {double? highlightElevation}
    double? highlightElevation,
// param: {double? disabledElevation}
    double? disabledElevation,
// param: {required void Function()? onPressed}
    required void Function()? onPressed,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {ShapeBorder? shape}
    ShapeBorder? shape,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) {}

  /// FloatingActionButton FloatingActionButton.large({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool? enableFeedback})
  FloatingActionButtonMate.large({
// param: {Key? key}
    Key? key,
// param: {Widget? child}
    Widget? child,
// param: {String? tooltip}
    String? tooltip,
// param: {Color? foregroundColor}
    Color? foregroundColor,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Color? splashColor}
    Color? splashColor,
// param: {Object? heroTag = const _DefaultHeroTag()}
    Object? heroTag,
// param: {double? elevation}
    double? elevation,
// param: {double? focusElevation}
    double? focusElevation,
// param: {double? hoverElevation}
    double? hoverElevation,
// param: {double? highlightElevation}
    double? highlightElevation,
// param: {double? disabledElevation}
    double? disabledElevation,
// param: {required void Function()? onPressed}
    required void Function()? onPressed,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {ShapeBorder? shape}
    ShapeBorder? shape,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) {}

  /// FloatingActionButton FloatingActionButton.extended({Key? key, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, Color? splashColor, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor = SystemMouseCursors.click, ShapeBorder? shape, bool isExtended = true, MaterialTapTargetSize? materialTapTargetSize, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, double? extendedIconLabelSpacing, EdgeInsetsGeometry? extendedPadding, TextStyle? extendedTextStyle, Widget? icon, required Widget label, bool? enableFeedback})
  FloatingActionButtonMate.extended({
// param: {Key? key}
    Key? key,
// param: {String? tooltip}
    String? tooltip,
// param: {Color? foregroundColor}
    Color? foregroundColor,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? focusColor}
    Color? focusColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {Object? heroTag = const _DefaultHeroTag()}
    Object? heroTag,
// param: {double? elevation}
    double? elevation,
// param: {double? focusElevation}
    double? focusElevation,
// param: {double? hoverElevation}
    double? hoverElevation,
// param: {Color? splashColor}
    Color? splashColor,
// param: {double? highlightElevation}
    double? highlightElevation,
// param: {double? disabledElevation}
    double? disabledElevation,
// param: {required void Function()? onPressed}
    required void Function()? onPressed,
// param: {MouseCursor? mouseCursor = SystemMouseCursors.click}
    MouseCursor? mouseCursor,
// param: {ShapeBorder? shape}
    ShapeBorder? shape,
// param: {bool isExtended = true}
    required bool isExtended,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {double? extendedIconLabelSpacing}
    double? extendedIconLabelSpacing,
// param: {EdgeInsetsGeometry? extendedPadding}
    EdgeInsetsGeometry? extendedPadding,
// param: {TextStyle? extendedTextStyle}
    TextStyle? extendedTextStyle,
// param: {Widget? icon}
    Widget? icon,
// param: {required Widget label}
    required Widget label,
// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) {}
}
