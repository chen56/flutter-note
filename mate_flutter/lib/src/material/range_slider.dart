// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.293642

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class RangeSlider extends StatefulWidget
class RangeSliderMate {
  /// RangeSlider RangeSlider({Key? key, required RangeValues values, required void Function(RangeValues)? onChanged, void Function(RangeValues)? onChangeStart, void Function(RangeValues)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, RangeLabels? labels, Color? activeColor, Color? inactiveColor, MaterialStateProperty<Color?>? overlayColor, MaterialStateProperty<MouseCursor?>? mouseCursor, String Function(double)? semanticFormatterCallback})
  RangeSliderMate({
// param: {Key? key}
    Key? key,
// param: {required RangeValues values}
    required RangeValues values,
// param: {required void Function(RangeValues)? onChanged}
    required void Function(
      RangeValues, [
      RangeValues,
    ])?
        onChanged,
// param: {void Function(RangeValues)? onChangeStart}
    void Function(
      RangeValues, [
      RangeValues,
    ])?
        onChangeStart,
// param: {void Function(RangeValues)? onChangeEnd}
    void Function(
      RangeValues, [
      RangeValues,
    ])?
        onChangeEnd,
// param: {double min = 0.0}
    required double min,
// param: {double max = 1.0}
    required double max,
// param: {int? divisions}
    int? divisions,
// param: {RangeLabels? labels}
    RangeLabels? labels,
// param: {Color? activeColor}
    Color? activeColor,
// param: {Color? inactiveColor}
    Color? inactiveColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,
// param: {String Function(double)? semanticFormatterCallback}
    String Function(
      double, [
      double,
    ])?
        semanticFormatterCallback,
  }) {}
}
