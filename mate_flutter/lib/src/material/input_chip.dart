// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.078893

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';

/// class InputChip extends StatelessWidget implements ChipAttributes, DeletableChipAttributes, SelectableChipAttributes, CheckmarkableChipAttributes, DisabledChipAttributes, TappableChipAttributes
class InputChipMate {
  /// InputChip InputChip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, bool selected = false, bool isEnabled = true, void Function(bool)? onSelected, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, void Function()? onPressed, double? pressElevation, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder(), bool useDeleteButtonTooltip = true})
  InputChipMate({
// param: {Key? key}
    Key? key,
// param: {Widget? avatar}
    Widget? avatar,
// param: {required Widget label}
    required Widget label,
// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,
// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,
// param: {bool selected = false}
    required bool selected,
// param: {bool isEnabled = true}
    required bool isEnabled,
// param: {void Function(bool)? onSelected}
    void Function(
      bool, [
      bool,
    ])?
        onSelected,
// param: {Widget? deleteIcon}
    Widget? deleteIcon,
// param: {void Function()? onDeleted}
    void Function()? onDeleted,
// param: {Color? deleteIconColor}
    Color? deleteIconColor,
// param: {String? deleteButtonTooltipMessage}
    String? deleteButtonTooltipMessage,
// param: {void Function()? onPressed}
    void Function()? onPressed,
// param: {double? pressElevation}
    double? pressElevation,
// param: {Color? disabledColor}
    Color? disabledColor,
// param: {Color? selectedColor}
    Color? selectedColor,
// param: {String? tooltip}
    String? tooltip,
// param: {BorderSide? side}
    BorderSide? side,
// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,
// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {double? elevation}
    double? elevation,
// param: {Color? shadowColor}
    Color? shadowColor,
// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,
// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,
// param: {Color? selectedShadowColor}
    Color? selectedShadowColor,
// param: {bool? showCheckmark}
    bool? showCheckmark,
// param: {Color? checkmarkColor}
    Color? checkmarkColor,
// param: {ShapeBorder avatarBorder = const CircleBorder()}
    required ShapeBorder avatarBorder,
// param: {bool useDeleteButtonTooltip = true}
    required bool useDeleteButtonTooltip,
  }) {}
}
