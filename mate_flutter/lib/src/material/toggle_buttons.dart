// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:12.203606

library;

import 'package:flutter/src/material/toggle_buttons.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/rendering/box.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/basic_types.dart';

/// class ToggleButtons extends StatelessWidget
class ToggleButtonsMate extends ToggleButtons {
  /// ToggleButtons ToggleButtons({Key? key, required List<Widget> children, required List<bool> isSelected, void Function(int)? onPressed, MouseCursor? mouseCursor, MaterialTapTargetSize? tapTargetSize, TextStyle? textStyle, BoxConstraints? constraints, Color? color, Color? selectedColor, Color? disabledColor, Color? fillColor, Color? focusColor, Color? highlightColor, Color? hoverColor, Color? splashColor, List<FocusNode>? focusNodes, bool renderBorder = true, Color? borderColor, Color? selectedBorderColor, Color? disabledBorderColor, BorderRadius? borderRadius, double? borderWidth, Axis direction = Axis.horizontal, VerticalDirection verticalDirection = VerticalDirection.down})
  ToggleButtonsMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<Widget> children}
    required List<Widget> children,

    /// param: {required List<bool> isSelected}
    required List<bool> isSelected,

    /// param: {void Function(int)? onPressed}
    void Function(
      int, [
      int,
    ])?
        onPressed,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {MaterialTapTargetSize? tapTargetSize}
    MaterialTapTargetSize? tapTargetSize,

    /// param: {TextStyle? textStyle}
    TextStyle? textStyle,

    /// param: {BoxConstraints? constraints}
    BoxConstraints? constraints,

    /// param: {Color? color}
    Color? color,

    /// param: {Color? selectedColor}
    Color? selectedColor,

    /// param: {Color? disabledColor}
    Color? disabledColor,

    /// param: {Color? fillColor}
    Color? fillColor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {List<FocusNode>? focusNodes}
    List<FocusNode>? focusNodes,

    /// param: {bool renderBorder = true}
    required bool renderBorder,

    /// param: {Color? borderColor}
    Color? borderColor,

    /// param: {Color? selectedBorderColor}
    Color? selectedBorderColor,

    /// param: {Color? disabledBorderColor}
    Color? disabledBorderColor,

    /// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,

    /// param: {double? borderWidth}
    double? borderWidth,

    /// param: {Axis direction = Axis.horizontal}
    required Axis direction,

    /// param: {VerticalDirection verticalDirection = VerticalDirection.down}
    required VerticalDirection verticalDirection,
  }) : super(
          key: key,
          children: children,
          isSelected: isSelected,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          tapTargetSize: tapTargetSize,
          textStyle: textStyle,
          constraints: constraints,
          color: color,
          selectedColor: selectedColor,
          disabledColor: disabledColor,
          fillColor: fillColor,
          focusColor: focusColor,
          highlightColor: highlightColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          focusNodes: focusNodes,
          renderBorder: renderBorder,
          borderColor: borderColor,
          selectedBorderColor: selectedBorderColor,
          disabledBorderColor: disabledBorderColor,
          borderRadius: borderRadius,
          borderWidth: borderWidth,
          direction: direction,
          verticalDirection: verticalDirection,
        ) {}
}
