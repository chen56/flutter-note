// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.271941

library;

import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';

/// abstract class ProgressIndicator extends StatefulWidget
abstract class ProgressIndicatorMate {
  /// ProgressIndicator ProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, String? semanticsLabel, String? semanticsValue})
  ProgressIndicatorMate({
// param: {Key? key}
    Key? key,
// param: {double? value}
    double? value,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? color}
    Color? color,
// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {String? semanticsValue}
    String? semanticsValue,
  }) {}
}

/// class LinearProgressIndicator extends ProgressIndicator
class LinearProgressIndicatorMate {
  /// LinearProgressIndicator LinearProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double? minHeight, String? semanticsLabel, String? semanticsValue})
  LinearProgressIndicatorMate({
// param: {Key? key}
    Key? key,
// param: {double? value}
    double? value,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? color}
    Color? color,
// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,
// param: {double? minHeight}
    double? minHeight,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {String? semanticsValue}
    String? semanticsValue,
  }) {}
}

/// class CircularProgressIndicator extends ProgressIndicator
class CircularProgressIndicatorMate {
  /// CircularProgressIndicator CircularProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue})
  CircularProgressIndicatorMate({
// param: {Key? key}
    Key? key,
// param: {double? value}
    double? value,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? color}
    Color? color,
// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,
// param: {double strokeWidth = 4.0}
    required double strokeWidth,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {String? semanticsValue}
    String? semanticsValue,
  }) {}

  /// CircularProgressIndicator CircularProgressIndicator.adaptive({Key? key, double? value, Color? backgroundColor, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue})
  CircularProgressIndicatorMate.adaptive({
// param: {Key? key}
    Key? key,
// param: {double? value}
    double? value,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,
// param: {double strokeWidth = 4.0}
    required double strokeWidth,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {String? semanticsValue}
    String? semanticsValue,
  }) {}
}

/// class RefreshProgressIndicator extends CircularProgressIndicator
class RefreshProgressIndicatorMate {
  /// RefreshProgressIndicator RefreshProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = defaultStrokeWidth, String? semanticsLabel, String? semanticsValue})
  RefreshProgressIndicatorMate({
// param: {Key? key}
    Key? key,
// param: {double? value}
    double? value,
// param: {Color? backgroundColor}
    Color? backgroundColor,
// param: {Color? color}
    Color? color,
// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,
// param: {double strokeWidth = defaultStrokeWidth}
    required double strokeWidth,
// param: {String? semanticsLabel}
    String? semanticsLabel,
// param: {String? semanticsValue}
    String? semanticsValue,
  }) {}
}
