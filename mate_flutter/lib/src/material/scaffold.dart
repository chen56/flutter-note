// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:16.347156

import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/preferred_size.dart';
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class ScaffoldMessenger extends StatefulWidget
class ScaffoldMessengerMate extends ScaffoldMessenger {
  /// ScaffoldMessenger ScaffoldMessenger({Key? key, required Widget child})
  ScaffoldMessengerMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {}
}

/// class ScaffoldPrelayoutGeometry
class ScaffoldPrelayoutGeometryMate extends ScaffoldPrelayoutGeometry {
  /// ScaffoldPrelayoutGeometry ScaffoldPrelayoutGeometry({required Size bottomSheetSize, required double contentBottom, required double contentTop, required Size floatingActionButtonSize, required EdgeInsets minInsets, required EdgeInsets minViewPadding, required Size scaffoldSize, required Size snackBarSize, required Size materialBannerSize, required TextDirection textDirection})
  ScaffoldPrelayoutGeometryMate({
    /// param: {required Size bottomSheetSize}
    required Size bottomSheetSize,

    /// param: {required double contentBottom}
    required double contentBottom,

    /// param: {required double contentTop}
    required double contentTop,

    /// param: {required Size floatingActionButtonSize}
    required Size floatingActionButtonSize,

    /// param: {required EdgeInsets minInsets}
    required EdgeInsets minInsets,

    /// param: {required EdgeInsets minViewPadding}
    required EdgeInsets minViewPadding,

    /// param: {required Size scaffoldSize}
    required Size scaffoldSize,

    /// param: {required Size snackBarSize}
    required Size snackBarSize,

    /// param: {required Size materialBannerSize}
    required Size materialBannerSize,

    /// param: {required TextDirection textDirection}
    required TextDirection textDirection,
  }) : super(
          bottomSheetSize: bottomSheetSize,
          contentBottom: contentBottom,
          contentTop: contentTop,
          floatingActionButtonSize: floatingActionButtonSize,
          minInsets: minInsets,
          minViewPadding: minViewPadding,
          scaffoldSize: scaffoldSize,
          snackBarSize: snackBarSize,
          materialBannerSize: materialBannerSize,
          textDirection: textDirection,
        ) {}
}

/// class ScaffoldGeometry
class ScaffoldGeometryMate extends ScaffoldGeometry {
  /// ScaffoldGeometry ScaffoldGeometry({double? bottomNavigationBarTop, Rect? floatingActionButtonArea})
  ScaffoldGeometryMate({
    /// param: {double? bottomNavigationBarTop}
    double? bottomNavigationBarTop,

    /// param: {Rect? floatingActionButtonArea}
    Rect? floatingActionButtonArea,
  }) : super(
          bottomNavigationBarTop: bottomNavigationBarTop,
          floatingActionButtonArea: floatingActionButtonArea,
        ) {}
}

/// class Scaffold extends StatefulWidget
class ScaffoldMate extends Scaffold {
  /// Scaffold Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd, Widget? drawer, void Function(bool)? onDrawerChanged, Widget? endDrawer, void Function(bool)? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary = true, DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start, bool extendBody = false, bool extendBodyBehindAppBar = false, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture = true, bool endDrawerEnableOpenDragGesture = true, String? restorationId})
  ScaffoldMate({
    /// param: {Key? key}
    Key? key,

    /// param: {PreferredSizeWidget? appBar}
    PreferredSizeWidget? appBar,

    /// param: {Widget? body}
    Widget? body,

    /// param: {Widget? floatingActionButton}
    Widget? floatingActionButton,

    /// param: {FloatingActionButtonLocation? floatingActionButtonLocation}
    FloatingActionButtonLocation? floatingActionButtonLocation,

    /// param: {FloatingActionButtonAnimator? floatingActionButtonAnimator}
    FloatingActionButtonAnimator? floatingActionButtonAnimator,

    /// param: {List<Widget>? persistentFooterButtons}
    List<Widget>? persistentFooterButtons,

    /// param: {AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd}
    required AlignmentDirectional persistentFooterAlignment,

    /// param: {Widget? drawer}
    Widget? drawer,

    /// param: {void Function(bool)? onDrawerChanged}
    DrawerCallback? onDrawerChanged,

    /// param: {Widget? endDrawer}
    Widget? endDrawer,

    /// param: {void Function(bool)? onEndDrawerChanged}
    DrawerCallback? onEndDrawerChanged,

    /// param: {Widget? bottomNavigationBar}
    Widget? bottomNavigationBar,

    /// param: {Widget? bottomSheet}
    Widget? bottomSheet,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {bool? resizeToAvoidBottomInset}
    bool? resizeToAvoidBottomInset,

    /// param: {bool primary = true}
    required bool primary,

    /// param: {DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior drawerDragStartBehavior,

    /// param: {bool extendBody = false}
    required bool extendBody,

    /// param: {bool extendBodyBehindAppBar = false}
    required bool extendBodyBehindAppBar,

    /// param: {Color? drawerScrimColor}
    Color? drawerScrimColor,

    /// param: {double? drawerEdgeDragWidth}
    double? drawerEdgeDragWidth,

    /// param: {bool drawerEnableOpenDragGesture = true}
    required bool drawerEnableOpenDragGesture,

    /// param: {bool endDrawerEnableOpenDragGesture = true}
    required bool endDrawerEnableOpenDragGesture,

    /// param: {String? restorationId}
    String? restorationId,
  }) : super(
          key: key,
          appBar: appBar,
          body: body,
          floatingActionButton: floatingActionButton,
          floatingActionButtonLocation: floatingActionButtonLocation,
          floatingActionButtonAnimator: floatingActionButtonAnimator,
          persistentFooterButtons: persistentFooterButtons,
          persistentFooterAlignment: persistentFooterAlignment,
          drawer: drawer,
          onDrawerChanged: onDrawerChanged,
          endDrawer: endDrawer,
          onEndDrawerChanged: onEndDrawerChanged,
          bottomNavigationBar: bottomNavigationBar,
          bottomSheet: bottomSheet,
          backgroundColor: backgroundColor,
          resizeToAvoidBottomInset: resizeToAvoidBottomInset,
          primary: primary,
          drawerDragStartBehavior: drawerDragStartBehavior,
          extendBody: extendBody,
          extendBodyBehindAppBar: extendBodyBehindAppBar,
          drawerScrimColor: drawerScrimColor,
          drawerEdgeDragWidth: drawerEdgeDragWidth,
          drawerEnableOpenDragGesture: drawerEnableOpenDragGesture,
          endDrawerEnableOpenDragGesture: endDrawerEnableOpenDragGesture,
          restorationId: restorationId,
        ) {}
}
