// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:11.840127

library;

import 'package:flutter/src/material/expansion_panel.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class ExpansionPanel
class ExpansionPanelMate extends ExpansionPanel {
  /// ExpansionPanel ExpansionPanel({required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool isExpanded = false, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanelMate({
    /// param: {required Widget Function(BuildContext, bool) headerBuilder}
    required ExpansionPanelHeaderBuilder headerBuilder,

    /// param: {required Widget body}
    required Widget body,

    /// param: {bool isExpanded = false}
    required bool isExpanded,

    /// param: {bool canTapOnHeader = false}
    required bool canTapOnHeader,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) : super(
          headerBuilder: headerBuilder,
          body: body,
          isExpanded: isExpanded,
          canTapOnHeader: canTapOnHeader,
          backgroundColor: backgroundColor,
        ) {}
}

/// class ExpansionPanelRadio extends ExpansionPanel
class ExpansionPanelRadioMate extends ExpansionPanelRadio {
  /// ExpansionPanelRadio ExpansionPanelRadio({required Object value, required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanelRadioMate({
    /// param: {required Object value}
    required Object value,

    /// param: {required Widget Function(BuildContext, bool) headerBuilder}
    required ExpansionPanelHeaderBuilder headerBuilder,

    /// param: {required Widget body}
    required Widget body,

    /// param: {bool canTapOnHeader = false}
    required bool canTapOnHeader,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) : super(
          value: value,
          headerBuilder: headerBuilder,
          body: body,
          canTapOnHeader: canTapOnHeader,
          backgroundColor: backgroundColor,
        ) {}
}

/// class ExpansionPanelList extends StatefulWidget
class ExpansionPanelListMate extends ExpansionPanelList {
  /// ExpansionPanelList ExpansionPanelList({Key? key, List<ExpansionPanel> children = const <ExpansionPanel>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelListMate({
    /// param: {Key? key}
    Key? key,

    /// param: {List<ExpansionPanel> children = const <ExpansionPanel>[]}
    required List<ExpansionPanel> children,

    /// param: {void Function(int, bool)? expansionCallback}
    ExpansionPanelCallback? expansionCallback,

    /// param: {Duration animationDuration = kThemeAnimationDuration}
    required Duration animationDuration,

    /// param: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding}
    required EdgeInsets expandedHeaderPadding,

    /// param: {Color? dividerColor}
    Color? dividerColor,

    /// param: {double elevation = 2}
    required double elevation,

    /// param: {Color? expandIconColor}
    Color? expandIconColor,
  }) : super(
          key: key,
          children: children,
          expansionCallback: expansionCallback,
          animationDuration: animationDuration,
          expandedHeaderPadding: expandedHeaderPadding,
          dividerColor: dividerColor,
          elevation: elevation,
          expandIconColor: expandIconColor,
        ) {}

  /// ExpansionPanelList ExpansionPanelList.radio({Key? key, List<ExpansionPanel> children = const <ExpansionPanelRadio>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, Object? initialOpenPanelValue, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelListMate.radio({
    /// param: {Key? key}
    Key? key,

    /// param: {List<ExpansionPanel> children = const <ExpansionPanelRadio>[]}
    required List<ExpansionPanel> children,

    /// param: {void Function(int, bool)? expansionCallback}
    ExpansionPanelCallback? expansionCallback,

    /// param: {Duration animationDuration = kThemeAnimationDuration}
    required Duration animationDuration,

    /// param: {Object? initialOpenPanelValue}
    Object? initialOpenPanelValue,

    /// param: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding}
    required EdgeInsets expandedHeaderPadding,

    /// param: {Color? dividerColor}
    Color? dividerColor,

    /// param: {double elevation = 2}
    required double elevation,

    /// param: {Color? expandIconColor}
    Color? expandIconColor,
  }) : super.radio(
          key: key,
          children: children,
          expansionCallback: expansionCallback,
          animationDuration: animationDuration,
          initialOpenPanelValue: initialOpenPanelValue,
          expandedHeaderPadding: expandedHeaderPadding,
          dividerColor: dividerColor,
          elevation: elevation,
          expandIconColor: expandIconColor,
        ) {}
}
