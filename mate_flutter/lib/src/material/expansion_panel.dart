// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:15:59.931647

library;

import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/expansion_panel.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class ExpansionPanel
class ExpansionPanelMate {
  /// ExpansionPanel ExpansionPanel({required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool isExpanded = false, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanelMate({
// param: {required Widget Function(BuildContext, bool) headerBuilder}
    required Widget Function(
      BuildContext,
      bool, [
      BuildContext,
      bool,
    ])
        headerBuilder,
// param: {required Widget body}
    required Widget body,
// param: {bool isExpanded = false}
    required bool isExpanded,
// param: {bool canTapOnHeader = false}
    required bool canTapOnHeader,
// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) {}
}

/// class ExpansionPanelRadio extends ExpansionPanel
class ExpansionPanelRadioMate {
  /// ExpansionPanelRadio ExpansionPanelRadio({required Object value, required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanelRadioMate({
// param: {required Object value}
    required Object value,
// param: {required Widget Function(BuildContext, bool) headerBuilder}
    required Widget Function(
      BuildContext,
      bool, [
      BuildContext,
      bool,
    ])
        headerBuilder,
// param: {required Widget body}
    required Widget body,
// param: {bool canTapOnHeader = false}
    required bool canTapOnHeader,
// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) {}
}

/// class ExpansionPanelList extends StatefulWidget
class ExpansionPanelListMate {
  /// ExpansionPanelList ExpansionPanelList({Key? key, List<ExpansionPanel> children = const <ExpansionPanel>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelListMate({
// param: {Key? key}
    Key? key,
// param: {List<ExpansionPanel> children = const <ExpansionPanel>[]}
    required List<ExpansionPanel> children,
// param: {void Function(int, bool)? expansionCallback}
    void Function(
      int,
      bool, [
      int,
      bool,
    ])?
        expansionCallback,
// param: {Duration animationDuration = kThemeAnimationDuration}
    required Duration animationDuration,
// param: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding}
    required EdgeInsets expandedHeaderPadding,
// param: {Color? dividerColor}
    Color? dividerColor,
// param: {double elevation = 2}
    required double elevation,
// param: {Color? expandIconColor}
    Color? expandIconColor,
  }) {}

  /// ExpansionPanelList ExpansionPanelList.radio({Key? key, List<ExpansionPanel> children = const <ExpansionPanelRadio>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, Object? initialOpenPanelValue, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelListMate.radio({
// param: {Key? key}
    Key? key,
// param: {List<ExpansionPanel> children = const <ExpansionPanelRadio>[]}
    required List<ExpansionPanel> children,
// param: {void Function(int, bool)? expansionCallback}
    void Function(
      int,
      bool, [
      int,
      bool,
    ])?
        expansionCallback,
// param: {Duration animationDuration = kThemeAnimationDuration}
    required Duration animationDuration,
// param: {Object? initialOpenPanelValue}
    Object? initialOpenPanelValue,
// param: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding}
    required EdgeInsets expandedHeaderPadding,
// param: {Color? dividerColor}
    Color? dividerColor,
// param: {double elevation = 2}
    required double elevation,
// param: {Color? expandIconColor}
    Color? expandIconColor,
  }) {}
}
