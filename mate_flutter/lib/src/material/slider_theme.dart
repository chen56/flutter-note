// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:16.376003

import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class SliderTheme extends InheritedTheme
class SliderThemeMate extends SliderTheme {
  /// SliderTheme SliderTheme({Key? key, required SliderThemeData data, required Widget child})
  SliderThemeMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliderThemeData data}
    required SliderThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {}
}

/// class SliderThemeData with Diagnosticable
class SliderThemeDataMate extends SliderThemeData {
  /// SliderThemeData SliderThemeData({double? trackHeight, Color? activeTrackColor, Color? inactiveTrackColor, Color? secondaryActiveTrackColor, Color? disabledActiveTrackColor, Color? disabledInactiveTrackColor, Color? disabledSecondaryActiveTrackColor, Color? activeTickMarkColor, Color? inactiveTickMarkColor, Color? disabledActiveTickMarkColor, Color? disabledInactiveTickMarkColor, Color? thumbColor, Color? overlappingShapeStrokeColor, Color? disabledThumbColor, Color? overlayColor, Color? valueIndicatorColor, SliderComponentShape? overlayShape, SliderTickMarkShape? tickMarkShape, SliderComponentShape? thumbShape, SliderTrackShape? trackShape, SliderComponentShape? valueIndicatorShape, RangeSliderTickMarkShape? rangeTickMarkShape, RangeSliderThumbShape? rangeThumbShape, RangeSliderTrackShape? rangeTrackShape, RangeSliderValueIndicatorShape? rangeValueIndicatorShape, ShowValueIndicator? showValueIndicator, TextStyle? valueIndicatorTextStyle, double? minThumbSeparation, Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector, MaterialStateProperty<MouseCursor?>? mouseCursor})
  SliderThemeDataMate({
    /// param: {double? trackHeight}
    double? trackHeight,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {Color? secondaryActiveTrackColor}
    Color? secondaryActiveTrackColor,

    /// param: {Color? disabledActiveTrackColor}
    Color? disabledActiveTrackColor,

    /// param: {Color? disabledInactiveTrackColor}
    Color? disabledInactiveTrackColor,

    /// param: {Color? disabledSecondaryActiveTrackColor}
    Color? disabledSecondaryActiveTrackColor,

    /// param: {Color? activeTickMarkColor}
    Color? activeTickMarkColor,

    /// param: {Color? inactiveTickMarkColor}
    Color? inactiveTickMarkColor,

    /// param: {Color? disabledActiveTickMarkColor}
    Color? disabledActiveTickMarkColor,

    /// param: {Color? disabledInactiveTickMarkColor}
    Color? disabledInactiveTickMarkColor,

    /// param: {Color? thumbColor}
    Color? thumbColor,

    /// param: {Color? overlappingShapeStrokeColor}
    Color? overlappingShapeStrokeColor,

    /// param: {Color? disabledThumbColor}
    Color? disabledThumbColor,

    /// param: {Color? overlayColor}
    Color? overlayColor,

    /// param: {Color? valueIndicatorColor}
    Color? valueIndicatorColor,

    /// param: {SliderComponentShape? overlayShape}
    SliderComponentShape? overlayShape,

    /// param: {SliderTickMarkShape? tickMarkShape}
    SliderTickMarkShape? tickMarkShape,

    /// param: {SliderComponentShape? thumbShape}
    SliderComponentShape? thumbShape,

    /// param: {SliderTrackShape? trackShape}
    SliderTrackShape? trackShape,

    /// param: {SliderComponentShape? valueIndicatorShape}
    SliderComponentShape? valueIndicatorShape,

    /// param: {RangeSliderTickMarkShape? rangeTickMarkShape}
    RangeSliderTickMarkShape? rangeTickMarkShape,

    /// param: {RangeSliderThumbShape? rangeThumbShape}
    RangeSliderThumbShape? rangeThumbShape,

    /// param: {RangeSliderTrackShape? rangeTrackShape}
    RangeSliderTrackShape? rangeTrackShape,

    /// param: {RangeSliderValueIndicatorShape? rangeValueIndicatorShape}
    RangeSliderValueIndicatorShape? rangeValueIndicatorShape,

    /// param: {ShowValueIndicator? showValueIndicator}
    ShowValueIndicator? showValueIndicator,

    /// param: {TextStyle? valueIndicatorTextStyle}
    TextStyle? valueIndicatorTextStyle,

    /// param: {double? minThumbSeparation}
    double? minThumbSeparation,

    /// param: {Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector}
    RangeThumbSelector? thumbSelector,

    /// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          trackHeight: trackHeight,
          activeTrackColor: activeTrackColor,
          inactiveTrackColor: inactiveTrackColor,
          secondaryActiveTrackColor: secondaryActiveTrackColor,
          disabledActiveTrackColor: disabledActiveTrackColor,
          disabledInactiveTrackColor: disabledInactiveTrackColor,
          disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
          activeTickMarkColor: activeTickMarkColor,
          inactiveTickMarkColor: inactiveTickMarkColor,
          disabledActiveTickMarkColor: disabledActiveTickMarkColor,
          disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
          thumbColor: thumbColor,
          overlappingShapeStrokeColor: overlappingShapeStrokeColor,
          disabledThumbColor: disabledThumbColor,
          overlayColor: overlayColor,
          valueIndicatorColor: valueIndicatorColor,
          overlayShape: overlayShape,
          tickMarkShape: tickMarkShape,
          thumbShape: thumbShape,
          trackShape: trackShape,
          valueIndicatorShape: valueIndicatorShape,
          rangeTickMarkShape: rangeTickMarkShape,
          rangeThumbShape: rangeThumbShape,
          rangeTrackShape: rangeTrackShape,
          rangeValueIndicatorShape: rangeValueIndicatorShape,
          showValueIndicator: showValueIndicator,
          valueIndicatorTextStyle: valueIndicatorTextStyle,
          minThumbSeparation: minThumbSeparation,
          thumbSelector: thumbSelector,
          mouseCursor: mouseCursor,
        ) {}
}

/// class RoundSliderTickMarkShape extends SliderTickMarkShape
class RoundSliderTickMarkShapeMate extends RoundSliderTickMarkShape {
  /// RoundSliderTickMarkShape RoundSliderTickMarkShape({double? tickMarkRadius})
  RoundSliderTickMarkShapeMate(
      {
      /// param: {double? tickMarkRadius}
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {}
}

/// class RoundRangeSliderTickMarkShape extends RangeSliderTickMarkShape
class RoundRangeSliderTickMarkShapeMate extends RoundRangeSliderTickMarkShape {
  /// RoundRangeSliderTickMarkShape RoundRangeSliderTickMarkShape({double? tickMarkRadius})
  RoundRangeSliderTickMarkShapeMate(
      {
      /// param: {double? tickMarkRadius}
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {}
}

/// class RoundSliderThumbShape extends SliderComponentShape
class RoundSliderThumbShapeMate extends RoundSliderThumbShape {
  /// RoundSliderThumbShape RoundSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundSliderThumbShapeMate({
    /// param: {double enabledThumbRadius = 10.0}
    required double enabledThumbRadius,

    /// param: {double? disabledThumbRadius}
    double? disabledThumbRadius,

    /// param: {double elevation = 1.0}
    required double elevation,

    /// param: {double pressedElevation = 6.0}
    required double pressedElevation,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {}
}

/// class RoundRangeSliderThumbShape extends RangeSliderThumbShape
class RoundRangeSliderThumbShapeMate extends RoundRangeSliderThumbShape {
  /// RoundRangeSliderThumbShape RoundRangeSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundRangeSliderThumbShapeMate({
    /// param: {double enabledThumbRadius = 10.0}
    required double enabledThumbRadius,

    /// param: {double? disabledThumbRadius}
    double? disabledThumbRadius,

    /// param: {double elevation = 1.0}
    required double elevation,

    /// param: {double pressedElevation = 6.0}
    required double pressedElevation,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {}
}

/// class RoundSliderOverlayShape extends SliderComponentShape
class RoundSliderOverlayShapeMate extends RoundSliderOverlayShape {
  /// RoundSliderOverlayShape RoundSliderOverlayShape({double overlayRadius = 24.0})
  RoundSliderOverlayShapeMate(
      {
      /// param: {double overlayRadius = 24.0}
      required double overlayRadius})
      : super(overlayRadius: overlayRadius) {}
}

/// class RangeValues
class RangeValuesMate extends RangeValues {
  /// RangeValues RangeValues(double start, double end)
  RangeValuesMate(
    /// param: double start
    double start,

    /// param: double end
    double end,
  ) : super(
          start,
          end,
        ) {}
}

/// class RangeLabels
class RangeLabelsMate extends RangeLabels {
  /// RangeLabels RangeLabels(String start, String end)
  RangeLabelsMate(
    /// param: String start
    String start,

    /// param: String end
    String end,
  ) : super(
          start,
          end,
        ) {}
}
