// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.350855

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class SliderTheme extends InheritedTheme
class SliderThemeMate {
  /// SliderTheme SliderTheme({Key? key, required SliderThemeData data, required Widget child})
  SliderThemeMate({
// param: {Key? key}
    Key? key,
// param: {required SliderThemeData data}
    required SliderThemeData data,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class SliderThemeData with Diagnosticable
class SliderThemeDataMate {
  /// SliderThemeData SliderThemeData({double? trackHeight, Color? activeTrackColor, Color? inactiveTrackColor, Color? secondaryActiveTrackColor, Color? disabledActiveTrackColor, Color? disabledInactiveTrackColor, Color? disabledSecondaryActiveTrackColor, Color? activeTickMarkColor, Color? inactiveTickMarkColor, Color? disabledActiveTickMarkColor, Color? disabledInactiveTickMarkColor, Color? thumbColor, Color? overlappingShapeStrokeColor, Color? disabledThumbColor, Color? overlayColor, Color? valueIndicatorColor, SliderComponentShape? overlayShape, SliderTickMarkShape? tickMarkShape, SliderComponentShape? thumbShape, SliderTrackShape? trackShape, SliderComponentShape? valueIndicatorShape, RangeSliderTickMarkShape? rangeTickMarkShape, RangeSliderThumbShape? rangeThumbShape, RangeSliderTrackShape? rangeTrackShape, RangeSliderValueIndicatorShape? rangeValueIndicatorShape, ShowValueIndicator? showValueIndicator, TextStyle? valueIndicatorTextStyle, double? minThumbSeparation, Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector, MaterialStateProperty<MouseCursor?>? mouseCursor})
  SliderThemeDataMate({
// param: {double? trackHeight}
    double? trackHeight,
// param: {Color? activeTrackColor}
    Color? activeTrackColor,
// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,
// param: {Color? secondaryActiveTrackColor}
    Color? secondaryActiveTrackColor,
// param: {Color? disabledActiveTrackColor}
    Color? disabledActiveTrackColor,
// param: {Color? disabledInactiveTrackColor}
    Color? disabledInactiveTrackColor,
// param: {Color? disabledSecondaryActiveTrackColor}
    Color? disabledSecondaryActiveTrackColor,
// param: {Color? activeTickMarkColor}
    Color? activeTickMarkColor,
// param: {Color? inactiveTickMarkColor}
    Color? inactiveTickMarkColor,
// param: {Color? disabledActiveTickMarkColor}
    Color? disabledActiveTickMarkColor,
// param: {Color? disabledInactiveTickMarkColor}
    Color? disabledInactiveTickMarkColor,
// param: {Color? thumbColor}
    Color? thumbColor,
// param: {Color? overlappingShapeStrokeColor}
    Color? overlappingShapeStrokeColor,
// param: {Color? disabledThumbColor}
    Color? disabledThumbColor,
// param: {Color? overlayColor}
    Color? overlayColor,
// param: {Color? valueIndicatorColor}
    Color? valueIndicatorColor,
// param: {SliderComponentShape? overlayShape}
    SliderComponentShape? overlayShape,
// param: {SliderTickMarkShape? tickMarkShape}
    SliderTickMarkShape? tickMarkShape,
// param: {SliderComponentShape? thumbShape}
    SliderComponentShape? thumbShape,
// param: {SliderTrackShape? trackShape}
    SliderTrackShape? trackShape,
// param: {SliderComponentShape? valueIndicatorShape}
    SliderComponentShape? valueIndicatorShape,
// param: {RangeSliderTickMarkShape? rangeTickMarkShape}
    RangeSliderTickMarkShape? rangeTickMarkShape,
// param: {RangeSliderThumbShape? rangeThumbShape}
    RangeSliderThumbShape? rangeThumbShape,
// param: {RangeSliderTrackShape? rangeTrackShape}
    RangeSliderTrackShape? rangeTrackShape,
// param: {RangeSliderValueIndicatorShape? rangeValueIndicatorShape}
    RangeSliderValueIndicatorShape? rangeValueIndicatorShape,
// param: {ShowValueIndicator? showValueIndicator}
    ShowValueIndicator? showValueIndicator,
// param: {TextStyle? valueIndicatorTextStyle}
    TextStyle? valueIndicatorTextStyle,
// param: {double? minThumbSeparation}
    double? minThumbSeparation,
// param: {Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector}
    Thumb? Function(
      TextDirection,
      RangeValues,
      double,
      Size,
      Size,
      double, [
      TextDirection,
      RangeValues,
      double,
      Size,
      Size,
      double,
    ])?
        thumbSelector,
// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) {}
}

/// abstract class SliderComponentShape
abstract class SliderComponentShapeMate {
  /// SliderComponentShape SliderComponentShape()
  SliderComponentShapeMate() {}
}

/// abstract class SliderTickMarkShape
abstract class SliderTickMarkShapeMate {
  /// SliderTickMarkShape SliderTickMarkShape()
  SliderTickMarkShapeMate() {}
}

/// abstract class SliderTrackShape
abstract class SliderTrackShapeMate {
  /// SliderTrackShape SliderTrackShape()
  SliderTrackShapeMate() {}
}

/// abstract class RangeSliderThumbShape
abstract class RangeSliderThumbShapeMate {
  /// RangeSliderThumbShape RangeSliderThumbShape()
  RangeSliderThumbShapeMate() {}
}

/// abstract class RangeSliderValueIndicatorShape
abstract class RangeSliderValueIndicatorShapeMate {
  /// RangeSliderValueIndicatorShape RangeSliderValueIndicatorShape()
  RangeSliderValueIndicatorShapeMate() {}
}

/// abstract class RangeSliderTickMarkShape
abstract class RangeSliderTickMarkShapeMate {
  /// RangeSliderTickMarkShape RangeSliderTickMarkShape()
  RangeSliderTickMarkShapeMate() {}
}

/// abstract class RangeSliderTrackShape
abstract class RangeSliderTrackShapeMate {
  /// RangeSliderTrackShape RangeSliderTrackShape()
  RangeSliderTrackShapeMate() {}
}

/// class RectangularSliderTrackShape extends SliderTrackShape with BaseSliderTrackShape
class RectangularSliderTrackShapeMate {
  /// RectangularSliderTrackShape RectangularSliderTrackShape()
  RectangularSliderTrackShapeMate() {}
}

/// class RoundedRectSliderTrackShape extends SliderTrackShape with BaseSliderTrackShape
class RoundedRectSliderTrackShapeMate {
  /// RoundedRectSliderTrackShape RoundedRectSliderTrackShape()
  RoundedRectSliderTrackShapeMate() {}
}

/// class RectangularRangeSliderTrackShape extends RangeSliderTrackShape
class RectangularRangeSliderTrackShapeMate {
  /// RectangularRangeSliderTrackShape RectangularRangeSliderTrackShape()
  RectangularRangeSliderTrackShapeMate() {}
}

/// class RoundedRectRangeSliderTrackShape extends RangeSliderTrackShape
class RoundedRectRangeSliderTrackShapeMate {
  /// RoundedRectRangeSliderTrackShape RoundedRectRangeSliderTrackShape()
  RoundedRectRangeSliderTrackShapeMate() {}
}

/// class RoundSliderTickMarkShape extends SliderTickMarkShape
class RoundSliderTickMarkShapeMate {
  /// RoundSliderTickMarkShape RoundSliderTickMarkShape({double? tickMarkRadius})
  RoundSliderTickMarkShapeMate(
      {
// param: {double? tickMarkRadius}
      double? tickMarkRadius}) {}
}

/// class RoundRangeSliderTickMarkShape extends RangeSliderTickMarkShape
class RoundRangeSliderTickMarkShapeMate {
  /// RoundRangeSliderTickMarkShape RoundRangeSliderTickMarkShape({double? tickMarkRadius})
  RoundRangeSliderTickMarkShapeMate(
      {
// param: {double? tickMarkRadius}
      double? tickMarkRadius}) {}
}

/// class RoundSliderThumbShape extends SliderComponentShape
class RoundSliderThumbShapeMate {
  /// RoundSliderThumbShape RoundSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundSliderThumbShapeMate({
// param: {double enabledThumbRadius = 10.0}
    required double enabledThumbRadius,
// param: {double? disabledThumbRadius}
    double? disabledThumbRadius,
// param: {double elevation = 1.0}
    required double elevation,
// param: {double pressedElevation = 6.0}
    required double pressedElevation,
  }) {}
}

/// class RoundRangeSliderThumbShape extends RangeSliderThumbShape
class RoundRangeSliderThumbShapeMate {
  /// RoundRangeSliderThumbShape RoundRangeSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundRangeSliderThumbShapeMate({
// param: {double enabledThumbRadius = 10.0}
    required double enabledThumbRadius,
// param: {double? disabledThumbRadius}
    double? disabledThumbRadius,
// param: {double elevation = 1.0}
    required double elevation,
// param: {double pressedElevation = 6.0}
    required double pressedElevation,
  }) {}
}

/// class RoundSliderOverlayShape extends SliderComponentShape
class RoundSliderOverlayShapeMate {
  /// RoundSliderOverlayShape RoundSliderOverlayShape({double overlayRadius = 24.0})
  RoundSliderOverlayShapeMate(
      {
// param: {double overlayRadius = 24.0}
      required double overlayRadius}) {}
}

/// class RectangularSliderValueIndicatorShape extends SliderComponentShape
class RectangularSliderValueIndicatorShapeMate {
  /// RectangularSliderValueIndicatorShape RectangularSliderValueIndicatorShape()
  RectangularSliderValueIndicatorShapeMate() {}
}

/// class RectangularRangeSliderValueIndicatorShape extends RangeSliderValueIndicatorShape
class RectangularRangeSliderValueIndicatorShapeMate {
  /// RectangularRangeSliderValueIndicatorShape RectangularRangeSliderValueIndicatorShape()
  RectangularRangeSliderValueIndicatorShapeMate() {}
}

/// class PaddleSliderValueIndicatorShape extends SliderComponentShape
class PaddleSliderValueIndicatorShapeMate {
  /// PaddleSliderValueIndicatorShape PaddleSliderValueIndicatorShape()
  PaddleSliderValueIndicatorShapeMate() {}
}

/// class PaddleRangeSliderValueIndicatorShape extends RangeSliderValueIndicatorShape
class PaddleRangeSliderValueIndicatorShapeMate {
  /// PaddleRangeSliderValueIndicatorShape PaddleRangeSliderValueIndicatorShape()
  PaddleRangeSliderValueIndicatorShapeMate() {}
}

/// class RangeValues
class RangeValuesMate {
  /// RangeValues RangeValues(double start, double end)
  RangeValuesMate(
// param: double start
    double start,
// param: double end
    double end,
  ) {}
}

/// class RangeLabels
class RangeLabelsMate {
  /// RangeLabels RangeLabels(String start, String end)
  RangeLabelsMate(
// param: String start
    String start,
// param: String end
    String end,
  ) {}
}

/// class DropSliderValueIndicatorShape extends SliderComponentShape
class DropSliderValueIndicatorShapeMate {
  /// DropSliderValueIndicatorShape DropSliderValueIndicatorShape()
  DropSliderValueIndicatorShapeMate() {}
}
