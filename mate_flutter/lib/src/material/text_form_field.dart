// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.870639

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/form.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/magnifier.dart';
export 'package:flutter/services.dart' show SmartDashesType, SmartQuotesType;

/// class TextFormField extends FormField<String>
class TextFormFieldMate {
  /// TextFormField TextFormField({Key? key, TextEditingController? controller, String? initialValue, FocusNode? focusNode, InputDecoration? decoration = const InputDecoration(), TextInputType? keyboardType, TextCapitalization textCapitalization = TextCapitalization.none, TextInputAction? textInputAction, TextStyle? style, StrutStyle? strutStyle, TextDirection? textDirection, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, bool autofocus = false, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, MaxLengthEnforcement? maxLengthEnforcement, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, void Function(String)? onChanged, void Function()? onTap, void Function(PointerDownEvent)? onTapOutside, void Function()? onEditingComplete, void Function(String)? onFieldSubmitted, void Function(String?)? onSaved, String? Function(String?)? validator, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), bool? enableInteractiveSelection, TextSelectionControls? selectionControls, Widget? Function(BuildContext, {required int currentLength, required bool isFocused, required int? maxLength})? buildCounter, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints, AutovalidateMode? autovalidateMode, ScrollController? scrollController, String? restorationId, bool enableIMEPersonalizedLearning = true, MouseCursor? mouseCursor, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  TextFormFieldMate({
// param: {Key? key}
    Key? key,
// param: {TextEditingController? controller}
    TextEditingController? controller,
// param: {String? initialValue}
    String? initialValue,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {InputDecoration? decoration = const InputDecoration()}
    InputDecoration? decoration,
// param: {TextInputType? keyboardType}
    TextInputType? keyboardType,
// param: {TextCapitalization textCapitalization = TextCapitalization.none}
    required TextCapitalization textCapitalization,
// param: {TextInputAction? textInputAction}
    TextInputAction? textInputAction,
// param: {TextStyle? style}
    TextStyle? style,
// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,
// param: {TextDirection? textDirection}
    TextDirection? textDirection,
// param: {TextAlign textAlign = TextAlign.start}
    required TextAlign textAlign,
// param: {TextAlignVertical? textAlignVertical}
    TextAlignVertical? textAlignVertical,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {bool readOnly = false}
    required bool readOnly,
// param: {ToolbarOptions? toolbarOptions}
    ToolbarOptions? toolbarOptions,
// param: {bool? showCursor}
    bool? showCursor,
// param: {String obscuringCharacter = '•'}
    required String obscuringCharacter,
// param: {bool obscureText = false}
    required bool obscureText,
// param: {bool autocorrect = true}
    required bool autocorrect,
// param: {SmartDashesType? smartDashesType}
    SmartDashesType? smartDashesType,
// param: {SmartQuotesType? smartQuotesType}
    SmartQuotesType? smartQuotesType,
// param: {bool enableSuggestions = true}
    required bool enableSuggestions,
// param: {MaxLengthEnforcement? maxLengthEnforcement}
    MaxLengthEnforcement? maxLengthEnforcement,
// param: {int? maxLines = 1}
    int? maxLines,
// param: {int? minLines}
    int? minLines,
// param: {bool expands = false}
    required bool expands,
// param: {int? maxLength}
    int? maxLength,
// param: {void Function(String)? onChanged}
    void Function(
      String, [
      String,
    ])?
        onChanged,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {void Function(PointerDownEvent)? onTapOutside}
    void Function(
      PointerDownEvent, [
      PointerDownEvent,
    ])?
        onTapOutside,
// param: {void Function()? onEditingComplete}
    void Function()? onEditingComplete,
// param: {void Function(String)? onFieldSubmitted}
    void Function(
      String, [
      String,
    ])?
        onFieldSubmitted,
// param: {void Function(String?)? onSaved}
    void Function(
      String?, [
      String?,
    ])?
        onSaved,
// param: {String? Function(String?)? validator}
    String? Function(
      String?, [
      String?,
    ])?
        validator,
// param: {List<TextInputFormatter>? inputFormatters}
    List<TextInputFormatter>? inputFormatters,
// param: {bool? enabled}
    bool? enabled,
// param: {double cursorWidth = 2.0}
    required double cursorWidth,
// param: {double? cursorHeight}
    double? cursorHeight,
// param: {Radius? cursorRadius}
    Radius? cursorRadius,
// param: {Color? cursorColor}
    Color? cursorColor,
// param: {Brightness? keyboardAppearance}
    Brightness? keyboardAppearance,
// param: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)}
    required EdgeInsets scrollPadding,
// param: {bool? enableInteractiveSelection}
    bool? enableInteractiveSelection,
// param: {TextSelectionControls? selectionControls}
    TextSelectionControls? selectionControls,
// param: {Widget? Function(BuildContext, {required int currentLength, required bool isFocused, required int? maxLength})? buildCounter}
    Widget? Function(
      BuildContext, [
      BuildContext,
    ])?
        buildCounter,
// param: {ScrollPhysics? scrollPhysics}
    ScrollPhysics? scrollPhysics,
// param: {Iterable<String>? autofillHints}
    Iterable<String>? autofillHints,
// param: {AutovalidateMode? autovalidateMode}
    AutovalidateMode? autovalidateMode,
// param: {ScrollController? scrollController}
    ScrollController? scrollController,
// param: {String? restorationId}
    String? restorationId,
// param: {bool enableIMEPersonalizedLearning = true}
    required bool enableIMEPersonalizedLearning,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder}
    Widget Function(
      BuildContext,
      EditableTextState, [
      BuildContext,
      EditableTextState,
    ])?
        contextMenuBuilder,
// param: {TextMagnifierConfiguration? magnifierConfiguration}
    TextMagnifierConfiguration? magnifierConfiguration,
  }) {}
}
