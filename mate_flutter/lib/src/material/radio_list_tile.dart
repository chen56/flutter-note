// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.286265

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/radio_list_tile.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class RadioListTile<T> extends StatelessWidget
class RadioListTileMate<T> {
  /// RadioListTile<T> RadioListTile({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, ShapeBorder? shape, Color? tileColor, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
  RadioListTileMate({
// param: {Key? key}
    Key? key,
// param: {required T value}
    required T value,
// param: {required T? groupValue}
    required T? groupValue,
// param: {required void Function(T?)? onChanged}
    required void Function(
      T?, [
      T?,
    ])?
        onChanged,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {bool toggleable = false}
    required bool toggleable,
// param: {Color? activeColor}
    Color? activeColor,
// param: {MaterialStateProperty<Color?>? fillColor}
    MaterialStateProperty<Color?>? fillColor,
// param: {Color? hoverColor}
    Color? hoverColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {double? splashRadius}
    double? splashRadius,
// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
// param: {Widget? title}
    Widget? title,
// param: {Widget? subtitle}
    Widget? subtitle,
// param: {bool isThreeLine = false}
    required bool isThreeLine,
// param: {bool? dense}
    bool? dense,
// param: {Widget? secondary}
    Widget? secondary,
// param: {bool selected = false}
    required bool selected,
// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,
// param: {ShapeBorder? shape}
    ShapeBorder? shape,
// param: {Color? tileColor}
    Color? tileColor,
// param: {Color? selectedTileColor}
    Color? selectedTileColor,
// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {void Function(bool)? onFocusChange}
    void Function(
      bool, [
      bool,
    ])?
        onFocusChange,
// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) {}
}
