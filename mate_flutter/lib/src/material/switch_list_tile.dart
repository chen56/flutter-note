// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:12.111007

library;

import 'package:flutter/src/material/switch_list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/material_state.dart';

/// class SwitchListTile extends StatelessWidget
class SwitchListTileMate extends SwitchListTile {
  /// SwitchListTile SwitchListTile({Key? key, required bool value, required void Function(bool)? onChanged, Color? tileColor, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, ImageProvider<Object>? inactiveThumbImage, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, EdgeInsetsGeometry? contentPadding, Widget? secondary, bool selected = false, bool autofocus = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, ShapeBorder? shape, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback, Color? hoverColor, MaterialStateProperty<Color?>? trackOutlineColor})
  SwitchListTileMate({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool value}
    required bool value,

    /// param: {required void Function(bool)? onChanged}
    required ValueChanged<bool>? onChanged,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,

    /// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? subtitle}
    Widget? subtitle,

    /// param: {bool isThreeLine = false}
    required bool isThreeLine,

    /// param: {bool? dense}
    bool? dense,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {Widget? secondary}
    Widget? secondary,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          tileColor: tileColor,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          inactiveThumbImage: inactiveThumbImage,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          contentPadding: contentPadding,
          secondary: secondary,
          selected: selected,
          autofocus: autofocus,
          controlAffinity: controlAffinity,
          shape: shape,
          selectedTileColor: selectedTileColor,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
          hoverColor: hoverColor,
          trackOutlineColor: trackOutlineColor,
        ) {}

  /// SwitchListTile SwitchListTile.adaptive({Key? key, required bool value, required void Function(bool)? onChanged, Color? tileColor, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, ImageProvider<Object>? inactiveThumbImage, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, EdgeInsetsGeometry? contentPadding, Widget? secondary, bool selected = false, bool autofocus = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, ShapeBorder? shape, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback, Color? hoverColor, MaterialStateProperty<Color?>? trackOutlineColor})
  SwitchListTileMate.adaptive({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool value}
    required bool value,

    /// param: {required void Function(bool)? onChanged}
    required ValueChanged<bool>? onChanged,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,

    /// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? subtitle}
    Widget? subtitle,

    /// param: {bool isThreeLine = false}
    required bool isThreeLine,

    /// param: {bool? dense}
    bool? dense,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {Widget? secondary}
    Widget? secondary,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,
  }) : super.adaptive(
          key: key,
          value: value,
          onChanged: onChanged,
          tileColor: tileColor,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          inactiveThumbImage: inactiveThumbImage,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          contentPadding: contentPadding,
          secondary: secondary,
          selected: selected,
          autofocus: autofocus,
          controlAffinity: controlAffinity,
          shape: shape,
          selectedTileColor: selectedTileColor,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
          hoverColor: hoverColor,
          trackOutlineColor: trackOutlineColor,
        ) {}
}
