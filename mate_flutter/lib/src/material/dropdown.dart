// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:15:59.863153

library;

import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/dropdown.dart';
import 'dart:core';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/widgets/form.dart';

/// class DropdownMenuItem<T> extends _DropdownMenuItemContainer
class DropdownMenuItemMate<T> {
  /// DropdownMenuItem<T> DropdownMenuItem({Key? key, void Function()? onTap, T? value, bool enabled = true, AlignmentGeometry alignment = AlignmentDirectional.centerStart, required Widget child})
  DropdownMenuItemMate({
// param: {Key? key}
    Key? key,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {T? value}
    T? value,
// param: {bool enabled = true}
    required bool enabled,
// param: {AlignmentGeometry alignment = AlignmentDirectional.centerStart}
    required AlignmentGeometry alignment,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class DropdownButtonHideUnderline extends InheritedWidget
class DropdownButtonHideUnderlineMate {
  /// DropdownButtonHideUnderline DropdownButtonHideUnderline({Key? key, required Widget child})
  DropdownButtonHideUnderlineMate({
// param: {Key? key}
    Key? key,
// param: {required Widget child}
    required Widget child,
  }) {}
}

/// class DropdownButton<T> extends StatefulWidget
class DropdownButtonMate<T> {
  /// DropdownButton<T> DropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = false, bool isExpanded = false, double? itemHeight = kMinInteractiveDimension, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius})
  DropdownButtonMate({
// param: {Key? key}
    Key? key,
// param: {required List<DropdownMenuItem<T>>? items}
    required List<DropdownMenuItem<T>>? items,
// param: {List<Widget> Function(BuildContext)? selectedItemBuilder}
    List<Widget> Function(
      BuildContext, [
      BuildContext,
    ])?
        selectedItemBuilder,
// param: {T? value}
    T? value,
// param: {Widget? hint}
    Widget? hint,
// param: {Widget? disabledHint}
    Widget? disabledHint,
// param: {required void Function(T?)? onChanged}
    required void Function(
      T?, [
      T?,
    ])?
        onChanged,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {int elevation = 8}
    required int elevation,
// param: {TextStyle? style}
    TextStyle? style,
// param: {Widget? underline}
    Widget? underline,
// param: {Widget? icon}
    Widget? icon,
// param: {Color? iconDisabledColor}
    Color? iconDisabledColor,
// param: {Color? iconEnabledColor}
    Color? iconEnabledColor,
// param: {double iconSize = 24.0}
    required double iconSize,
// param: {bool isDense = false}
    required bool isDense,
// param: {bool isExpanded = false}
    required bool isExpanded,
// param: {double? itemHeight = kMinInteractiveDimension}
    double? itemHeight,
// param: {Color? focusColor}
    Color? focusColor,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {Color? dropdownColor}
    Color? dropdownColor,
// param: {double? menuMaxHeight}
    double? menuMaxHeight,
// param: {bool? enableFeedback}
    bool? enableFeedback,
// param: {AlignmentGeometry alignment = AlignmentDirectional.centerStart}
    required AlignmentGeometry alignment,
// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,
  }) {}
}

/// class DropdownButtonFormField<T> extends FormField<T>
class DropdownButtonFormFieldMate<T> {
  /// DropdownButtonFormField<T> DropdownButtonFormField({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = true, bool isExpanded = false, double? itemHeight, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, InputDecoration? decoration, void Function(T?)? onSaved, String? Function(T?)? validator, AutovalidateMode? autovalidateMode, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius})
  DropdownButtonFormFieldMate({
// param: {Key? key}
    Key? key,
// param: {required List<DropdownMenuItem<T>>? items}
    required List<DropdownMenuItem<T>>? items,
// param: {List<Widget> Function(BuildContext)? selectedItemBuilder}
    List<Widget> Function(
      BuildContext, [
      BuildContext,
    ])?
        selectedItemBuilder,
// param: {T? value}
    T? value,
// param: {Widget? hint}
    Widget? hint,
// param: {Widget? disabledHint}
    Widget? disabledHint,
// param: {required void Function(T?)? onChanged}
    required void Function(
      T?, [
      T?,
    ])?
        onChanged,
// param: {void Function()? onTap}
    void Function()? onTap,
// param: {int elevation = 8}
    required int elevation,
// param: {TextStyle? style}
    TextStyle? style,
// param: {Widget? icon}
    Widget? icon,
// param: {Color? iconDisabledColor}
    Color? iconDisabledColor,
// param: {Color? iconEnabledColor}
    Color? iconEnabledColor,
// param: {double iconSize = 24.0}
    required double iconSize,
// param: {bool isDense = true}
    required bool isDense,
// param: {bool isExpanded = false}
    required bool isExpanded,
// param: {double? itemHeight}
    double? itemHeight,
// param: {Color? focusColor}
    Color? focusColor,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
// param: {Color? dropdownColor}
    Color? dropdownColor,
// param: {InputDecoration? decoration}
    InputDecoration? decoration,
// param: {void Function(T?)? onSaved}
    void Function(
      T?, [
      T?,
    ])?
        onSaved,
// param: {String? Function(T?)? validator}
    String? Function(
      T?, [
      T?,
    ])?
        validator,
// param: {AutovalidateMode? autovalidateMode}
    AutovalidateMode? autovalidateMode,
// param: {double? menuMaxHeight}
    double? menuMaxHeight,
// param: {bool? enableFeedback}
    bool? enableFeedback,
// param: {AlignmentGeometry alignment = AlignmentDirectional.centerStart}
    required AlignmentGeometry alignment,
// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,
  }) {}
}
