// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.344504

library;

import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class Slider extends StatefulWidget
class SliderMate {
  /// Slider Slider({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  SliderMate({
// param: {Key? key}
    Key? key,
// param: {required double value}
    required double value,
// param: {double? secondaryTrackValue}
    double? secondaryTrackValue,
// param: {required void Function(double)? onChanged}
    required void Function(
      double, [
      double,
    ])?
        onChanged,
// param: {void Function(double)? onChangeStart}
    void Function(
      double, [
      double,
    ])?
        onChangeStart,
// param: {void Function(double)? onChangeEnd}
    void Function(
      double, [
      double,
    ])?
        onChangeEnd,
// param: {double min = 0.0}
    required double min,
// param: {double max = 1.0}
    required double max,
// param: {int? divisions}
    int? divisions,
// param: {String? label}
    String? label,
// param: {Color? activeColor}
    Color? activeColor,
// param: {Color? inactiveColor}
    Color? inactiveColor,
// param: {Color? secondaryActiveColor}
    Color? secondaryActiveColor,
// param: {Color? thumbColor}
    Color? thumbColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {String Function(double)? semanticFormatterCallback}
    String Function(
      double, [
      double,
    ])?
        semanticFormatterCallback,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
  }) {}

  /// Slider Slider.adaptive({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, MouseCursor? mouseCursor, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  SliderMate.adaptive({
// param: {Key? key}
    Key? key,
// param: {required double value}
    required double value,
// param: {double? secondaryTrackValue}
    double? secondaryTrackValue,
// param: {required void Function(double)? onChanged}
    required void Function(
      double, [
      double,
    ])?
        onChanged,
// param: {void Function(double)? onChangeStart}
    void Function(
      double, [
      double,
    ])?
        onChangeStart,
// param: {void Function(double)? onChangeEnd}
    void Function(
      double, [
      double,
    ])?
        onChangeEnd,
// param: {double min = 0.0}
    required double min,
// param: {double max = 1.0}
    required double max,
// param: {int? divisions}
    int? divisions,
// param: {String? label}
    String? label,
// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,
// param: {Color? activeColor}
    Color? activeColor,
// param: {Color? inactiveColor}
    Color? inactiveColor,
// param: {Color? secondaryActiveColor}
    Color? secondaryActiveColor,
// param: {Color? thumbColor}
    Color? thumbColor,
// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
// param: {String Function(double)? semanticFormatterCallback}
    String Function(
      double, [
      double,
    ])?
        semanticFormatterCallback,
// param: {FocusNode? focusNode}
    FocusNode? focusNode,
// param: {bool autofocus = false}
    required bool autofocus,
  }) {}
}
