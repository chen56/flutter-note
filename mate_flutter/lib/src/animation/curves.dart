// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:09.592215

library;

import 'package:flutter/src/animation/curves.dart';
import 'dart:core';
import 'dart:ui';
export 'dart:ui' show Offset;

/// class SawTooth extends Curve
class SawToothMate extends SawTooth {
  /// SawTooth SawTooth(int count)
  SawToothMate(

      /// param: int count
      int count)
      : super(count) {}
}

/// class Interval extends Curve
class IntervalMate extends Interval {
  /// Interval Interval(double begin, double end, {Curve curve = Curves.linear})
  IntervalMate(
    /// param: double begin
    double begin,

    /// param: double end
    double end, {
    /// param: {Curve curve = Curves.linear}
    required Curve curve,
  }) : super(
          begin,
          end,
          curve: curve,
        ) {}
}

/// class Threshold extends Curve
class ThresholdMate extends Threshold {
  /// Threshold Threshold(double threshold)
  ThresholdMate(

      /// param: double threshold
      double threshold)
      : super(threshold) {}
}

/// class Cubic extends Curve
class CubicMate extends Cubic {
  /// Cubic Cubic(double a, double b, double c, double d)
  CubicMate(
    /// param: double a
    double a,

    /// param: double b
    double b,

    /// param: double c
    double c,

    /// param: double d
    double d,
  ) : super(
          a,
          b,
          c,
          d,
        ) {}
}

/// class ThreePointCubic extends Curve
class ThreePointCubicMate extends ThreePointCubic {
  /// ThreePointCubic ThreePointCubic(Offset a1, Offset b1, Offset midpoint, Offset a2, Offset b2)
  ThreePointCubicMate(
    /// param: Offset a1
    Offset a1,

    /// param: Offset b1
    Offset b1,

    /// param: Offset midpoint
    Offset midpoint,

    /// param: Offset a2
    Offset a2,

    /// param: Offset b2
    Offset b2,
  ) : super(
          a1,
          b1,
          midpoint,
          a2,
          b2,
        ) {}
}

/// class Curve2DSample
class Curve2DSampleMate extends Curve2DSample {
  /// Curve2DSample Curve2DSample(double t, Offset value)
  Curve2DSampleMate(
    /// param: double t
    double t,

    /// param: Offset value
    Offset value,
  ) : super(
          t,
          value,
        ) {}
}

/// class CatmullRomSpline extends Curve2D
class CatmullRomSplineMate extends CatmullRomSpline {
  /// CatmullRomSpline CatmullRomSpline(List<Offset> controlPoints, {double tension = 0.0, Offset? startHandle, Offset? endHandle})
  CatmullRomSplineMate(
    /// param: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// param: {double tension = 0.0}
    required double tension,

    /// param: {Offset? startHandle}
    Offset? startHandle,

    /// param: {Offset? endHandle}
    Offset? endHandle,
  }) : super(
          controlPoints,
          tension: tension,
          startHandle: startHandle,
          endHandle: endHandle,
        ) {}

  /// CatmullRomSpline CatmullRomSpline.precompute(List<Offset> controlPoints, {double tension = 0.0, Offset? startHandle, Offset? endHandle})
  CatmullRomSplineMate.precompute(
    /// param: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// param: {double tension = 0.0}
    required double tension,

    /// param: {Offset? startHandle}
    Offset? startHandle,

    /// param: {Offset? endHandle}
    Offset? endHandle,
  }) : super.precompute(
          controlPoints,
          tension: tension,
          startHandle: startHandle,
          endHandle: endHandle,
        ) {}
}

/// class CatmullRomCurve extends Curve
class CatmullRomCurveMate extends CatmullRomCurve {
  /// CatmullRomCurve CatmullRomCurve(List<Offset> controlPoints, {double tension = 0.0})
  CatmullRomCurveMate(
    /// param: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// param: {double tension = 0.0}
    required double tension,
  }) : super(
          controlPoints,
          tension: tension,
        ) {}

  /// CatmullRomCurve CatmullRomCurve.precompute(List<Offset> controlPoints, {double tension = 0.0})
  CatmullRomCurveMate.precompute(
    /// param: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// param: {double tension = 0.0}
    required double tension,
  }) : super.precompute(
          controlPoints,
          tension: tension,
        ) {}
}

/// class FlippedCurve extends Curve
class FlippedCurveMate extends FlippedCurve {
  /// FlippedCurve FlippedCurve(Curve curve)
  FlippedCurveMate(

      /// param: Curve curve
      Curve curve)
      : super(curve) {}
}

/// class ElasticInCurve extends Curve
class ElasticInCurveMate extends ElasticInCurve {
  /// ElasticInCurve ElasticInCurve([double period = 0.4])
  ElasticInCurveMate(

      /// param: [double period = 0.4]
      double period)
      : super(period) {}
}

/// class ElasticOutCurve extends Curve
class ElasticOutCurveMate extends ElasticOutCurve {
  /// ElasticOutCurve ElasticOutCurve([double period = 0.4])
  ElasticOutCurveMate(

      /// param: [double period = 0.4]
      double period)
      : super(period) {}
}

/// class ElasticInOutCurve extends Curve
class ElasticInOutCurveMate extends ElasticInOutCurve {
  /// ElasticInOutCurve ElasticInOutCurve([double period = 0.4])
  ElasticInOutCurveMate(

      /// param: [double period = 0.4]
      double period)
      : super(period) {}
}
