// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.515130

library;

import 'package:flutter/src/animation/animations.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:core';
import 'package:flutter/src/animation/curves.dart';
export 'dart:ui' show VoidCallback;
export 'animation.dart' show Animation, AnimationStatus, AnimationStatusListener;
export 'curves.dart' show Curve;

/// class AlwaysStoppedAnimation<T> extends Animation<T>
class AlwaysStoppedAnimationMate<T> {
  /// AlwaysStoppedAnimation<T> AlwaysStoppedAnimation(T value)
  AlwaysStoppedAnimationMate(
// param: T value
      T value) {}
}

/// class ProxyAnimation extends Animation<double> with AnimationLazyListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class ProxyAnimationMate {
  /// ProxyAnimation ProxyAnimation([Animation<double>? animation])
  ProxyAnimationMate(
// param: [Animation<double>? animation]
      Animation<double>? animation) {}
}

/// class ReverseAnimation extends Animation<double> with AnimationLazyListenerMixin, AnimationLocalStatusListenersMixin
class ReverseAnimationMate {
  /// ReverseAnimation ReverseAnimation(Animation<double> parent)
  ReverseAnimationMate(
// param: Animation<double> parent
      Animation<double> parent) {}
}

/// class CurvedAnimation extends Animation<double> with AnimationWithParentMixin<double>
class CurvedAnimationMate {
  /// CurvedAnimation CurvedAnimation({required Animation<double> parent, required Curve curve, Curve? reverseCurve})
  CurvedAnimationMate({
// param: {required Animation<double> parent}
    required Animation<double> parent,
// param: {required Curve curve}
    required Curve curve,
// param: {Curve? reverseCurve}
    Curve? reverseCurve,
  }) {}
}

/// class TrainHoppingAnimation extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class TrainHoppingAnimationMate {
  /// TrainHoppingAnimation TrainHoppingAnimation(Animation<double> _currentTrain, Animation<double>? _nextTrain, {void Function()? onSwitchedTrain})
  TrainHoppingAnimationMate(
// param: Animation<double> _currentTrain
    Animation<double> _currentTrain,
// param: Animation<double>? _nextTrain
    Animation<double>? _nextTrain, {
// param: {void Function()? onSwitchedTrain}
    void Function()? onSwitchedTrain,
  }) {}
}

/// abstract class CompoundAnimation<T> extends Animation<T> with AnimationLazyListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
abstract class CompoundAnimationMate<T> {
  /// CompoundAnimation<T> CompoundAnimation({required Animation<T> first, required Animation<T> next})
  CompoundAnimationMate({
// param: {required Animation<T> first}
    required Animation<T> first,
// param: {required Animation<T> next}
    required Animation<T> next,
  }) {}
}

/// class AnimationMean extends CompoundAnimation<double>
class AnimationMeanMate {
  /// AnimationMean AnimationMean({required Animation<double> left, required Animation<double> right})
  AnimationMeanMate({
// param: {required Animation<double> left}
    required Animation<double> left,
// param: {required Animation<double> right}
    required Animation<double> right,
  }) {}
}

/// class AnimationMax<T extends num> extends CompoundAnimation<T>
class AnimationMaxMate<T extends num> {
  /// AnimationMax<T> AnimationMax(Animation<T> first, Animation<T> next)
  AnimationMaxMate(
// param: Animation<T> first
    Animation<T> first,
// param: Animation<T> next
    Animation<T> next,
  ) {}
}

/// class AnimationMin<T extends num> extends CompoundAnimation<T>
class AnimationMinMate<T extends num> {
  /// AnimationMin<T> AnimationMin(Animation<T> first, Animation<T> next)
  AnimationMinMate(
// param: Animation<T> first
    Animation<T> first,
// param: Animation<T> next
    Animation<T> next,
  ) {}
}
