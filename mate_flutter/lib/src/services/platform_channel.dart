// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.803988

library;

import 'dart:core';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/services/platform_channel.dart';
import 'package:flutter/src/services/binary_messenger.dart';
export 'binary_messenger.dart' show BinaryMessenger;
export 'binding.dart' show RootIsolateToken;
export 'message_codec.dart' show MessageCodec, MethodCall, MethodCodec;

/// class BasicMessageChannel<T>
class BasicMessageChannelMate<T> {
  /// BasicMessageChannel<T> BasicMessageChannel(String name, MessageCodec<T> codec, {BinaryMessenger? binaryMessenger})
  BasicMessageChannelMate(
// param: String name
    String name,
// param: MessageCodec<T> codec
    MessageCodec<T> codec, {
// param: {BinaryMessenger? binaryMessenger}
    BinaryMessenger? binaryMessenger,
  }) {}
}

/// class MethodChannel
class MethodChannelMate {
  /// MethodChannel MethodChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  MethodChannelMate(
// param: String name
    String name,
// param: [MethodCodec codec = const StandardMethodCodec()]
    MethodCodec codec,
// param: [BinaryMessenger? binaryMessenger]
    BinaryMessenger? binaryMessenger,
  ) {}
}

/// class OptionalMethodChannel extends MethodChannel
class OptionalMethodChannelMate {
  /// OptionalMethodChannel OptionalMethodChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  OptionalMethodChannelMate(
// param: String name
    String name,
// param: [MethodCodec codec = const StandardMethodCodec()]
    MethodCodec codec,
// param: [BinaryMessenger? binaryMessenger]
    BinaryMessenger? binaryMessenger,
  ) {}
}

/// class EventChannel
class EventChannelMate {
  /// EventChannel EventChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  EventChannelMate(
// param: String name
    String name,
// param: [MethodCodec codec = const StandardMethodCodec()]
    MethodCodec codec,
// param: [BinaryMessenger? binaryMessenger]
    BinaryMessenger? binaryMessenger,
  ) {}
}
