// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:09.970337

library;

import 'package:flutter/src/gestures/binding.dart';
import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/src/foundation/assertions.dart';
export 'dart:ui' show Offset;
export 'package:flutter/foundation.dart' show DiagnosticsNode, InformationCollector;
export 'arena.dart' show GestureArenaManager;
export 'events.dart' show PointerEvent;
export 'hit_test.dart' show HitTestEntry, HitTestResult, HitTestTarget;
export 'pointer_router.dart' show PointerRouter;
export 'pointer_signal_resolver.dart' show PointerSignalResolver;

/// class FlutterErrorDetailsForPointerEventDispatcher extends FlutterErrorDetails
class FlutterErrorDetailsForPointerEventDispatcherMate extends FlutterErrorDetailsForPointerEventDispatcher {
  /// FlutterErrorDetailsForPointerEventDispatcher FlutterErrorDetailsForPointerEventDispatcher({required Object exception, StackTrace? stack, String? library = 'Flutter framework', DiagnosticsNode? context, PointerEvent? event, HitTestEntry<HitTestTarget>? hitTestEntry, Iterable<DiagnosticsNode> Function()? informationCollector, bool silent = false})
  FlutterErrorDetailsForPointerEventDispatcherMate({
    /// param: {required Object exception}
    required Object exception,

    /// param: {StackTrace? stack}
    StackTrace? stack,

    /// param: {String? library = 'Flutter framework'}
    String? library,

    /// param: {DiagnosticsNode? context}
    DiagnosticsNode? context,

    /// param: {PointerEvent? event}
    PointerEvent? event,

    /// param: {HitTestEntry<HitTestTarget>? hitTestEntry}
    HitTestEntry<HitTestTarget>? hitTestEntry,

    /// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    InformationCollector? informationCollector,

    /// param: {bool silent = false}
    required bool silent,
  }) : super(
          exception: exception,
          stack: stack,
          library: library,
          context: context,
          event: event,
          hitTestEntry: hitTestEntry,
          informationCollector: informationCollector,
          silent: silent,
        ) {}
}
