// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.766912

library;

import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'package:flutter/src/gestures/events.dart';
import 'dart:ui';
export 'dart:ui' show PointerDeviceKind;
export 'package:flutter/foundation.dart' show DiagnosticPropertiesBuilder;
export 'drag.dart' show DragEndDetails, DragUpdateDetails;
export 'drag_details.dart'
    show
        DragDownDetails,
        DragStartDetails,
        DragUpdateDetails,
        GestureDragDownCallback,
        GestureDragStartCallback,
        GestureDragUpdateCallback;
export 'events.dart' show PointerDownEvent, PointerEvent, PointerPanZoomStartEvent;
export 'recognizer.dart' show DragStartBehavior;
export 'velocity_tracker.dart' show VelocityEstimate, VelocityTracker;

/// abstract class DragGestureRecognizer extends OneSequenceGestureRecognizer
abstract class DragGestureRecognizerMate {
  /// DragGestureRecognizer DragGestureRecognizer({Object? debugOwner, DragStartBehavior dragStartBehavior = DragStartBehavior.start, VelocityTracker Function(PointerEvent) velocityTrackerBuilder = _defaultBuilder, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  DragGestureRecognizerMate({
// param: {Object? debugOwner}
    Object? debugOwner,
// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,
// param: {VelocityTracker Function(PointerEvent) velocityTrackerBuilder = _defaultBuilder}
    required VelocityTracker Function(
      PointerEvent, [
      PointerEvent,
    ])
        velocityTrackerBuilder,
// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,
// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    bool Function(
      int, [
      int,
    ])?
        allowedButtonsFilter,
  }) {}
}

/// class VerticalDragGestureRecognizer extends DragGestureRecognizer
class VerticalDragGestureRecognizerMate {
  /// VerticalDragGestureRecognizer VerticalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  VerticalDragGestureRecognizerMate({
// param: {Object? debugOwner}
    Object? debugOwner,
// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,
// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    bool Function(
      int, [
      int,
    ])?
        allowedButtonsFilter,
  }) {}
}

/// class HorizontalDragGestureRecognizer extends DragGestureRecognizer
class HorizontalDragGestureRecognizerMate {
  /// HorizontalDragGestureRecognizer HorizontalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  HorizontalDragGestureRecognizerMate({
// param: {Object? debugOwner}
    Object? debugOwner,
// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,
// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    bool Function(
      int, [
      int,
    ])?
        allowedButtonsFilter,
  }) {}
}

/// class PanGestureRecognizer extends DragGestureRecognizer
class PanGestureRecognizerMate {
  /// PanGestureRecognizer PanGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  PanGestureRecognizerMate({
// param: {Object? debugOwner}
    Object? debugOwner,
// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,
// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    bool Function(
      int, [
      int,
    ])?
        allowedButtonsFilter,
  }) {}
}
