// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.189773

library;

import 'dart:core';
import 'package:flutter/src/painting/inline_span.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/selection.dart';

/// class TextParentData extends ContainerBoxParentData<RenderBox>
class TextParentDataMate {
  /// TextParentData TextParentData()
  TextParentDataMate() {}
}

/// class PlaceholderSpanIndexSemanticsTag extends SemanticsTag
class PlaceholderSpanIndexSemanticsTagMate {
  /// PlaceholderSpanIndexSemanticsTag PlaceholderSpanIndexSemanticsTag(int index)
  PlaceholderSpanIndexSemanticsTagMate(
// param: int index
      int index) {}
}

/// class RenderParagraph extends RenderBox with ContainerRenderObjectMixin<RenderBox, TextParentData>, RenderBoxContainerDefaultsMixin<RenderBox, TextParentData>, RelayoutWhenSystemFontsChangeMixin
class RenderParagraphMate {
  /// RenderParagraph RenderParagraph(InlineSpan text, {TextAlign textAlign = TextAlign.start, required TextDirection textDirection, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, double textScaleFactor = 1.0, int? maxLines, Locale? locale, StrutStyle? strutStyle, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, List<RenderBox>? children, Color? selectionColor, SelectionRegistrar? registrar})
  RenderParagraphMate(
// param: InlineSpan text
    InlineSpan text, {
// param: {TextAlign textAlign = TextAlign.start}
    required TextAlign textAlign,
// param: {required TextDirection textDirection}
    required TextDirection textDirection,
// param: {bool softWrap = true}
    required bool softWrap,
// param: {TextOverflow overflow = TextOverflow.clip}
    required TextOverflow overflow,
// param: {double textScaleFactor = 1.0}
    required double textScaleFactor,
// param: {int? maxLines}
    int? maxLines,
// param: {Locale? locale}
    Locale? locale,
// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,
// param: {TextWidthBasis textWidthBasis = TextWidthBasis.parent}
    required TextWidthBasis textWidthBasis,
// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,
// param: {List<RenderBox>? children}
    List<RenderBox>? children,
// param: {Color? selectionColor}
    Color? selectionColor,
// param: {SelectionRegistrar? registrar}
    SelectionRegistrar? registrar,
  }) {}
}
