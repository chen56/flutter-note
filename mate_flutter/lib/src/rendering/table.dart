// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:10.846162

library;

import 'package:flutter/src/rendering/table.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/rendering/table_border.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/rendering/box.dart';

/// class IntrinsicColumnWidth extends TableColumnWidth
class IntrinsicColumnWidthMate extends IntrinsicColumnWidth {
  /// IntrinsicColumnWidth IntrinsicColumnWidth({double? flex})
  IntrinsicColumnWidthMate(
      {
      /// param: {double? flex}
      double? flex})
      : super(flex: flex) {}
}

/// class FixedColumnWidth extends TableColumnWidth
class FixedColumnWidthMate extends FixedColumnWidth {
  /// FixedColumnWidth FixedColumnWidth(double value)
  FixedColumnWidthMate(

      /// param: double value
      double value)
      : super(value) {}
}

/// class FractionColumnWidth extends TableColumnWidth
class FractionColumnWidthMate extends FractionColumnWidth {
  /// FractionColumnWidth FractionColumnWidth(double value)
  FractionColumnWidthMate(

      /// param: double value
      double value)
      : super(value) {}
}

/// class FlexColumnWidth extends TableColumnWidth
class FlexColumnWidthMate extends FlexColumnWidth {
  /// FlexColumnWidth FlexColumnWidth([double value = 1.0])
  FlexColumnWidthMate(

      /// param: [double value = 1.0]
      double value)
      : super(value) {}
}

/// class MaxColumnWidth extends TableColumnWidth
class MaxColumnWidthMate extends MaxColumnWidth {
  /// MaxColumnWidth MaxColumnWidth(TableColumnWidth a, TableColumnWidth b)
  MaxColumnWidthMate(
    /// param: TableColumnWidth a
    TableColumnWidth a,

    /// param: TableColumnWidth b
    TableColumnWidth b,
  ) : super(
          a,
          b,
        ) {}
}

/// class MinColumnWidth extends TableColumnWidth
class MinColumnWidthMate extends MinColumnWidth {
  /// MinColumnWidth MinColumnWidth(TableColumnWidth a, TableColumnWidth b)
  MinColumnWidthMate(
    /// param: TableColumnWidth a
    TableColumnWidth a,

    /// param: TableColumnWidth b
    TableColumnWidth b,
  ) : super(
          a,
          b,
        ) {}
}

/// class RenderTable extends RenderBox
class RenderTableMate extends RenderTable {
  /// RenderTable RenderTable({int? columns, int? rows, Map<int, TableColumnWidth>? columnWidths, TableColumnWidth defaultColumnWidth = const FlexColumnWidth(), required TextDirection textDirection, TableBorder? border, List<Decoration?>? rowDecorations, ImageConfiguration configuration = ImageConfiguration.empty, TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top, TextBaseline? textBaseline, List<List<RenderBox>>? children})
  RenderTableMate({
    /// param: {int? columns}
    int? columns,

    /// param: {int? rows}
    int? rows,

    /// param: {Map<int, TableColumnWidth>? columnWidths}
    Map<int, TableColumnWidth>? columnWidths,

    /// param: {TableColumnWidth defaultColumnWidth = const FlexColumnWidth()}
    required TableColumnWidth defaultColumnWidth,

    /// param: {required TextDirection textDirection}
    required TextDirection textDirection,

    /// param: {TableBorder? border}
    TableBorder? border,

    /// param: {List<Decoration?>? rowDecorations}
    List<Decoration?>? rowDecorations,

    /// param: {ImageConfiguration configuration = ImageConfiguration.empty}
    required ImageConfiguration configuration,

    /// param: {TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top}
    required TableCellVerticalAlignment defaultVerticalAlignment,

    /// param: {TextBaseline? textBaseline}
    TextBaseline? textBaseline,

    /// param: {List<List<RenderBox>>? children}
    List<List<RenderBox>>? children,
  }) : super(
          columns: columns,
          rows: rows,
          columnWidths: columnWidths,
          defaultColumnWidth: defaultColumnWidth,
          textDirection: textDirection,
          border: border,
          rowDecorations: rowDecorations,
          configuration: configuration,
          defaultVerticalAlignment: defaultVerticalAlignment,
          textBaseline: textBaseline,
          children: children,
        ) {}
}
