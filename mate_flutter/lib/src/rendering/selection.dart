// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:15.106483

import 'package:flutter/src/rendering/selection.dart';
import 'dart:core';
import 'dart:ui';

/// class SelectedContent
class SelectedContentMate extends SelectedContent {
  /// SelectedContent SelectedContent({required String plainText})
  SelectedContentMate(
      {
      /// param: {required String plainText}
      required String plainText})
      : super(plainText: plainText) {}
}

/// class SelectWordSelectionEvent extends SelectionEvent
class SelectWordSelectionEventMate extends SelectWordSelectionEvent {
  /// SelectWordSelectionEvent SelectWordSelectionEvent({required Offset globalPosition})
  SelectWordSelectionEventMate(
      {
      /// param: {required Offset globalPosition}
      required Offset globalPosition})
      : super(globalPosition: globalPosition) {}
}

/// class SelectionEdgeUpdateEvent extends SelectionEvent
class SelectionEdgeUpdateEventMate extends SelectionEdgeUpdateEvent {
  /// SelectionEdgeUpdateEvent SelectionEdgeUpdateEvent.forStart({required Offset globalPosition})
  SelectionEdgeUpdateEventMate.forStart(
      {
      /// param: {required Offset globalPosition}
      required Offset globalPosition})
      : super.forStart(globalPosition: globalPosition) {}

  /// SelectionEdgeUpdateEvent SelectionEdgeUpdateEvent.forEnd({required Offset globalPosition})
  SelectionEdgeUpdateEventMate.forEnd(
      {
      /// param: {required Offset globalPosition}
      required Offset globalPosition})
      : super.forEnd(globalPosition: globalPosition) {}
}

/// class GranularlyExtendSelectionEvent extends SelectionEvent
class GranularlyExtendSelectionEventMate extends GranularlyExtendSelectionEvent {
  /// GranularlyExtendSelectionEvent GranularlyExtendSelectionEvent({required bool forward, required bool isEnd, required TextGranularity granularity})
  GranularlyExtendSelectionEventMate({
    /// param: {required bool forward}
    required bool forward,

    /// param: {required bool isEnd}
    required bool isEnd,

    /// param: {required TextGranularity granularity}
    required TextGranularity granularity,
  }) : super(
          forward: forward,
          isEnd: isEnd,
          granularity: granularity,
        ) {}
}

/// class DirectionallyExtendSelectionEvent extends SelectionEvent
class DirectionallyExtendSelectionEventMate extends DirectionallyExtendSelectionEvent {
  /// DirectionallyExtendSelectionEvent DirectionallyExtendSelectionEvent({required double dx, required bool isEnd, required SelectionExtendDirection direction})
  DirectionallyExtendSelectionEventMate({
    /// param: {required double dx}
    required double dx,

    /// param: {required bool isEnd}
    required bool isEnd,

    /// param: {required SelectionExtendDirection direction}
    required SelectionExtendDirection direction,
  }) : super(
          dx: dx,
          isEnd: isEnd,
          direction: direction,
        ) {}
}

/// class SelectionGeometry
class SelectionGeometryMate extends SelectionGeometry {
  /// SelectionGeometry SelectionGeometry({SelectionPoint? startSelectionPoint, SelectionPoint? endSelectionPoint, required SelectionStatus status, required bool hasContent})
  SelectionGeometryMate({
    /// param: {SelectionPoint? startSelectionPoint}
    SelectionPoint? startSelectionPoint,

    /// param: {SelectionPoint? endSelectionPoint}
    SelectionPoint? endSelectionPoint,

    /// param: {required SelectionStatus status}
    required SelectionStatus status,

    /// param: {required bool hasContent}
    required bool hasContent,
  }) : super(
          startSelectionPoint: startSelectionPoint,
          endSelectionPoint: endSelectionPoint,
          status: status,
          hasContent: hasContent,
        ) {}
}

/// class SelectionPoint
class SelectionPointMate extends SelectionPoint {
  /// SelectionPoint SelectionPoint({required Offset localPosition, required double lineHeight, required TextSelectionHandleType handleType})
  SelectionPointMate({
    /// param: {required Offset localPosition}
    required Offset localPosition,

    /// param: {required double lineHeight}
    required double lineHeight,

    /// param: {required TextSelectionHandleType handleType}
    required TextSelectionHandleType handleType,
  }) : super(
          localPosition: localPosition,
          lineHeight: lineHeight,
          handleType: handleType,
        ) {}
}
