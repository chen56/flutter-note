// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.256415

library;

import 'dart:core';
import 'dart:async';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/sliver_persistent_header.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/scheduler/ticker.dart';

/// class OverScrollHeaderStretchConfiguration
class OverScrollHeaderStretchConfigurationMate {
  /// OverScrollHeaderStretchConfiguration OverScrollHeaderStretchConfiguration({double stretchTriggerOffset = 100.0, Future<void> Function()? onStretchTrigger})
  OverScrollHeaderStretchConfigurationMate({
// param: {double stretchTriggerOffset = 100.0}
    required double stretchTriggerOffset,
// param: {Future<void> Function()? onStretchTrigger}
    Future<void> Function()? onStretchTrigger,
  }) {}
}

/// class PersistentHeaderShowOnScreenConfiguration
class PersistentHeaderShowOnScreenConfigurationMate {
  /// PersistentHeaderShowOnScreenConfiguration PersistentHeaderShowOnScreenConfiguration({double minShowOnScreenExtent = double.negativeInfinity, double maxShowOnScreenExtent = double.infinity})
  PersistentHeaderShowOnScreenConfigurationMate({
// param: {double minShowOnScreenExtent = double.negativeInfinity}
    required double minShowOnScreenExtent,
// param: {double maxShowOnScreenExtent = double.infinity}
    required double maxShowOnScreenExtent,
  }) {}
}

/// abstract class RenderSliverPersistentHeader extends RenderSliver with RenderObjectWithChildMixin<RenderBox>, RenderSliverHelpers
abstract class RenderSliverPersistentHeaderMate {
  /// RenderSliverPersistentHeader RenderSliverPersistentHeader({RenderBox? child, OverScrollHeaderStretchConfiguration? stretchConfiguration})
  RenderSliverPersistentHeaderMate({
// param: {RenderBox? child}
    RenderBox? child,
// param: {OverScrollHeaderStretchConfiguration? stretchConfiguration}
    OverScrollHeaderStretchConfiguration? stretchConfiguration,
  }) {}
}

/// abstract class RenderSliverScrollingPersistentHeader extends RenderSliverPersistentHeader
abstract class RenderSliverScrollingPersistentHeaderMate {
  /// RenderSliverScrollingPersistentHeader RenderSliverScrollingPersistentHeader({RenderBox? child, OverScrollHeaderStretchConfiguration? stretchConfiguration})
  RenderSliverScrollingPersistentHeaderMate({
// param: {RenderBox? child}
    RenderBox? child,
// param: {OverScrollHeaderStretchConfiguration? stretchConfiguration}
    OverScrollHeaderStretchConfiguration? stretchConfiguration,
  }) {}
}

/// abstract class RenderSliverPinnedPersistentHeader extends RenderSliverPersistentHeader
abstract class RenderSliverPinnedPersistentHeaderMate {
  /// RenderSliverPinnedPersistentHeader RenderSliverPinnedPersistentHeader({RenderBox? child, OverScrollHeaderStretchConfiguration? stretchConfiguration, PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration = const PersistentHeaderShowOnScreenConfiguration()})
  RenderSliverPinnedPersistentHeaderMate({
// param: {RenderBox? child}
    RenderBox? child,
// param: {OverScrollHeaderStretchConfiguration? stretchConfiguration}
    OverScrollHeaderStretchConfiguration? stretchConfiguration,
// param: {PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration = const PersistentHeaderShowOnScreenConfiguration()}
    PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration,
  }) {}
}

/// class FloatingHeaderSnapConfiguration
class FloatingHeaderSnapConfigurationMate {
  /// FloatingHeaderSnapConfiguration FloatingHeaderSnapConfiguration({Curve curve = Curves.ease, Duration duration = const Duration(milliseconds: 300)})
  FloatingHeaderSnapConfigurationMate({
// param: {Curve curve = Curves.ease}
    required Curve curve,
// param: {Duration duration = const Duration(milliseconds: 300)}
    required Duration duration,
  }) {}
}

/// abstract class RenderSliverFloatingPersistentHeader extends RenderSliverPersistentHeader
abstract class RenderSliverFloatingPersistentHeaderMate {
  /// RenderSliverFloatingPersistentHeader RenderSliverFloatingPersistentHeader({RenderBox? child, TickerProvider? vsync, FloatingHeaderSnapConfiguration? snapConfiguration, OverScrollHeaderStretchConfiguration? stretchConfiguration, required PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration})
  RenderSliverFloatingPersistentHeaderMate({
// param: {RenderBox? child}
    RenderBox? child,
// param: {TickerProvider? vsync}
    TickerProvider? vsync,
// param: {FloatingHeaderSnapConfiguration? snapConfiguration}
    FloatingHeaderSnapConfiguration? snapConfiguration,
// param: {OverScrollHeaderStretchConfiguration? stretchConfiguration}
    OverScrollHeaderStretchConfiguration? stretchConfiguration,
// param: {required PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration}
    required PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration,
  }) {}
}

/// abstract class RenderSliverFloatingPinnedPersistentHeader extends RenderSliverFloatingPersistentHeader
abstract class RenderSliverFloatingPinnedPersistentHeaderMate {
  /// RenderSliverFloatingPinnedPersistentHeader RenderSliverFloatingPinnedPersistentHeader({RenderBox? child, TickerProvider? vsync, FloatingHeaderSnapConfiguration? snapConfiguration, OverScrollHeaderStretchConfiguration? stretchConfiguration, PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration})
  RenderSliverFloatingPinnedPersistentHeaderMate({
// param: {RenderBox? child}
    RenderBox? child,
// param: {TickerProvider? vsync}
    TickerProvider? vsync,
// param: {FloatingHeaderSnapConfiguration? snapConfiguration}
    FloatingHeaderSnapConfiguration? snapConfiguration,
// param: {OverScrollHeaderStretchConfiguration? stretchConfiguration}
    OverScrollHeaderStretchConfiguration? stretchConfiguration,
// param: {PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration}
    PersistentHeaderShowOnScreenConfiguration? showOnScreenConfiguration,
  }) {}
}
