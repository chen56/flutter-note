// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-09 14:20:10.430199

library;

import 'package:flutter/src/rendering/editable.dart';
import 'dart:ui';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'dart:core';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/rendering/box.dart';

/// class TextSelectionPoint
class TextSelectionPointMate extends TextSelectionPoint {
  /// TextSelectionPoint TextSelectionPoint(Offset point, TextDirection? direction)
  TextSelectionPointMate(
    /// param: Offset point
    Offset point,

    /// param: TextDirection? direction
    TextDirection? direction,
  ) : super(
          point,
          direction,
        ) {}
}

/// class RenderEditable extends RenderBox with RelayoutWhenSystemFontsChangeMixin, ContainerRenderObjectMixin<RenderBox, TextParentData>, RenderBoxContainerDefaultsMixin<RenderBox, TextParentData> implements TextLayoutMetrics
class RenderEditableMate extends RenderEditable {
  /// RenderEditable RenderEditable({InlineSpan? text, required TextDirection textDirection, TextAlign textAlign = TextAlign.start, Color? cursorColor, Color? backgroundCursorColor, ValueNotifier<bool>? showCursor, bool? hasFocus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, int? maxLines = 1, int? minLines, bool expands = false, StrutStyle? strutStyle, Color? selectionColor, double textScaleFactor = 1.0, TextSelection? selection, required ViewportOffset offset, void Function(Rect)? onCaretChanged, bool ignorePointer = false, bool readOnly = false, bool forceLine = true, TextHeightBehavior? textHeightBehavior, TextWidthBasis textWidthBasis = TextWidthBasis.parent, String obscuringCharacter = '•', bool obscureText = false, Locale? locale, double cursorWidth = 1.0, double? cursorHeight, Radius? cursorRadius, bool paintCursorAboveText = false, Offset cursorOffset = Offset.zero, double devicePixelRatio = 1.0, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, bool? enableInteractiveSelection, EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5), TextRange? promptRectRange, Color? promptRectColor, Clip clipBehavior = Clip.hardEdge, required TextSelectionDelegate textSelectionDelegate, RenderEditablePainter? painter, RenderEditablePainter? foregroundPainter, List<RenderBox>? children})
  RenderEditableMate({
    /// param: {InlineSpan? text}
    InlineSpan? text,

    /// param: {required TextDirection textDirection}
    required TextDirection textDirection,

    /// param: {TextAlign textAlign = TextAlign.start}
    required TextAlign textAlign,

    /// param: {Color? cursorColor}
    Color? cursorColor,

    /// param: {Color? backgroundCursorColor}
    Color? backgroundCursorColor,

    /// param: {ValueNotifier<bool>? showCursor}
    ValueNotifier<bool>? showCursor,

    /// param: {bool? hasFocus}
    bool? hasFocus,

    /// param: {required LayerLink startHandleLayerLink}
    required LayerLink startHandleLayerLink,

    /// param: {required LayerLink endHandleLayerLink}
    required LayerLink endHandleLayerLink,

    /// param: {int? maxLines = 1}
    int? maxLines,

    /// param: {int? minLines}
    int? minLines,

    /// param: {bool expands = false}
    required bool expands,

    /// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,

    /// param: {Color? selectionColor}
    Color? selectionColor,

    /// param: {double textScaleFactor = 1.0}
    required double textScaleFactor,

    /// param: {TextSelection? selection}
    TextSelection? selection,

    /// param: {required ViewportOffset offset}
    required ViewportOffset offset,

    /// param: {void Function(Rect)? onCaretChanged}
    CaretChangedHandler? onCaretChanged,

    /// param: {bool ignorePointer = false}
    required bool ignorePointer,

    /// param: {bool readOnly = false}
    required bool readOnly,

    /// param: {bool forceLine = true}
    required bool forceLine,

    /// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,

    /// param: {TextWidthBasis textWidthBasis = TextWidthBasis.parent}
    required TextWidthBasis textWidthBasis,

    /// param: {String obscuringCharacter = '•'}
    required String obscuringCharacter,

    /// param: {bool obscureText = false}
    required bool obscureText,

    /// param: {Locale? locale}
    Locale? locale,

    /// param: {double cursorWidth = 1.0}
    required double cursorWidth,

    /// param: {double? cursorHeight}
    double? cursorHeight,

    /// param: {Radius? cursorRadius}
    Radius? cursorRadius,

    /// param: {bool paintCursorAboveText = false}
    required bool paintCursorAboveText,

    /// param: {Offset cursorOffset = Offset.zero}
    required Offset cursorOffset,

    /// param: {double devicePixelRatio = 1.0}
    required double devicePixelRatio,

    /// param: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight}
    required BoxHeightStyle selectionHeightStyle,

    /// param: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight}
    required BoxWidthStyle selectionWidthStyle,

    /// param: {bool? enableInteractiveSelection}
    bool? enableInteractiveSelection,

    /// param: {EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5)}
    required EdgeInsets floatingCursorAddedMargin,

    /// param: {TextRange? promptRectRange}
    TextRange? promptRectRange,

    /// param: {Color? promptRectColor}
    Color? promptRectColor,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {required TextSelectionDelegate textSelectionDelegate}
    required TextSelectionDelegate textSelectionDelegate,

    /// param: {RenderEditablePainter? painter}
    RenderEditablePainter? painter,

    /// param: {RenderEditablePainter? foregroundPainter}
    RenderEditablePainter? foregroundPainter,

    /// param: {List<RenderBox>? children}
    List<RenderBox>? children,
  }) : super(
          text: text,
          textDirection: textDirection,
          textAlign: textAlign,
          cursorColor: cursorColor,
          backgroundCursorColor: backgroundCursorColor,
          showCursor: showCursor,
          hasFocus: hasFocus,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          strutStyle: strutStyle,
          selectionColor: selectionColor,
          textScaleFactor: textScaleFactor,
          selection: selection,
          offset: offset,
          onCaretChanged: onCaretChanged,
          ignorePointer: ignorePointer,
          readOnly: readOnly,
          forceLine: forceLine,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          locale: locale,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          paintCursorAboveText: paintCursorAboveText,
          cursorOffset: cursorOffset,
          devicePixelRatio: devicePixelRatio,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          enableInteractiveSelection: enableInteractiveSelection,
          floatingCursorAddedMargin: floatingCursorAddedMargin,
          promptRectRange: promptRectRange,
          promptRectColor: promptRectColor,
          clipBehavior: clipBehavior,
          textSelectionDelegate: textSelectionDelegate,
          painter: painter,
          foregroundPainter: foregroundPainter,
          children: children,
        ) {}
}
