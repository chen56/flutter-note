// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.186444

library;

import 'package:flutter/src/rendering/layer.dart';
import 'dart:ui';
import 'dart:core';
export 'package:flutter/foundation.dart'
    show
        DiagnosticPropertiesBuilder,
        DiagnosticsNode,
        DiagnosticsProperty,
        DoubleProperty,
        EnumProperty,
        ErrorDescription,
        ErrorHint,
        ErrorSummary,
        FlagProperty,
        FlutterError,
        InformationCollector,
        IntProperty,
        StringProperty;
export 'package:flutter/gestures.dart' show HitTestEntry, HitTestResult;
export 'package:flutter/painting.dart';

/// class ParentData
class ParentDataMate {
  /// ParentData ParentData()
  ParentDataMate() {}
}

/// class PaintingContext extends ClipContext
class PaintingContextMate {
  /// PaintingContext PaintingContext(ContainerLayer _containerLayer, Rect estimatedBounds)
  PaintingContextMate(
// param: ContainerLayer _containerLayer
    ContainerLayer _containerLayer,
// param: Rect estimatedBounds
    Rect estimatedBounds,
  ) {}
}

/// abstract class Constraints
abstract class ConstraintsMate {
  /// Constraints Constraints()
  ConstraintsMate() {}
}

/// class SemanticsHandle
class SemanticsHandleMate {}

/// class PipelineOwner
class PipelineOwnerMate {
  /// PipelineOwner PipelineOwner({void Function()? onNeedVisualUpdate, void Function()? onSemanticsOwnerCreated, void Function(SemanticsUpdate)? onSemanticsUpdate, void Function()? onSemanticsOwnerDisposed})
  PipelineOwnerMate({
// param: {void Function()? onNeedVisualUpdate}
    void Function()? onNeedVisualUpdate,
// param: {void Function()? onSemanticsOwnerCreated}
    void Function()? onSemanticsOwnerCreated,
// param: {void Function(SemanticsUpdate)? onSemanticsUpdate}
    void Function(
      SemanticsUpdate, [
      SemanticsUpdate,
    ])?
        onSemanticsUpdate,
// param: {void Function()? onSemanticsOwnerDisposed}
    void Function()? onSemanticsOwnerDisposed,
  }) {}
}

/// abstract class RenderObject extends AbstractNode with DiagnosticableTreeMixin implements HitTestTarget
abstract class RenderObjectMate {
  /// RenderObject RenderObject()
  RenderObjectMate() {}
}

/// class DiagnosticsDebugCreator extends DiagnosticsProperty<Object>
class DiagnosticsDebugCreatorMate {
  /// DiagnosticsDebugCreator DiagnosticsDebugCreator(Object value)
  DiagnosticsDebugCreatorMate(
// param: Object value
      Object value) {}
}
