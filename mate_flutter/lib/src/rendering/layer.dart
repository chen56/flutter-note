// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.168512

library;

import 'package:flutter/src/rendering/layer.dart';
import 'dart:ui';
import 'dart:core';
import 'package:vector_math/vector_math_64.dart';

/// class AnnotationEntry<T>
class AnnotationEntryMate<T> {
  /// AnnotationEntry<T> AnnotationEntry({required T annotation, required Offset localPosition})
  AnnotationEntryMate({
// param: {required T annotation}
    required T annotation,
// param: {required Offset localPosition}
    required Offset localPosition,
  }) {}
}

/// class AnnotationResult<T>
class AnnotationResultMate<T> {
  /// AnnotationResult<T> AnnotationResult()
  AnnotationResultMate() {}
}

/// abstract class Layer extends AbstractNode with DiagnosticableTreeMixin
abstract class LayerMate {
  /// Layer Layer()
  LayerMate() {}
}

/// class LayerHandle<T extends Layer>
class LayerHandleMate<T extends Layer> {
  /// LayerHandle<T> LayerHandle([T? _layer])
  LayerHandleMate(
// param: [T? _layer]
      T? _layer) {}
}

/// class PictureLayer extends Layer
class PictureLayerMate {
  /// PictureLayer PictureLayer(Rect canvasBounds)
  PictureLayerMate(
// param: Rect canvasBounds
      Rect canvasBounds) {}
}

/// class TextureLayer extends Layer
class TextureLayerMate {
  /// TextureLayer TextureLayer({required Rect rect, required int textureId, bool freeze = false, FilterQuality filterQuality = ui.FilterQuality.low})
  TextureLayerMate({
// param: {required Rect rect}
    required Rect rect,
// param: {required int textureId}
    required int textureId,
// param: {bool freeze = false}
    required bool freeze,
// param: {FilterQuality filterQuality = ui.FilterQuality.low}
    required FilterQuality filterQuality,
  }) {}
}

/// class PlatformViewLayer extends Layer
class PlatformViewLayerMate {
  /// PlatformViewLayer PlatformViewLayer({required Rect rect, required int viewId})
  PlatformViewLayerMate({
// param: {required Rect rect}
    required Rect rect,
// param: {required int viewId}
    required int viewId,
  }) {}
}

/// class PerformanceOverlayLayer extends Layer
class PerformanceOverlayLayerMate {
  /// PerformanceOverlayLayer PerformanceOverlayLayer({required Rect overlayRect, required int optionsMask, required int rasterizerThreshold, required bool checkerboardRasterCacheImages, required bool checkerboardOffscreenLayers})
  PerformanceOverlayLayerMate({
// param: {required Rect overlayRect}
    required Rect overlayRect,
// param: {required int optionsMask}
    required int optionsMask,
// param: {required int rasterizerThreshold}
    required int rasterizerThreshold,
// param: {required bool checkerboardRasterCacheImages}
    required bool checkerboardRasterCacheImages,
// param: {required bool checkerboardOffscreenLayers}
    required bool checkerboardOffscreenLayers,
  }) {}
}

/// class ContainerLayer extends Layer
class ContainerLayerMate {
  /// ContainerLayer ContainerLayer()
  ContainerLayerMate() {}
}

/// class OffsetLayer extends ContainerLayer
class OffsetLayerMate {
  /// OffsetLayer OffsetLayer({Offset offset = Offset.zero})
  OffsetLayerMate(
      {
// param: {Offset offset = Offset.zero}
      required Offset offset}) {}
}

/// class ClipRectLayer extends ContainerLayer
class ClipRectLayerMate {
  /// ClipRectLayer ClipRectLayer({Rect? clipRect, Clip clipBehavior = Clip.hardEdge})
  ClipRectLayerMate({
// param: {Rect? clipRect}
    Rect? clipRect,
// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) {}
}

/// class ClipRRectLayer extends ContainerLayer
class ClipRRectLayerMate {
  /// ClipRRectLayer ClipRRectLayer({RRect? clipRRect, Clip clipBehavior = Clip.antiAlias})
  ClipRRectLayerMate({
// param: {RRect? clipRRect}
    RRect? clipRRect,
// param: {Clip clipBehavior = Clip.antiAlias}
    required Clip clipBehavior,
  }) {}
}

/// class ClipPathLayer extends ContainerLayer
class ClipPathLayerMate {
  /// ClipPathLayer ClipPathLayer({Path? clipPath, Clip clipBehavior = Clip.antiAlias})
  ClipPathLayerMate({
// param: {Path? clipPath}
    Path? clipPath,
// param: {Clip clipBehavior = Clip.antiAlias}
    required Clip clipBehavior,
  }) {}
}

/// class ColorFilterLayer extends ContainerLayer
class ColorFilterLayerMate {
  /// ColorFilterLayer ColorFilterLayer({ColorFilter? colorFilter})
  ColorFilterLayerMate(
      {
// param: {ColorFilter? colorFilter}
      ColorFilter? colorFilter}) {}
}

/// class ImageFilterLayer extends OffsetLayer
class ImageFilterLayerMate {
  /// ImageFilterLayer ImageFilterLayer({ImageFilter? imageFilter, Offset offset = Offset.zero})
  ImageFilterLayerMate({
// param: {ImageFilter? imageFilter}
    ImageFilter? imageFilter,
// param: {Offset offset = Offset.zero}
    required Offset offset,
  }) {}
}

/// class TransformLayer extends OffsetLayer
class TransformLayerMate {
  /// TransformLayer TransformLayer({Matrix4? transform, Offset offset = Offset.zero})
  TransformLayerMate({
// param: {Matrix4? transform}
    Matrix4? transform,
// param: {Offset offset = Offset.zero}
    required Offset offset,
  }) {}
}

/// class OpacityLayer extends OffsetLayer
class OpacityLayerMate {
  /// OpacityLayer OpacityLayer({int? alpha, Offset offset = Offset.zero})
  OpacityLayerMate({
// param: {int? alpha}
    int? alpha,
// param: {Offset offset = Offset.zero}
    required Offset offset,
  }) {}
}

/// class ShaderMaskLayer extends ContainerLayer
class ShaderMaskLayerMate {
  /// ShaderMaskLayer ShaderMaskLayer({Shader? shader, Rect? maskRect, BlendMode? blendMode})
  ShaderMaskLayerMate({
// param: {Shader? shader}
    Shader? shader,
// param: {Rect? maskRect}
    Rect? maskRect,
// param: {BlendMode? blendMode}
    BlendMode? blendMode,
  }) {}
}

/// class BackdropFilterLayer extends ContainerLayer
class BackdropFilterLayerMate {
  /// BackdropFilterLayer BackdropFilterLayer({ImageFilter? filter, BlendMode blendMode = BlendMode.srcOver})
  BackdropFilterLayerMate({
// param: {ImageFilter? filter}
    ImageFilter? filter,
// param: {BlendMode blendMode = BlendMode.srcOver}
    required BlendMode blendMode,
  }) {}
}

/// class PhysicalModelLayer extends ContainerLayer
class PhysicalModelLayerMate {
  /// PhysicalModelLayer PhysicalModelLayer({Path? clipPath, Clip clipBehavior = Clip.none, double? elevation, Color? color, Color? shadowColor})
  PhysicalModelLayerMate({
// param: {Path? clipPath}
    Path? clipPath,
// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
// param: {double? elevation}
    double? elevation,
// param: {Color? color}
    Color? color,
// param: {Color? shadowColor}
    Color? shadowColor,
  }) {}
}

/// class LayerLink
class LayerLinkMate {
  /// LayerLink LayerLink()
  LayerLinkMate() {}
}

/// class LeaderLayer extends ContainerLayer
class LeaderLayerMate {
  /// LeaderLayer LeaderLayer({required LayerLink link, Offset offset = Offset.zero})
  LeaderLayerMate({
// param: {required LayerLink link}
    required LayerLink link,
// param: {Offset offset = Offset.zero}
    required Offset offset,
  }) {}
}

/// class FollowerLayer extends ContainerLayer
class FollowerLayerMate {
  /// FollowerLayer FollowerLayer({required LayerLink link, bool? showWhenUnlinked = true, Offset? unlinkedOffset = Offset.zero, Offset? linkedOffset = Offset.zero})
  FollowerLayerMate({
// param: {required LayerLink link}
    required LayerLink link,
// param: {bool? showWhenUnlinked = true}
    bool? showWhenUnlinked,
// param: {Offset? unlinkedOffset = Offset.zero}
    Offset? unlinkedOffset,
// param: {Offset? linkedOffset = Offset.zero}
    Offset? linkedOffset,
  }) {}
}

/// class AnnotatedRegionLayer<T extends Object> extends ContainerLayer
class AnnotatedRegionLayerMate<T extends Object> {
  /// AnnotatedRegionLayer<T> AnnotatedRegionLayer(T value, {Size? size, Offset? offset, bool opaque = false})
  AnnotatedRegionLayerMate(
// param: T value
    T value, {
// param: {Size? size}
    Size? size,
// param: {Offset? offset}
    Offset? offset,
// param: {bool opaque = false}
    required bool opaque,
  }) {}
}
