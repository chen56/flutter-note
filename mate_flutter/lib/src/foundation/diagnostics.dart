// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.485483

library;

import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class TextTreeConfiguration
class TextTreeConfigurationMate {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfigurationMate({
// param: {required String prefixLineOne}
    required String prefixLineOne,
// param: {required String prefixOtherLines}
    required String prefixOtherLines,
// param: {required String prefixLastChildLineOne}
    required String prefixLastChildLineOne,
// param: {required String prefixOtherLinesRootNode}
    required String prefixOtherLinesRootNode,
// param: {required String linkCharacter}
    required String linkCharacter,
// param: {required String propertyPrefixIfChildren}
    required String propertyPrefixIfChildren,
// param: {required String propertyPrefixNoChildren}
    required String propertyPrefixNoChildren,
// param: {String lineBreak = '\n'}
    required String lineBreak,
// param: {bool lineBreakProperties = true}
    required bool lineBreakProperties,
// param: {String afterName = ':'}
    required String afterName,
// param: {String afterDescriptionIfBody = ''}
    required String afterDescriptionIfBody,
// param: {String afterDescription = ''}
    required String afterDescription,
// param: {String beforeProperties = ''}
    required String beforeProperties,
// param: {String afterProperties = ''}
    required String afterProperties,
// param: {String mandatoryAfterProperties = ''}
    required String mandatoryAfterProperties,
// param: {String propertySeparator = ''}
    required String propertySeparator,
// param: {String bodyIndent = ''}
    required String bodyIndent,
// param: {String footer = ''}
    required String footer,
// param: {bool showChildren = true}
    required bool showChildren,
// param: {bool addBlankLineIfNoChildren = true}
    required bool addBlankLineIfNoChildren,
// param: {bool isNameOnOwnLine = false}
    required bool isNameOnOwnLine,
// param: {bool isBlankLineBetweenPropertiesAndChildren = true}
    required bool isBlankLineBetweenPropertiesAndChildren,
// param: {String beforeName = ''}
    required String beforeName,
// param: {String suffixLineOne = ''}
    required String suffixLineOne,
// param: {String mandatoryFooter = ''}
    required String mandatoryFooter,
  }) {}
}

/// class TextTreeRenderer
class TextTreeRendererMate {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRendererMate({
// param: {DiagnosticLevel minLevel = DiagnosticLevel.debug}
    required DiagnosticLevel minLevel,
// param: {int wrapWidth = 100}
    required int wrapWidth,
// param: {int wrapWidthProperties = 65}
    required int wrapWidthProperties,
// param: {int maxDescendentsTruncatableNode = -1}
    required int maxDescendentsTruncatableNode,
  }) {}
}

/// abstract class DiagnosticsNode
abstract class DiagnosticsNodeMate {
  /// DiagnosticsNode DiagnosticsNode({required String? name, DiagnosticsTreeStyle? style, bool showName = true, bool showSeparator = true, String? linePrefix})
  DiagnosticsNodeMate({
// param: {required String? name}
    required String? name,
// param: {DiagnosticsTreeStyle? style}
    DiagnosticsTreeStyle? style,
// param: {bool showName = true}
    required bool showName,
// param: {bool showSeparator = true}
    required bool showSeparator,
// param: {String? linePrefix}
    String? linePrefix,
  }) {}
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessagePropertyMate {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessagePropertyMate(
// param: String name
    String name,
// param: String message
    String message, {
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringPropertyMate {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringPropertyMate(
// param: String name
    String name,
// param: String? value
    String? value, {
// param: {String? description}
    String? description,
// param: {String? tooltip}
    String? tooltip,
// param: {bool showName = true}
    required bool showName,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {bool quoted = true}
    required bool quoted,
// param: {String? ifEmpty}
    String? ifEmpty,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class DoubleProperty extends _NumProperty<double>
class DoublePropertyMate {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoublePropertyMate(
// param: String name
    String name,
// param: double? value
    double? value, {
// param: {String? ifNull}
    String? ifNull,
// param: {String? unit}
    String? unit,
// param: {String? tooltip}
    String? tooltip,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {bool showName = true}
    required bool showName,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoublePropertyMate.lazy(
// param: String name
    String name,
// param: double? Function() computeValue
    double? Function() computeValue, {
// param: {String? ifNull}
    String? ifNull,
// param: {bool showName = true}
    required bool showName,
// param: {String? unit}
    String? unit,
// param: {String? tooltip}
    String? tooltip,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class IntProperty extends _NumProperty<int>
class IntPropertyMate {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntPropertyMate(
// param: String name
    String name,
// param: int? value
    int? value, {
// param: {String? ifNull}
    String? ifNull,
// param: {bool showName = true}
    required bool showName,
// param: {String? unit}
    String? unit,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class PercentProperty extends DoubleProperty
class PercentPropertyMate {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentPropertyMate(
// param: String name
    String name,
// param: double? fraction
    double? fraction, {
// param: {String? ifNull}
    String? ifNull,
// param: {bool showName = true}
    required bool showName,
// param: {String? tooltip}
    String? tooltip,
// param: {String? unit}
    String? unit,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagPropertyMate {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagPropertyMate(
// param: String name
    String name, {
// param: {required bool? value}
    required bool? value,
// param: {String? ifTrue}
    String? ifTrue,
// param: {String? ifFalse}
    String? ifFalse,
// param: {bool showName = false}
    required bool showName,
// param: {Object? defaultValue}
    Object? defaultValue,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterablePropertyMate<T> {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterablePropertyMate(
// param: String name
    String name,
// param: Iterable<T>? value
    Iterable<T>? value, {
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {String? ifNull}
    String? ifNull,
// param: {String? ifEmpty = '[]'}
    String? ifEmpty,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {bool showName = true}
    required bool showName,
// param: {bool showSeparator = true}
    required bool showSeparator,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumPropertyMate<T> {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumPropertyMate(
// param: String name
    String name,
// param: T? value
    T? value, {
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagPropertyMate<T> {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagPropertyMate(
// param: String name
    String name,
// param: T? value
    T? value, {
// param: {String? ifPresent}
    String? ifPresent,
// param: {String? ifNull}
    String? ifNull,
// param: {bool showName = false}
    required bool showName,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagPropertyMate.has(
// param: String name
    String name,
// param: T? value
    T? value, {
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummaryMate<T> {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummaryMate(
// param: String name
    String name,
// param: Map<String, T?> value
    Map<String, T?> value, {
// param: {String? ifEmpty}
    String? ifEmpty,
// param: {bool showName = true}
    required bool showName,
// param: {bool showSeparator = true}
    required bool showSeparator,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsPropertyMate<T> {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsPropertyMate(
// param: String? name
    String? name,
// param: T? value
    T? value, {
// param: {String? description}
    String? description,
// param: {String? ifNull}
    String? ifNull,
// param: {String? ifEmpty}
    String? ifEmpty,
// param: {bool showName = true}
    required bool showName,
// param: {bool showSeparator = true}
    required bool showSeparator,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {String? tooltip}
    String? tooltip,
// param: {bool missingIfNull = false}
    required bool missingIfNull,
// param: {String? linePrefix}
    String? linePrefix,
// param: {bool expandableValue = false}
    required bool expandableValue,
// param: {bool allowWrap = true}
    required bool allowWrap,
// param: {bool allowNameWrap = true}
    required bool allowNameWrap,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsPropertyMate.lazy(
// param: String? name
    String? name,
// param: T? Function() computeValue
    T? Function() computeValue, {
// param: {String? description}
    String? description,
// param: {String? ifNull}
    String? ifNull,
// param: {String? ifEmpty}
    String? ifEmpty,
// param: {bool showName = true}
    required bool showName,
// param: {bool showSeparator = true}
    required bool showSeparator,
// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,
// param: {String? tooltip}
    String? tooltip,
// param: {bool missingIfNull = false}
    required bool missingIfNull,
// param: {bool expandableValue = false}
    required bool expandableValue,
// param: {bool allowWrap = true}
    required bool allowWrap,
// param: {bool allowNameWrap = true}
    required bool allowNameWrap,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) {}
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNodeMate<T extends Diagnosticable> {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNodeMate({
// param: {String? name}
    String? name,
// param: {required T value}
    required T value,
// param: {required DiagnosticsTreeStyle? style}
    required DiagnosticsTreeStyle? style,
  }) {}
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNodeMate {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNodeMate({
// param: {String? name}
    String? name,
// param: {required DiagnosticableTree value}
    required DiagnosticableTree value,
// param: {required DiagnosticsTreeStyle? style}
    required DiagnosticsTreeStyle? style,
  }) {}
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilderMate {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder()
  DiagnosticPropertiesBuilderMate() {}

  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilderMate.fromProperties(
// param: List<DiagnosticsNode> properties
      List<DiagnosticsNode> properties) {}
}

/// abstract class DiagnosticableTree with Diagnosticable
abstract class DiagnosticableTreeMate {
  /// DiagnosticableTree DiagnosticableTree()
  DiagnosticableTreeMate() {}
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlockMate {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlockMate({
// param: {String? name}
    String? name,
// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace}
    required DiagnosticsTreeStyle style,
// param: {bool showName = true}
    required bool showName,
// param: {bool showSeparator = true}
    required bool showSeparator,
// param: {String? linePrefix}
    String? linePrefix,
// param: {Object? value}
    Object? value,
// param: {String? description}
    String? description,
// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
// param: {bool allowTruncate = false}
    required bool allowTruncate,
// param: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]}
    required List<DiagnosticsNode> children,
// param: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]}
    required List<DiagnosticsNode> properties,
  }) {}
}

/// abstract class DiagnosticsSerializationDelegate
abstract class DiagnosticsSerializationDelegateMate {}
