// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:00.476981

library;

import 'dart:core';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/foundation/diagnostics.dart';
export 'basic_types.dart' show IterableFilter;
export 'diagnostics.dart' show DiagnosticLevel, DiagnosticPropertiesBuilder, DiagnosticsNode, DiagnosticsTreeStyle;
export 'stack_frame.dart' show StackFrame;

/// class PartialStackFrame
class PartialStackFrameMate {
  /// PartialStackFrame PartialStackFrame({required Pattern package, required String className, required String method})
  PartialStackFrameMate({
// param: {required Pattern package}
    required Pattern package,
// param: {required String className}
    required String className,
// param: {required String method}
    required String method,
  }) {}
}

/// abstract class StackFilter
abstract class StackFilterMate {
  /// StackFilter StackFilter()
  StackFilterMate() {}
}

/// class RepetitiveStackFrameFilter extends StackFilter
class RepetitiveStackFrameFilterMate {
  /// RepetitiveStackFrameFilter RepetitiveStackFrameFilter({required List<PartialStackFrame> frames, required String replacement})
  RepetitiveStackFrameFilterMate({
// param: {required List<PartialStackFrame> frames}
    required List<PartialStackFrame> frames,
// param: {required String replacement}
    required String replacement,
  }) {}
}

/// class ErrorDescription extends _ErrorDiagnostic
class ErrorDescriptionMate {
  /// ErrorDescription ErrorDescription(String message)
  ErrorDescriptionMate(
// param: String message
      String message) {}
}

/// class ErrorSummary extends _ErrorDiagnostic
class ErrorSummaryMate {
  /// ErrorSummary ErrorSummary(String message)
  ErrorSummaryMate(
// param: String message
      String message) {}
}

/// class ErrorHint extends _ErrorDiagnostic
class ErrorHintMate {
  /// ErrorHint ErrorHint(String message)
  ErrorHintMate(
// param: String message
      String message) {}
}

/// class ErrorSpacer extends DiagnosticsProperty<void>
class ErrorSpacerMate {
  /// ErrorSpacer ErrorSpacer()
  ErrorSpacerMate() {}
}

/// class FlutterErrorDetails with Diagnosticable
class FlutterErrorDetailsMate {
  /// FlutterErrorDetails FlutterErrorDetails({required Object exception, StackTrace? stack, String? library = 'Flutter framework', DiagnosticsNode? context, Iterable<String> Function(Iterable<String>)? stackFilter, Iterable<DiagnosticsNode> Function()? informationCollector, bool silent = false})
  FlutterErrorDetailsMate({
// param: {required Object exception}
    required Object exception,
// param: {StackTrace? stack}
    StackTrace? stack,
// param: {String? library = 'Flutter framework'}
    String? library,
// param: {DiagnosticsNode? context}
    DiagnosticsNode? context,
// param: {Iterable<String> Function(Iterable<String>)? stackFilter}
    Iterable<String> Function(
      Iterable<String>, [
      Iterable<String>,
    ])?
        stackFilter,
// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    Iterable<DiagnosticsNode> Function()? informationCollector,
// param: {bool silent = false}
    required bool silent,
  }) {}
}

/// class FlutterError extends Error with DiagnosticableTreeMixin implements AssertionError
class FlutterErrorMate {
  /// FlutterError FlutterError.fromParts(List<DiagnosticsNode> diagnostics)
  FlutterErrorMate.fromParts(
// param: List<DiagnosticsNode> diagnostics
      List<DiagnosticsNode> diagnostics) {}
}

/// class DiagnosticsStackTrace extends DiagnosticsBlock
class DiagnosticsStackTraceMate {
  /// DiagnosticsStackTrace DiagnosticsStackTrace(String name, StackTrace? stack, {Iterable<String> Function(Iterable<String>)? stackFilter, bool showSeparator = true})
  DiagnosticsStackTraceMate(
// param: String name
    String name,
// param: StackTrace? stack
    StackTrace? stack, {
// param: {Iterable<String> Function(Iterable<String>)? stackFilter}
    Iterable<String> Function(
      Iterable<String>, [
      Iterable<String>,
    ])?
        stackFilter,
// param: {bool showSeparator = true}
    required bool showSeparator,
  }) {}

  /// DiagnosticsStackTrace DiagnosticsStackTrace.singleFrame(String name, {required String frame, bool showSeparator = true})
  DiagnosticsStackTraceMate.singleFrame(
// param: String name
    String name, {
// param: {required String frame}
    required String frame,
// param: {bool showSeparator = true}
    required bool showSeparator,
  }) {}
}
