// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.157095

library;

import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/text_painter.dart';
export 'package:flutter/services.dart' show TextRange, TextSelection;

/// class PlaceholderDimensions
class PlaceholderDimensionsMate {
  /// PlaceholderDimensions PlaceholderDimensions({required Size size, required PlaceholderAlignment alignment, TextBaseline? baseline, double? baselineOffset})
  PlaceholderDimensionsMate({
// param: {required Size size}
    required Size size,
// param: {required PlaceholderAlignment alignment}
    required PlaceholderAlignment alignment,
// param: {TextBaseline? baseline}
    TextBaseline? baseline,
// param: {double? baselineOffset}
    double? baselineOffset,
  }) {}
}

/// class WordBoundary extends TextBoundary
class WordBoundaryMate {}

/// class TextPainter
class TextPainterMate {
  /// TextPainter TextPainter({InlineSpan? text, TextAlign textAlign = TextAlign.start, TextDirection? textDirection, double textScaleFactor = 1.0, int? maxLines, String? ellipsis, Locale? locale, StrutStyle? strutStyle, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior})
  TextPainterMate({
// param: {InlineSpan? text}
    InlineSpan? text,
// param: {TextAlign textAlign = TextAlign.start}
    required TextAlign textAlign,
// param: {TextDirection? textDirection}
    TextDirection? textDirection,
// param: {double textScaleFactor = 1.0}
    required double textScaleFactor,
// param: {int? maxLines}
    int? maxLines,
// param: {String? ellipsis}
    String? ellipsis,
// param: {Locale? locale}
    Locale? locale,
// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,
// param: {TextWidthBasis textWidthBasis = TextWidthBasis.parent}
    required TextWidthBasis textWidthBasis,
// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,
  }) {}
}
