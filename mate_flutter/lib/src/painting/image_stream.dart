// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 00:36:14.966268

import 'package:flutter/src/painting/image_stream.dart';
import 'dart:ui';
import 'dart:core';
import 'dart:async';
import 'package:flutter/src/foundation/assertions.dart';

/// class ImageInfo
class ImageInfoMate extends ImageInfo {
  /// ImageInfo ImageInfo({required Image image, double scale = 1.0, String? debugLabel})
  ImageInfoMate({
    /// param: {required Image image}
    required Image image,

    /// param: {double scale = 1.0}
    required double scale,

    /// param: {String? debugLabel}
    String? debugLabel,
  }) : super(
          image: image,
          scale: scale,
          debugLabel: debugLabel,
        ) {}
}

/// class ImageStreamListener
class ImageStreamListenerMate extends ImageStreamListener {
  /// ImageStreamListener ImageStreamListener(void Function(ImageInfo, bool) onImage, {void Function(ImageChunkEvent)? onChunk, void Function(Object, StackTrace?)? onError})
  ImageStreamListenerMate(
    /// param: void Function(ImageInfo, bool) onImage
    ImageListener onImage, {
    /// param: {void Function(ImageChunkEvent)? onChunk}
    ImageChunkListener? onChunk,

    /// param: {void Function(Object, StackTrace?)? onError}
    ImageErrorListener? onError,
  }) : super(
          onImage,
          onChunk: onChunk,
          onError: onError,
        ) {}
}

/// class ImageChunkEvent with Diagnosticable
class ImageChunkEventMate extends ImageChunkEvent {
  /// ImageChunkEvent ImageChunkEvent({required int cumulativeBytesLoaded, required int? expectedTotalBytes})
  ImageChunkEventMate({
    /// param: {required int cumulativeBytesLoaded}
    required int cumulativeBytesLoaded,

    /// param: {required int? expectedTotalBytes}
    required int? expectedTotalBytes,
  }) : super(
          cumulativeBytesLoaded: cumulativeBytesLoaded,
          expectedTotalBytes: expectedTotalBytes,
        ) {}
}

/// class OneFrameImageStreamCompleter extends ImageStreamCompleter
class OneFrameImageStreamCompleterMate extends OneFrameImageStreamCompleter {
  /// OneFrameImageStreamCompleter OneFrameImageStreamCompleter(Future<ImageInfo> image, {Iterable<DiagnosticsNode> Function()? informationCollector})
  OneFrameImageStreamCompleterMate(
    /// param: Future<ImageInfo> image
    Future<ImageInfo> image, {
    /// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    InformationCollector? informationCollector,
  }) : super(
          image,
          informationCollector: informationCollector,
        ) {}
}

/// class MultiFrameImageStreamCompleter extends ImageStreamCompleter
class MultiFrameImageStreamCompleterMate extends MultiFrameImageStreamCompleter {
  /// MultiFrameImageStreamCompleter MultiFrameImageStreamCompleter({required Future<Codec> codec, required double scale, String? debugLabel, Stream<ImageChunkEvent>? chunkEvents, Iterable<DiagnosticsNode> Function()? informationCollector})
  MultiFrameImageStreamCompleterMate({
    /// param: {required Future<Codec> codec}
    required Future<Codec> codec,

    /// param: {required double scale}
    required double scale,

    /// param: {String? debugLabel}
    String? debugLabel,

    /// param: {Stream<ImageChunkEvent>? chunkEvents}
    Stream<ImageChunkEvent>? chunkEvents,

    /// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    InformationCollector? informationCollector,
  }) : super(
          codec: codec,
          scale: scale,
          debugLabel: debugLabel,
          chunkEvents: chunkEvents,
          informationCollector: informationCollector,
        ) {}
}
