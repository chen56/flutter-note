// /// Generated by mat_flutter, please don't edit! Created time: 2023-03-09 00:16:01.111618

library;

import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/image_stream.dart';
import 'dart:async';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class ImageInfo
class ImageInfoMate {
  /// ImageInfo ImageInfo({required Image image, double scale = 1.0, String? debugLabel})
  ImageInfoMate({
// param: {required Image image}
    required Image image,
// param: {double scale = 1.0}
    required double scale,
// param: {String? debugLabel}
    String? debugLabel,
  }) {}
}

/// class ImageStreamListener
class ImageStreamListenerMate {
  /// ImageStreamListener ImageStreamListener(void Function(ImageInfo, bool) onImage, {void Function(ImageChunkEvent)? onChunk, void Function(Object, StackTrace?)? onError})
  ImageStreamListenerMate(
// param: void Function(ImageInfo, bool) onImage
    void Function(
      ImageInfo,
      bool, [
      ImageInfo,
      bool,
    ])
        onImage, {
// param: {void Function(ImageChunkEvent)? onChunk}
    void Function(
      ImageChunkEvent, [
      ImageChunkEvent,
    ])?
        onChunk,
// param: {void Function(Object, StackTrace?)? onError}
    void Function(
      Object,
      StackTrace?, [
      Object,
      StackTrace?,
    ])?
        onError,
  }) {}
}

/// class ImageChunkEvent with Diagnosticable
class ImageChunkEventMate {
  /// ImageChunkEvent ImageChunkEvent({required int cumulativeBytesLoaded, required int? expectedTotalBytes})
  ImageChunkEventMate({
// param: {required int cumulativeBytesLoaded}
    required int cumulativeBytesLoaded,
// param: {required int? expectedTotalBytes}
    required int? expectedTotalBytes,
  }) {}
}

/// class ImageStream with Diagnosticable
class ImageStreamMate {
  /// ImageStream ImageStream()
  ImageStreamMate() {}
}

/// class ImageStreamCompleterHandle
class ImageStreamCompleterHandleMate {}

/// abstract class ImageStreamCompleter with Diagnosticable
abstract class ImageStreamCompleterMate {
  /// ImageStreamCompleter ImageStreamCompleter()
  ImageStreamCompleterMate() {}
}

/// class OneFrameImageStreamCompleter extends ImageStreamCompleter
class OneFrameImageStreamCompleterMate {
  /// OneFrameImageStreamCompleter OneFrameImageStreamCompleter(Future<ImageInfo> image, {Iterable<DiagnosticsNode> Function()? informationCollector})
  OneFrameImageStreamCompleterMate(
// param: Future<ImageInfo> image
    Future<ImageInfo> image, {
// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    Iterable<DiagnosticsNode> Function()? informationCollector,
  }) {}
}

/// class MultiFrameImageStreamCompleter extends ImageStreamCompleter
class MultiFrameImageStreamCompleterMate {
  /// MultiFrameImageStreamCompleter MultiFrameImageStreamCompleter({required Future<Codec> codec, required double scale, String? debugLabel, Stream<ImageChunkEvent>? chunkEvents, Iterable<DiagnosticsNode> Function()? informationCollector})
  MultiFrameImageStreamCompleterMate({
// param: {required Future<Codec> codec}
    required Future<Codec> codec,
// param: {required double scale}
    required double scale,
// param: {String? debugLabel}
    String? debugLabel,
// param: {Stream<ImageChunkEvent>? chunkEvents}
    Stream<ImageChunkEvent>? chunkEvents,
// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    Iterable<DiagnosticsNode> Function()? informationCollector,
  }) {}
}
