// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/text_style.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:note/mate.dart';

/// class TextStyle with Diagnosticable
class TextStyle$Mate extends TextStyle with Mate<TextStyle$Mate> {
  /// TextStyle TextStyle({bool inherit = true, Color? color, Color? backgroundColor, double? fontSize, FontWeight? fontWeight, FontStyle? fontStyle, double? letterSpacing, double? wordSpacing, TextBaseline? textBaseline, double? height, TextLeadingDistribution? leadingDistribution, Locale? locale, Paint? foreground, Paint? background, List<Shadow>? shadows, List<FontFeature>? fontFeatures, List<FontVariation>? fontVariations, TextDecoration? decoration, Color? decorationColor, TextDecorationStyle? decorationStyle, double? decorationThickness, String? debugLabel, String? fontFamily, List<String>? fontFamilyFallback, String? package, TextOverflow? overflow})
  TextStyle$Mate({
    /// optionalParameters: {bool inherit = true} , hasDefaultValue:true, defaultValueCode:true
    required bool inherit,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? fontSize} , hasDefaultValue:false, defaultValueCode:null
    double? fontSize,

    /// optionalParameters: {FontWeight? fontWeight} , hasDefaultValue:false, defaultValueCode:null
    FontWeight? fontWeight,

    /// optionalParameters: {FontStyle? fontStyle} , hasDefaultValue:false, defaultValueCode:null
    FontStyle? fontStyle,

    /// optionalParameters: {double? letterSpacing} , hasDefaultValue:false, defaultValueCode:null
    double? letterSpacing,

    /// optionalParameters: {double? wordSpacing} , hasDefaultValue:false, defaultValueCode:null
    double? wordSpacing,

    /// optionalParameters: {TextBaseline? textBaseline} , hasDefaultValue:false, defaultValueCode:null
    TextBaseline? textBaseline,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {TextLeadingDistribution? leadingDistribution} , hasDefaultValue:false, defaultValueCode:null
    TextLeadingDistribution? leadingDistribution,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {Paint? foreground} , hasDefaultValue:false, defaultValueCode:null
    Paint? foreground,

    /// optionalParameters: {Paint? background} , hasDefaultValue:false, defaultValueCode:null
    Paint? background,

    /// optionalParameters: {List<Shadow>? shadows} , hasDefaultValue:false, defaultValueCode:null
    List<Shadow>? shadows,

    /// optionalParameters: {List<FontFeature>? fontFeatures} , hasDefaultValue:false, defaultValueCode:null
    List<FontFeature>? fontFeatures,

    /// optionalParameters: {List<FontVariation>? fontVariations} , hasDefaultValue:false, defaultValueCode:null
    List<FontVariation>? fontVariations,

    /// optionalParameters: {TextDecoration? decoration} , hasDefaultValue:false, defaultValueCode:null
    TextDecoration? decoration,

    /// optionalParameters: {Color? decorationColor} , hasDefaultValue:false, defaultValueCode:null
    Color? decorationColor,

    /// optionalParameters: {TextDecorationStyle? decorationStyle} , hasDefaultValue:false, defaultValueCode:null
    TextDecorationStyle? decorationStyle,

    /// optionalParameters: {double? decorationThickness} , hasDefaultValue:false, defaultValueCode:null
    double? decorationThickness,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,

    /// optionalParameters: {String? fontFamily} , hasDefaultValue:false, defaultValueCode:null
    String? fontFamily,

    /// optionalParameters: {List<String>? fontFamilyFallback} , hasDefaultValue:false, defaultValueCode:null
    List<String>? fontFamilyFallback,

    /// optionalParameters: {String? package} , hasDefaultValue:false, defaultValueCode:null
    String? package,

    /// optionalParameters: {TextOverflow? overflow} , hasDefaultValue:false, defaultValueCode:null
    TextOverflow? overflow,
  }) : super(
          inherit: inherit,
          color: color,
          backgroundColor: backgroundColor,
          fontSize: fontSize,
          fontWeight: fontWeight,
          fontStyle: fontStyle,
          letterSpacing: letterSpacing,
          wordSpacing: wordSpacing,
          textBaseline: textBaseline,
          height: height,
          leadingDistribution: leadingDistribution,
          locale: locale,
          foreground: foreground,
          background: background,
          shadows: shadows,
          fontFeatures: fontFeatures,
          fontVariations: fontVariations,
          decoration: decoration,
          decorationColor: decorationColor,
          decorationStyle: decorationStyle,
          decorationThickness: decorationThickness,
          debugLabel: debugLabel,
          fontFamily: fontFamily,
          fontFamilyFallback: fontFamilyFallback,
          package: package,
          overflow: overflow,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextStyle$Mate(
        inherit: p.getValue('inherit'),
        color: p.getValue('color'),
        backgroundColor: p.getValue('backgroundColor'),
        fontSize: p.getValue('fontSize'),
        fontWeight: p.getValue('fontWeight'),
        fontStyle: p.getValue('fontStyle'),
        letterSpacing: p.getValue('letterSpacing'),
        wordSpacing: p.getValue('wordSpacing'),
        textBaseline: p.getValue('textBaseline'),
        height: p.getValue('height'),
        leadingDistribution: p.getValue('leadingDistribution'),
        locale: p.getValue('locale'),
        foreground: p.getValue('foreground'),
        background: p.getValue('background'),
        shadows: p.getValue('shadows'),
        fontFeatures: p.getValue('fontFeatures'),
        fontVariations: p.getValue('fontVariations'),
        decoration: p.getValue('decoration'),
        decorationColor: p.getValue('decorationColor'),
        decorationStyle: p.getValue('decorationStyle'),
        decorationThickness: p.getValue('decorationThickness'),
        debugLabel: p.getValue('debugLabel'),
        fontFamily: p.getValue('fontFamily'),
        fontFamilyFallback: p.getValue('fontFamilyFallback'),
        package: p.getValue('package'),
        overflow: p.getValue('overflow'),
      ),
    );
    mateParams.set(name: 'inherit', init: inherit);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'fontSize', init: fontSize);
    mateParams.set(name: 'fontWeight', init: fontWeight);
    mateParams.set(name: 'fontStyle', init: fontStyle);
    mateParams.set(name: 'letterSpacing', init: letterSpacing);
    mateParams.set(name: 'wordSpacing', init: wordSpacing);
    mateParams.set(name: 'textBaseline', init: textBaseline);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'leadingDistribution', init: leadingDistribution);
    mateParams.set(name: 'locale', init: locale);
    mateParams.set(name: 'foreground', init: foreground);
    mateParams.set(name: 'background', init: background);
    mateParams.set(name: 'shadows', init: shadows);
    mateParams.set(name: 'fontFeatures', init: fontFeatures);
    mateParams.set(name: 'fontVariations', init: fontVariations);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'decorationColor', init: decorationColor);
    mateParams.set(name: 'decorationStyle', init: decorationStyle);
    mateParams.set(name: 'decorationThickness', init: decorationThickness);
    mateParams.set(name: 'debugLabel', init: debugLabel);
    mateParams.set(name: 'fontFamily', init: fontFamily);
    mateParams.set(name: 'fontFamilyFallback', init: fontFamilyFallback);
    mateParams.set(name: 'package', init: package);
    mateParams.set(name: 'overflow', init: overflow);
  }
}
