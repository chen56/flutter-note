// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/painting/decoration_image.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:core';
import 'package:flutter/src/painting/image_stream.dart';
import 'dart:ui';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:note/mate.dart';
import 'package:vector_math/vector_math_64.dart';

/// class DecorationImage
class DecorationImage$Mate extends DecorationImage with Mate<DecorationImage$Mate> {
  /// DecorationImage DecorationImage({required ImageProvider<Object> image, void Function(Object, StackTrace?)? onError, ColorFilter? colorFilter, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, Rect? centerSlice, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, double scale = 1.0, double opacity = 1.0, FilterQuality filterQuality = FilterQuality.low, bool invertColors = false, bool isAntiAlias = false})
  DecorationImage$Mate({
    /// param: {required ImageProvider<Object> image}
    required ImageProvider<Object> image,

    /// param: {void Function(Object, StackTrace?)? onError}
    ImageErrorListener? onError,

    /// param: {ColorFilter? colorFilter}
    ColorFilter? colorFilter,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {double scale = 1.0}
    required double scale,

    /// param: {double opacity = 1.0}
    required double opacity,

    /// param: {FilterQuality filterQuality = FilterQuality.low}
    required FilterQuality filterQuality,

    /// param: {bool invertColors = false}
    required bool invertColors,

    /// param: {bool isAntiAlias = false}
    required bool isAntiAlias,
  }) : super(
          image: image,
          onError: onError,
          colorFilter: colorFilter,
          fit: fit,
          alignment: alignment,
          centerSlice: centerSlice,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          scale: scale,
          opacity: opacity,
          filterQuality: filterQuality,
          invertColors: invertColors,
          isAntiAlias: isAntiAlias,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DecorationImage$Mate(
        image: p.getValue('image'),
        onError: p.getValue('onError'),
        colorFilter: p.getValue('colorFilter'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        centerSlice: p.getValue('centerSlice'),
        repeat: p.getValue('repeat'),
        matchTextDirection: p.getValue('matchTextDirection'),
        scale: p.getValue('scale'),
        opacity: p.getValue('opacity'),
        filterQuality: p.getValue('filterQuality'),
        invertColors: p.getValue('invertColors'),
        isAntiAlias: p.getValue('isAntiAlias'),
      ),
    );
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'onError', init: onError);
    mateParams.set(name: 'colorFilter', init: colorFilter);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'invertColors', init: invertColors);
    mateParams.set(name: 'isAntiAlias', init: isAntiAlias);
  }
}

/// class ImageTilingInfo
class ImageTilingInfo$Mate extends ImageTilingInfo with Mate<ImageTilingInfo$Mate> {
  /// ImageTilingInfo ImageTilingInfo({required TileMode tmx, required TileMode tmy, required Matrix4 transform})
  ImageTilingInfo$Mate({
    /// param: {required TileMode tmx}
    required TileMode tmx,

    /// param: {required TileMode tmy}
    required TileMode tmy,

    /// param: {required Matrix4 transform}
    required Matrix4 transform,
  }) : super(
          tmx: tmx,
          tmy: tmy,
          transform: transform,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ImageTilingInfo$Mate(
        tmx: p.getValue('tmx'),
        tmy: p.getValue('tmy'),
        transform: p.getValue('transform'),
      ),
    );
    mateParams.set(name: 'tmx', init: tmx);
    mateParams.set(name: 'tmy', init: tmy);
    mateParams.set(name: 'transform', init: transform);
  }
}
