// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/services/asset_bundle.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/foundation/platform.dart';
import 'package:note/mate.dart';
import 'dart:io';
import 'dart:typed_data';

/// class ImageConfiguration
class ImageConfiguration$Mate extends ImageConfiguration with Mate<ImageConfiguration$Mate> {
  /// ImageConfiguration ImageConfiguration({AssetBundle? bundle, double? devicePixelRatio, Locale? locale, TextDirection? textDirection, Size? size, TargetPlatform? platform})
  ImageConfiguration$Mate({
    /// param: {AssetBundle? bundle}
    AssetBundle? bundle,

    /// param: {double? devicePixelRatio}
    double? devicePixelRatio,

    /// param: {Locale? locale}
    Locale? locale,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {Size? size}
    Size? size,

    /// param: {TargetPlatform? platform}
    TargetPlatform? platform,
  }) : super(
          bundle: bundle,
          devicePixelRatio: devicePixelRatio,
          locale: locale,
          textDirection: textDirection,
          size: size,
          platform: platform,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ImageConfiguration$Mate(
        bundle: p.getValue('bundle'),
        devicePixelRatio: p.getValue('devicePixelRatio'),
        locale: p.getValue('locale'),
        textDirection: p.getValue('textDirection'),
        size: p.getValue('size'),
        platform: p.getValue('platform'),
      ),
    );
    mateParams.set(name: 'bundle', init: bundle);
    mateParams.set(name: 'devicePixelRatio', init: devicePixelRatio);
    mateParams.set(name: 'locale', init: locale);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'size', init: size);
    mateParams.set(name: 'platform', init: platform);
  }
}

/// class AssetBundleImageKey
class AssetBundleImageKey$Mate extends AssetBundleImageKey with Mate<AssetBundleImageKey$Mate> {
  /// AssetBundleImageKey AssetBundleImageKey({required AssetBundle bundle, required String name, required double scale})
  AssetBundleImageKey$Mate({
    /// param: {required AssetBundle bundle}
    required AssetBundle bundle,

    /// param: {required String name}
    required String name,

    /// param: {required double scale}
    required double scale,
  }) : super(
          bundle: bundle,
          name: name,
          scale: scale,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AssetBundleImageKey$Mate(
        bundle: p.getValue('bundle'),
        name: p.getValue('name'),
        scale: p.getValue('scale'),
      ),
    );
    mateParams.set(name: 'bundle', init: bundle);
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'scale', init: scale);
  }
}

/// class ResizeImage extends ImageProvider<ResizeImageKey>
class ResizeImage$Mate extends ResizeImage with Mate<ResizeImage$Mate> {
  /// ResizeImage ResizeImage(ImageProvider<Object> imageProvider, {int? width, int? height, bool allowUpscaling = false})
  ResizeImage$Mate(
    /// param: ImageProvider<Object> imageProvider
    ImageProvider<Object> imageProvider, {
    /// param: {int? width}
    int? width,

    /// param: {int? height}
    int? height,

    /// param: {bool allowUpscaling = false}
    required bool allowUpscaling,
  }) : super(
          imageProvider,
          width: width,
          height: height,
          allowUpscaling: allowUpscaling,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ResizeImage$Mate(
        p.getValue('imageProvider'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        allowUpscaling: p.getValue('allowUpscaling'),
      ),
    );
    mateParams.set(name: 'imageProvider', init: imageProvider);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'allowUpscaling', init: allowUpscaling);
  }
}

/// class FileImage extends ImageProvider<FileImage>
class FileImage$Mate extends FileImage with Mate<FileImage$Mate> {
  /// FileImage FileImage(File file, {double scale = 1.0})
  FileImage$Mate(
    /// param: File file
    File file, {
    /// param: {double scale = 1.0}
    required double scale,
  }) : super(
          file,
          scale: scale,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FileImage$Mate(
        p.getValue('file'),
        scale: p.getValue('scale'),
      ),
    );
    mateParams.set(name: 'file', init: file);
    mateParams.set(name: 'scale', init: scale);
  }
}

/// class MemoryImage extends ImageProvider<MemoryImage>
class MemoryImage$Mate extends MemoryImage with Mate<MemoryImage$Mate> {
  /// MemoryImage MemoryImage(Uint8List bytes, {double scale = 1.0})
  MemoryImage$Mate(
    /// param: Uint8List bytes
    Uint8List bytes, {
    /// param: {double scale = 1.0}
    required double scale,
  }) : super(
          bytes,
          scale: scale,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MemoryImage$Mate(
        p.getValue('bytes'),
        scale: p.getValue('scale'),
      ),
    );
    mateParams.set(name: 'bytes', init: bytes);
    mateParams.set(name: 'scale', init: scale);
  }
}

/// class ExactAssetImage extends AssetBundleImageProvider
class ExactAssetImage$Mate extends ExactAssetImage with Mate<ExactAssetImage$Mate> {
  /// ExactAssetImage ExactAssetImage(String assetName, {double scale = 1.0, AssetBundle? bundle, String? package})
  ExactAssetImage$Mate(
    /// param: String assetName
    String assetName, {
    /// param: {double scale = 1.0}
    required double scale,

    /// param: {AssetBundle? bundle}
    AssetBundle? bundle,

    /// param: {String? package}
    String? package,
  }) : super(
          assetName,
          scale: scale,
          bundle: bundle,
          package: package,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExactAssetImage$Mate(
        p.getValue('assetName'),
        scale: p.getValue('scale'),
        bundle: p.getValue('bundle'),
        package: p.getValue('package'),
      ),
    );
    mateParams.set(name: 'assetName', init: assetName);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'bundle', init: bundle);
    mateParams.set(name: 'package', init: package);
  }
}

/// class NetworkImageLoadException implements Exception
class NetworkImageLoadException$Mate extends NetworkImageLoadException with Mate<NetworkImageLoadException$Mate> {
  /// NetworkImageLoadException NetworkImageLoadException({required int statusCode, required Uri uri})
  NetworkImageLoadException$Mate({
    /// param: {required int statusCode}
    required int statusCode,

    /// param: {required Uri uri}
    required Uri uri,
  }) : super(
          statusCode: statusCode,
          uri: uri,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NetworkImageLoadException$Mate(
        statusCode: p.getValue('statusCode'),
        uri: p.getValue('uri'),
      ),
    );
    mateParams.set(name: 'statusCode', init: statusCode);
    mateParams.set(name: 'uri', init: uri);
  }
}
