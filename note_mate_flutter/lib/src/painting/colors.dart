// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:25.925817

import 'package:flutter/src/painting/colors.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class HSVColor
class HSVColor$Mate extends HSVColor {
  /// HSVColor HSVColor.fromAHSV(double alpha, double hue, double saturation, double value)
  HSVColor$Mate.fromAHSV(
    /// param: double alpha
    double alpha,

    /// param: double hue
    double hue,

    /// param: double saturation
    double saturation,

    /// param: double value
    double value,
  ) : super.fromAHSV(
          alpha,
          hue,
          saturation,
          value,
        ) {}
}

/// class HSLColor
class HSLColor$Mate extends HSLColor {
  /// HSLColor HSLColor.fromAHSL(double alpha, double hue, double saturation, double lightness)
  HSLColor$Mate.fromAHSL(
    /// param: double alpha
    double alpha,

    /// param: double hue
    double hue,

    /// param: double saturation
    double saturation,

    /// param: double lightness
    double lightness,
  ) : super.fromAHSL(
          alpha,
          hue,
          saturation,
          lightness,
        ) {}
}

/// class ColorSwatch<T> extends Color
class ColorSwatch$Mate<T> extends ColorSwatch<T> {
  /// ColorSwatch<T> ColorSwatch(int primary, Map<T, Color> _swatch)
  ColorSwatch$Mate(
    /// param: int primary
    int primary,

    /// param: Map<T, Color> _swatch
    Map<T, Color> _swatch,
  ) : super(
          primary,
          _swatch,
        ) {}
}

/// class ColorProperty extends DiagnosticsProperty<Color>
class ColorProperty$Mate extends ColorProperty {
  /// ColorProperty ColorProperty(String name, Color? value, {bool showName = true, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  ColorProperty$Mate(
    /// param: String name
    String name,

    /// param: Color? value
    Color? value, {
    /// param: {bool showName = true}
    required bool showName,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          showName: showName,
          defaultValue: defaultValue,
          style: style,
          level: level,
        ) {}
}
