// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/cupertino/colors.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';

/// class CupertinoDynamicColor extends Color with Diagnosticable
class CupertinoDynamicColor$Mate extends CupertinoDynamicColor with Mate<CupertinoDynamicColor$Mate> {
  /// CupertinoDynamicColor CupertinoDynamicColor({String? debugLabel, required Color color, required Color darkColor, required Color highContrastColor, required Color darkHighContrastColor, required Color elevatedColor, required Color darkElevatedColor, required Color highContrastElevatedColor, required Color darkHighContrastElevatedColor})
  CupertinoDynamicColor$Mate({
    /// param: {String? debugLabel}
    String? debugLabel,

    /// param: {required Color color}
    required Color color,

    /// param: {required Color darkColor}
    required Color darkColor,

    /// param: {required Color highContrastColor}
    required Color highContrastColor,

    /// param: {required Color darkHighContrastColor}
    required Color darkHighContrastColor,

    /// param: {required Color elevatedColor}
    required Color elevatedColor,

    /// param: {required Color darkElevatedColor}
    required Color darkElevatedColor,

    /// param: {required Color highContrastElevatedColor}
    required Color highContrastElevatedColor,

    /// param: {required Color darkHighContrastElevatedColor}
    required Color darkHighContrastElevatedColor,
  }) : super(
          debugLabel: debugLabel,
          color: color,
          darkColor: darkColor,
          highContrastColor: highContrastColor,
          darkHighContrastColor: darkHighContrastColor,
          elevatedColor: elevatedColor,
          darkElevatedColor: darkElevatedColor,
          highContrastElevatedColor: highContrastElevatedColor,
          darkHighContrastElevatedColor: darkHighContrastElevatedColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoDynamicColor$Mate(
        debugLabel: p.getValue('debugLabel'),
        color: p.getValue('color'),
        darkColor: p.getValue('darkColor'),
        highContrastColor: p.getValue('highContrastColor'),
        darkHighContrastColor: p.getValue('darkHighContrastColor'),
        elevatedColor: p.getValue('elevatedColor'),
        darkElevatedColor: p.getValue('darkElevatedColor'),
        highContrastElevatedColor: p.getValue('highContrastElevatedColor'),
        darkHighContrastElevatedColor: p.getValue('darkHighContrastElevatedColor'),
      ),
    );
    mateParams.set(name: 'debugLabel', init: debugLabel);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'darkColor', init: darkColor);
    mateParams.set(name: 'highContrastColor', init: highContrastColor);
    mateParams.set(name: 'darkHighContrastColor', init: darkHighContrastColor);
    mateParams.set(name: 'elevatedColor', init: elevatedColor);
    mateParams.set(name: 'darkElevatedColor', init: darkElevatedColor);
    mateParams.set(name: 'highContrastElevatedColor', init: highContrastElevatedColor);
    mateParams.set(name: 'darkHighContrastElevatedColor', init: darkHighContrastElevatedColor);
  }

  /// CupertinoDynamicColor CupertinoDynamicColor.withBrightnessAndContrast({String? debugLabel, required Color color, required Color darkColor, required Color highContrastColor, required Color darkHighContrastColor})
  CupertinoDynamicColor$Mate.withBrightnessAndContrast({
    /// param: {String? debugLabel}
    String? debugLabel,

    /// param: {required Color color}
    required Color color,

    /// param: {required Color darkColor}
    required Color darkColor,

    /// param: {required Color highContrastColor}
    required Color highContrastColor,

    /// param: {required Color darkHighContrastColor}
    required Color darkHighContrastColor,
  }) : super.withBrightnessAndContrast(
          debugLabel: debugLabel,
          color: color,
          darkColor: darkColor,
          highContrastColor: highContrastColor,
          darkHighContrastColor: darkHighContrastColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoDynamicColor$Mate.withBrightnessAndContrast(
        debugLabel: p.getValue('debugLabel'),
        color: p.getValue('color'),
        darkColor: p.getValue('darkColor'),
        highContrastColor: p.getValue('highContrastColor'),
        darkHighContrastColor: p.getValue('darkHighContrastColor'),
      ),
    );
    mateParams.set(name: 'debugLabel', init: debugLabel);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'darkColor', init: darkColor);
    mateParams.set(name: 'highContrastColor', init: highContrastColor);
    mateParams.set(name: 'darkHighContrastColor', init: darkHighContrastColor);
  }

  /// CupertinoDynamicColor CupertinoDynamicColor.withBrightness({String? debugLabel, required Color color, required Color darkColor})
  CupertinoDynamicColor$Mate.withBrightness({
    /// param: {String? debugLabel}
    String? debugLabel,

    /// param: {required Color color}
    required Color color,

    /// param: {required Color darkColor}
    required Color darkColor,
  }) : super.withBrightness(
          debugLabel: debugLabel,
          color: color,
          darkColor: darkColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoDynamicColor$Mate.withBrightness(
        debugLabel: p.getValue('debugLabel'),
        color: p.getValue('color'),
        darkColor: p.getValue('darkColor'),
      ),
    );
    mateParams.set(name: 'debugLabel', init: debugLabel);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'darkColor', init: darkColor);
  }
}
