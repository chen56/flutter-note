// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/cupertino/nav_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/painting/box_border.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:note/mate.dart';

/// class CupertinoNavigationBar extends StatefulWidget implements ObstructingPreferredSizeWidget
class CupertinoNavigationBar$Mate extends CupertinoNavigationBar with WidgetMate<CupertinoNavigationBar$Mate> {
  /// CupertinoNavigationBar CupertinoNavigationBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag})
  CupertinoNavigationBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? leading}
    Widget? leading,

    /// param: {bool automaticallyImplyLeading = true}
    required bool automaticallyImplyLeading,

    /// param: {bool automaticallyImplyMiddle = true}
    required bool automaticallyImplyMiddle,

    /// param: {String? previousPageTitle}
    String? previousPageTitle,

    /// param: {Widget? middle}
    Widget? middle,

    /// param: {Widget? trailing}
    Widget? trailing,

    /// param: {Border? border = _kDefaultNavBarBorder}
    Border? border,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Brightness? brightness}
    Brightness? brightness,

    /// param: {EdgeInsetsDirectional? padding}
    EdgeInsetsDirectional? padding,

    /// param: {bool transitionBetweenRoutes = true}
    required bool transitionBetweenRoutes,

    /// param: {Object heroTag = _defaultHeroTag}
    required Object heroTag,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          automaticallyImplyMiddle: automaticallyImplyMiddle,
          previousPageTitle: previousPageTitle,
          middle: middle,
          trailing: trailing,
          border: border,
          backgroundColor: backgroundColor,
          brightness: brightness,
          padding: padding,
          transitionBetweenRoutes: transitionBetweenRoutes,
          heroTag: heroTag,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoNavigationBar$Mate(
        key: p.getValue('key'),
        leading: p.getValue('leading'),
        automaticallyImplyLeading: p.getValue('automaticallyImplyLeading'),
        automaticallyImplyMiddle: p.getValue('automaticallyImplyMiddle'),
        previousPageTitle: p.getValue('previousPageTitle'),
        middle: p.getValue('middle'),
        trailing: p.getValue('trailing'),
        border: p.getValue('border'),
        backgroundColor: p.getValue('backgroundColor'),
        brightness: p.getValue('brightness'),
        padding: p.getValue('padding'),
        transitionBetweenRoutes: p.getValue('transitionBetweenRoutes'),
        heroTag: p.getValue('heroTag'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'leading', init: leading);
    mateParams.set(name: 'automaticallyImplyLeading', init: automaticallyImplyLeading);
    mateParams.set(name: 'automaticallyImplyMiddle', init: automaticallyImplyMiddle);
    mateParams.set(name: 'previousPageTitle', init: previousPageTitle);
    mateParams.set(name: 'middle', init: middle);
    mateParams.set(name: 'trailing', init: trailing);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'brightness', init: brightness);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'transitionBetweenRoutes', init: transitionBetweenRoutes);
    mateParams.set(name: 'heroTag', init: heroTag);
  }
}

/// class CupertinoSliverNavigationBar extends StatefulWidget
class CupertinoSliverNavigationBar$Mate extends CupertinoSliverNavigationBar
    with WidgetMate<CupertinoSliverNavigationBar$Mate> {
  /// CupertinoSliverNavigationBar CupertinoSliverNavigationBar({Key? key, Widget? largeTitle, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyTitle = true, bool alwaysShowMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag, bool stretch = false})
  CupertinoSliverNavigationBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? largeTitle}
    Widget? largeTitle,

    /// param: {Widget? leading}
    Widget? leading,

    /// param: {bool automaticallyImplyLeading = true}
    required bool automaticallyImplyLeading,

    /// param: {bool automaticallyImplyTitle = true}
    required bool automaticallyImplyTitle,

    /// param: {bool alwaysShowMiddle = true}
    required bool alwaysShowMiddle,

    /// param: {String? previousPageTitle}
    String? previousPageTitle,

    /// param: {Widget? middle}
    Widget? middle,

    /// param: {Widget? trailing}
    Widget? trailing,

    /// param: {Border? border = _kDefaultNavBarBorder}
    Border? border,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Brightness? brightness}
    Brightness? brightness,

    /// param: {EdgeInsetsDirectional? padding}
    EdgeInsetsDirectional? padding,

    /// param: {bool transitionBetweenRoutes = true}
    required bool transitionBetweenRoutes,

    /// param: {Object heroTag = _defaultHeroTag}
    required Object heroTag,

    /// param: {bool stretch = false}
    required bool stretch,
  }) : super(
          key: key,
          largeTitle: largeTitle,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          automaticallyImplyTitle: automaticallyImplyTitle,
          alwaysShowMiddle: alwaysShowMiddle,
          previousPageTitle: previousPageTitle,
          middle: middle,
          trailing: trailing,
          border: border,
          backgroundColor: backgroundColor,
          brightness: brightness,
          padding: padding,
          transitionBetweenRoutes: transitionBetweenRoutes,
          heroTag: heroTag,
          stretch: stretch,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoSliverNavigationBar$Mate(
        key: p.getValue('key'),
        largeTitle: p.getValue('largeTitle'),
        leading: p.getValue('leading'),
        automaticallyImplyLeading: p.getValue('automaticallyImplyLeading'),
        automaticallyImplyTitle: p.getValue('automaticallyImplyTitle'),
        alwaysShowMiddle: p.getValue('alwaysShowMiddle'),
        previousPageTitle: p.getValue('previousPageTitle'),
        middle: p.getValue('middle'),
        trailing: p.getValue('trailing'),
        border: p.getValue('border'),
        backgroundColor: p.getValue('backgroundColor'),
        brightness: p.getValue('brightness'),
        padding: p.getValue('padding'),
        transitionBetweenRoutes: p.getValue('transitionBetweenRoutes'),
        heroTag: p.getValue('heroTag'),
        stretch: p.getValue('stretch'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'largeTitle', init: largeTitle);
    mateParams.set(name: 'leading', init: leading);
    mateParams.set(name: 'automaticallyImplyLeading', init: automaticallyImplyLeading);
    mateParams.set(name: 'automaticallyImplyTitle', init: automaticallyImplyTitle);
    mateParams.set(name: 'alwaysShowMiddle', init: alwaysShowMiddle);
    mateParams.set(name: 'previousPageTitle', init: previousPageTitle);
    mateParams.set(name: 'middle', init: middle);
    mateParams.set(name: 'trailing', init: trailing);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'brightness', init: brightness);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'transitionBetweenRoutes', init: transitionBetweenRoutes);
    mateParams.set(name: 'heroTag', init: heroTag);
    mateParams.set(name: 'stretch', init: stretch);
  }
}

/// class CupertinoNavigationBarBackButton extends StatelessWidget
class CupertinoNavigationBarBackButton$Mate extends CupertinoNavigationBarBackButton
    with WidgetMate<CupertinoNavigationBarBackButton$Mate> {
  /// CupertinoNavigationBarBackButton CupertinoNavigationBarBackButton({Key? key, Color? color, String? previousPageTitle, void Function()? onPressed})
  CupertinoNavigationBarBackButton$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Color? color}
    Color? color,

    /// param: {String? previousPageTitle}
    String? previousPageTitle,

    /// param: {void Function()? onPressed}
    VoidCallback? onPressed,
  }) : super(
          key: key,
          color: color,
          previousPageTitle: previousPageTitle,
          onPressed: onPressed,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoNavigationBarBackButton$Mate(
        key: p.getValue('key'),
        color: p.getValue('color'),
        previousPageTitle: p.getValue('previousPageTitle'),
        onPressed: p.getValue('onPressed'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'previousPageTitle', init: previousPageTitle);
    mateParams.set(name: 'onPressed', init: onPressed);
  }
}
