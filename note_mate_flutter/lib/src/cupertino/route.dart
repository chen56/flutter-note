// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/route.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/routes.dart';

/// class CupertinoPageRoute<T> extends PageRoute<T> with CupertinoRouteTransitionMixin<T>
class CupertinoPageRoute$Mate<T> extends CupertinoPageRoute<T> with Mate<CupertinoPageRoute$Mate> {
  /// CupertinoPageRoute<T> CupertinoPageRoute({required Widget Function(BuildContext) builder, String? title, RouteSettings? settings, bool maintainState = true, bool fullscreenDialog = false, bool allowSnapshotting = true})
  CupertinoPageRoute$Mate({
    /// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
    required WidgetBuilder builder,

    /// optionalParameters: {String? title} , hasDefaultValue:false, defaultValueCode:null
    String? title,

    /// optionalParameters: {RouteSettings? settings} , hasDefaultValue:false, defaultValueCode:null
    RouteSettings? settings,

    /// optionalParameters: {bool maintainState = true} , hasDefaultValue:true, defaultValueCode:true
    required bool maintainState,

    /// optionalParameters: {bool fullscreenDialog = false} , hasDefaultValue:true, defaultValueCode:false
    required bool fullscreenDialog,

    /// optionalParameters: {bool allowSnapshotting = true} , hasDefaultValue:true, defaultValueCode:true
    required bool allowSnapshotting,
  }) : super(
          builder: builder,
          title: title,
          settings: settings,
          maintainState: maintainState,
          fullscreenDialog: fullscreenDialog,
          allowSnapshotting: allowSnapshotting,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoPageRoute$Mate(
        builder: p.getValue('builder'),
        title: p.getValue('title'),
        settings: p.getValue('settings'),
        maintainState: p.getValue('maintainState'),
        fullscreenDialog: p.getValue('fullscreenDialog'),
        allowSnapshotting: p.getValue('allowSnapshotting'),
      ),
    );
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'settings', init: settings);
    mateParams.set(name: 'maintainState', init: maintainState);
    mateParams.set(name: 'fullscreenDialog', init: fullscreenDialog);
    mateParams.set(name: 'allowSnapshotting', init: allowSnapshotting);
  }
}

/// class CupertinoPage<T> extends Page<T>
class CupertinoPage$Mate<T> extends CupertinoPage<T> with Mate<CupertinoPage$Mate> {
  /// CupertinoPage<T> CupertinoPage({required Widget child, bool maintainState = true, String? title, bool fullscreenDialog = false, bool allowSnapshotting = true, LocalKey? key, String? name, Object? arguments, String? restorationId})
  CupertinoPage$Mate({
    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {bool maintainState = true} , hasDefaultValue:true, defaultValueCode:true
    required bool maintainState,

    /// optionalParameters: {String? title} , hasDefaultValue:false, defaultValueCode:null
    String? title,

    /// optionalParameters: {bool fullscreenDialog = false} , hasDefaultValue:true, defaultValueCode:false
    required bool fullscreenDialog,

    /// optionalParameters: {bool allowSnapshotting = true} , hasDefaultValue:true, defaultValueCode:true
    required bool allowSnapshotting,

    /// optionalParameters: {LocalKey? key} , hasDefaultValue:false, defaultValueCode:null
    LocalKey? key,

    /// optionalParameters: {String? name} , hasDefaultValue:false, defaultValueCode:null
    String? name,

    /// optionalParameters: {Object? arguments} , hasDefaultValue:false, defaultValueCode:null
    Object? arguments,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,
  }) : super(
          child: child,
          maintainState: maintainState,
          title: title,
          fullscreenDialog: fullscreenDialog,
          allowSnapshotting: allowSnapshotting,
          key: key,
          name: name,
          arguments: arguments,
          restorationId: restorationId,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoPage$Mate(
        child: p.getValue('child'),
        maintainState: p.getValue('maintainState'),
        title: p.getValue('title'),
        fullscreenDialog: p.getValue('fullscreenDialog'),
        allowSnapshotting: p.getValue('allowSnapshotting'),
        key: p.getValue('key'),
        name: p.getValue('name'),
        arguments: p.getValue('arguments'),
        restorationId: p.getValue('restorationId'),
      ),
    );
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'maintainState', init: maintainState);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'fullscreenDialog', init: fullscreenDialog);
    mateParams.set(name: 'allowSnapshotting', init: allowSnapshotting);
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'arguments', init: arguments);
    mateParams.set(name: 'restorationId', init: restorationId);
  }
}

/// class CupertinoPageTransition extends StatelessWidget
class CupertinoPageTransition$Mate extends CupertinoPageTransition with WidgetMate<CupertinoPageTransition$Mate> {
  /// CupertinoPageTransition CupertinoPageTransition({Key? key, required Animation<double> primaryRouteAnimation, required Animation<double> secondaryRouteAnimation, required Widget child, required bool linearTransition})
  CupertinoPageTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> primaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> primaryRouteAnimation,

    /// optionalParameters: {required Animation<double> secondaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> secondaryRouteAnimation,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {required bool linearTransition} , hasDefaultValue:false, defaultValueCode:null
    required bool linearTransition,
  }) : super(
          key: key,
          primaryRouteAnimation: primaryRouteAnimation,
          secondaryRouteAnimation: secondaryRouteAnimation,
          child: child,
          linearTransition: linearTransition,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoPageTransition$Mate(
        key: p.getValue('key'),
        primaryRouteAnimation: p.getValue('primaryRouteAnimation'),
        secondaryRouteAnimation: p.getValue('secondaryRouteAnimation'),
        child: p.getValue('child'),
        linearTransition: p.getValue('linearTransition'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'primaryRouteAnimation', init: primaryRouteAnimation);
    mateParams.set(name: 'secondaryRouteAnimation', init: secondaryRouteAnimation);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'linearTransition', init: linearTransition);
  }
}

/// class CupertinoFullscreenDialogTransition extends StatelessWidget
class CupertinoFullscreenDialogTransition$Mate extends CupertinoFullscreenDialogTransition
    with WidgetMate<CupertinoFullscreenDialogTransition$Mate> {
  /// CupertinoFullscreenDialogTransition CupertinoFullscreenDialogTransition({Key? key, required Animation<double> primaryRouteAnimation, required Animation<double> secondaryRouteAnimation, required Widget child, required bool linearTransition})
  CupertinoFullscreenDialogTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> primaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> primaryRouteAnimation,

    /// optionalParameters: {required Animation<double> secondaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> secondaryRouteAnimation,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {required bool linearTransition} , hasDefaultValue:false, defaultValueCode:null
    required bool linearTransition,
  }) : super(
          key: key,
          primaryRouteAnimation: primaryRouteAnimation,
          secondaryRouteAnimation: secondaryRouteAnimation,
          child: child,
          linearTransition: linearTransition,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoFullscreenDialogTransition$Mate(
        key: p.getValue('key'),
        primaryRouteAnimation: p.getValue('primaryRouteAnimation'),
        secondaryRouteAnimation: p.getValue('secondaryRouteAnimation'),
        child: p.getValue('child'),
        linearTransition: p.getValue('linearTransition'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'primaryRouteAnimation', init: primaryRouteAnimation);
    mateParams.set(name: 'secondaryRouteAnimation', init: secondaryRouteAnimation);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'linearTransition', init: linearTransition);
  }
}

/// class CupertinoModalPopupRoute<T> extends PopupRoute<T>
class CupertinoModalPopupRoute$Mate<T> extends CupertinoModalPopupRoute<T> with Mate<CupertinoModalPopupRoute$Mate> {
  /// CupertinoModalPopupRoute<T> CupertinoModalPopupRoute({required Widget Function(BuildContext) builder, String barrierLabel = 'Dismiss', Color? barrierColor = kCupertinoModalBarrierColor, bool barrierDismissible = true, bool semanticsDismissible = false, ImageFilter? filter, RouteSettings? settings, Offset? anchorPoint})
  CupertinoModalPopupRoute$Mate({
    /// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
    required WidgetBuilder builder,

    /// optionalParameters: {String barrierLabel = 'Dismiss'} , hasDefaultValue:true, defaultValueCode:'Dismiss'
    required String barrierLabel,

    /// optionalParameters: {Color? barrierColor = kCupertinoModalBarrierColor} , hasDefaultValue:true, defaultValueCode:kCupertinoModalBarrierColor
    Color? barrierColor,

    /// optionalParameters: {bool barrierDismissible = true} , hasDefaultValue:true, defaultValueCode:true
    required bool barrierDismissible,

    /// optionalParameters: {bool semanticsDismissible = false} , hasDefaultValue:true, defaultValueCode:false
    required bool semanticsDismissible,

    /// optionalParameters: {ImageFilter? filter} , hasDefaultValue:false, defaultValueCode:null
    ImageFilter? filter,

    /// optionalParameters: {RouteSettings? settings} , hasDefaultValue:false, defaultValueCode:null
    RouteSettings? settings,

    /// optionalParameters: {Offset? anchorPoint} , hasDefaultValue:false, defaultValueCode:null
    Offset? anchorPoint,
  }) : super(
          builder: builder,
          barrierLabel: barrierLabel,
          barrierColor: barrierColor,
          barrierDismissible: barrierDismissible,
          semanticsDismissible: semanticsDismissible,
          filter: filter,
          settings: settings,
          anchorPoint: anchorPoint,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoModalPopupRoute$Mate(
        builder: p.getValue('builder'),
        barrierLabel: p.getValue('barrierLabel'),
        barrierColor: p.getValue('barrierColor'),
        barrierDismissible: p.getValue('barrierDismissible'),
        semanticsDismissible: p.getValue('semanticsDismissible'),
        filter: p.getValue('filter'),
        settings: p.getValue('settings'),
        anchorPoint: p.getValue('anchorPoint'),
      ),
    );
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'barrierLabel', init: barrierLabel);
    mateParams.set(name: 'barrierColor', init: barrierColor);
    mateParams.set(name: 'barrierDismissible', init: barrierDismissible);
    mateParams.set(name: 'semanticsDismissible', init: semanticsDismissible);
    mateParams.set(name: 'filter', init: filter);
    mateParams.set(name: 'settings', init: settings);
    mateParams.set(name: 'anchorPoint', init: anchorPoint);
  }
}

/// class CupertinoDialogRoute<T> extends RawDialogRoute<T>
class CupertinoDialogRoute$Mate<T> extends CupertinoDialogRoute<T> with Mate<CupertinoDialogRoute$Mate> {
  /// CupertinoDialogRoute<T> CupertinoDialogRoute({required Widget Function(BuildContext) builder, required BuildContext context, bool barrierDismissible = true, Color? barrierColor, String? barrierLabel, Duration transitionDuration = const Duration(milliseconds: 250), Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder = _buildCupertinoDialogTransitions, RouteSettings? settings, Offset? anchorPoint})
  CupertinoDialogRoute$Mate({
    /// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
    required WidgetBuilder builder,

    /// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
    required BuildContext context,

    /// optionalParameters: {bool barrierDismissible = true} , hasDefaultValue:true, defaultValueCode:true
    required bool barrierDismissible,

    /// optionalParameters: {Color? barrierColor} , hasDefaultValue:false, defaultValueCode:null
    Color? barrierColor,

    /// optionalParameters: {String? barrierLabel} , hasDefaultValue:false, defaultValueCode:null
    String? barrierLabel,

    /// optionalParameters: {Duration transitionDuration = const Duration(milliseconds: 250)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 250)
    required Duration transitionDuration,

    /// optionalParameters: {Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder = _buildCupertinoDialogTransitions} , hasDefaultValue:true, defaultValueCode:_buildCupertinoDialogTransitions
    RouteTransitionsBuilder? transitionBuilder,

    /// optionalParameters: {RouteSettings? settings} , hasDefaultValue:false, defaultValueCode:null
    RouteSettings? settings,

    /// optionalParameters: {Offset? anchorPoint} , hasDefaultValue:false, defaultValueCode:null
    Offset? anchorPoint,
  }) : super(
          builder: builder,
          context: context,
          barrierDismissible: barrierDismissible,
          barrierColor: barrierColor,
          barrierLabel: barrierLabel,
          transitionDuration: transitionDuration,
          transitionBuilder: transitionBuilder,
          settings: settings,
          anchorPoint: anchorPoint,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoDialogRoute$Mate(
        builder: p.getValue('builder'),
        context: p.getValue('context'),
        barrierDismissible: p.getValue('barrierDismissible'),
        barrierColor: p.getValue('barrierColor'),
        barrierLabel: p.getValue('barrierLabel'),
        transitionDuration: p.getValue('transitionDuration'),
        transitionBuilder: p.getValue('transitionBuilder'),
        settings: p.getValue('settings'),
        anchorPoint: p.getValue('anchorPoint'),
      ),
    );
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'context', init: context);
    mateParams.set(name: 'barrierDismissible', init: barrierDismissible);
    mateParams.set(name: 'barrierColor', init: barrierColor);
    mateParams.set(name: 'barrierLabel', init: barrierLabel);
    mateParams.set(name: 'transitionDuration', init: transitionDuration);
    mateParams.set(name: 'transitionBuilder', init: transitionBuilder);
    mateParams.set(name: 'settings', init: settings);
    mateParams.set(name: 'anchorPoint', init: anchorPoint);
  }
}
