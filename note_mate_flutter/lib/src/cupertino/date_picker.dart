// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:25.382919

import 'package:flutter/src/cupertino/date_picker.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/cupertino/localizations.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';

/// class CupertinoDatePicker extends StatefulWidget
class CupertinoDatePicker$Mate extends CupertinoDatePicker {
  /// CupertinoDatePicker CupertinoDatePicker({Key? key, CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime, required void Function(DateTime) onDateTimeChanged, DateTime? initialDateTime, DateTime? minimumDate, DateTime? maximumDate, int minimumYear = 1, int? maximumYear, int minuteInterval = 1, bool use24hFormat = false, DatePickerDateOrder? dateOrder, Color? backgroundColor})
  CupertinoDatePicker$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime}
    required CupertinoDatePickerMode mode,

    /// param: {required void Function(DateTime) onDateTimeChanged}
    required ValueChanged<DateTime> onDateTimeChanged,

    /// param: {DateTime? initialDateTime}
    DateTime? initialDateTime,

    /// param: {DateTime? minimumDate}
    DateTime? minimumDate,

    /// param: {DateTime? maximumDate}
    DateTime? maximumDate,

    /// param: {int minimumYear = 1}
    required int minimumYear,

    /// param: {int? maximumYear}
    int? maximumYear,

    /// param: {int minuteInterval = 1}
    required int minuteInterval,

    /// param: {bool use24hFormat = false}
    required bool use24hFormat,

    /// param: {DatePickerDateOrder? dateOrder}
    DatePickerDateOrder? dateOrder,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) : super(
          key: key,
          mode: mode,
          onDateTimeChanged: onDateTimeChanged,
          initialDateTime: initialDateTime,
          minimumDate: minimumDate,
          maximumDate: maximumDate,
          minimumYear: minimumYear,
          maximumYear: maximumYear,
          minuteInterval: minuteInterval,
          use24hFormat: use24hFormat,
          dateOrder: dateOrder,
          backgroundColor: backgroundColor,
        ) {}
}

/// class CupertinoTimerPicker extends StatefulWidget
class CupertinoTimerPicker$Mate extends CupertinoTimerPicker {
  /// CupertinoTimerPicker CupertinoTimerPicker({Key? key, CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms, Duration initialTimerDuration = Duration.zero, int minuteInterval = 1, int secondInterval = 1, AlignmentGeometry alignment = Alignment.center, Color? backgroundColor, required void Function(Duration) onTimerDurationChanged})
  CupertinoTimerPicker$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms}
    required CupertinoTimerPickerMode mode,

    /// param: {Duration initialTimerDuration = Duration.zero}
    required Duration initialTimerDuration,

    /// param: {int minuteInterval = 1}
    required int minuteInterval,

    /// param: {int secondInterval = 1}
    required int secondInterval,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {required void Function(Duration) onTimerDurationChanged}
    required ValueChanged<Duration> onTimerDurationChanged,
  }) : super(
          key: key,
          mode: mode,
          initialTimerDuration: initialTimerDuration,
          minuteInterval: minuteInterval,
          secondInterval: secondInterval,
          alignment: alignment,
          backgroundColor: backgroundColor,
          onTimerDurationChanged: onTimerDurationChanged,
        ) {}
}
