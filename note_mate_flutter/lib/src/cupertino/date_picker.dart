// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/date_picker.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/cupertino/localizations.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/alignment.dart';

/// class CupertinoDatePicker extends StatefulWidget
class CupertinoDatePicker$Mate extends CupertinoDatePicker with WidgetMate<CupertinoDatePicker$Mate> {
  /// CupertinoDatePicker CupertinoDatePicker({Key? key, CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime, required void Function(DateTime) onDateTimeChanged, DateTime? initialDateTime, DateTime? minimumDate, DateTime? maximumDate, int minimumYear = 1, int? maximumYear, int minuteInterval = 1, bool use24hFormat = false, DatePickerDateOrder? dateOrder, Color? backgroundColor})
  CupertinoDatePicker$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime} , hasDefaultValue:true, defaultValueCode:CupertinoDatePickerMode.dateAndTime
    required CupertinoDatePickerMode mode,

    /// optionalParameters: {required void Function(DateTime) onDateTimeChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<DateTime> onDateTimeChanged,

    /// optionalParameters: {DateTime? initialDateTime} , hasDefaultValue:false, defaultValueCode:null
    DateTime? initialDateTime,

    /// optionalParameters: {DateTime? minimumDate} , hasDefaultValue:false, defaultValueCode:null
    DateTime? minimumDate,

    /// optionalParameters: {DateTime? maximumDate} , hasDefaultValue:false, defaultValueCode:null
    DateTime? maximumDate,

    /// optionalParameters: {int minimumYear = 1} , hasDefaultValue:true, defaultValueCode:1
    required int minimumYear,

    /// optionalParameters: {int? maximumYear} , hasDefaultValue:false, defaultValueCode:null
    int? maximumYear,

    /// optionalParameters: {int minuteInterval = 1} , hasDefaultValue:true, defaultValueCode:1
    required int minuteInterval,

    /// optionalParameters: {bool use24hFormat = false} , hasDefaultValue:true, defaultValueCode:false
    required bool use24hFormat,

    /// optionalParameters: {DatePickerDateOrder? dateOrder} , hasDefaultValue:false, defaultValueCode:null
    DatePickerDateOrder? dateOrder,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,
  }) : super(
          key: key,
          mode: mode,
          onDateTimeChanged: onDateTimeChanged,
          initialDateTime: initialDateTime,
          minimumDate: minimumDate,
          maximumDate: maximumDate,
          minimumYear: minimumYear,
          maximumYear: maximumYear,
          minuteInterval: minuteInterval,
          use24hFormat: use24hFormat,
          dateOrder: dateOrder,
          backgroundColor: backgroundColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoDatePicker$Mate(
        key: p.getValue('key'),
        mode: p.getValue('mode'),
        onDateTimeChanged: p.getValue('onDateTimeChanged'),
        initialDateTime: p.getValue('initialDateTime'),
        minimumDate: p.getValue('minimumDate'),
        maximumDate: p.getValue('maximumDate'),
        minimumYear: p.getValue('minimumYear'),
        maximumYear: p.getValue('maximumYear'),
        minuteInterval: p.getValue('minuteInterval'),
        use24hFormat: p.getValue('use24hFormat'),
        dateOrder: p.getValue('dateOrder'),
        backgroundColor: p.getValue('backgroundColor'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'mode', init: mode);
    mateParams.set(name: 'onDateTimeChanged', init: onDateTimeChanged);
    mateParams.set(name: 'initialDateTime', init: initialDateTime);
    mateParams.set(name: 'minimumDate', init: minimumDate);
    mateParams.set(name: 'maximumDate', init: maximumDate);
    mateParams.set(name: 'minimumYear', init: minimumYear);
    mateParams.set(name: 'maximumYear', init: maximumYear);
    mateParams.set(name: 'minuteInterval', init: minuteInterval);
    mateParams.set(name: 'use24hFormat', init: use24hFormat);
    mateParams.set(name: 'dateOrder', init: dateOrder);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
  }
}

/// class CupertinoTimerPicker extends StatefulWidget
class CupertinoTimerPicker$Mate extends CupertinoTimerPicker with WidgetMate<CupertinoTimerPicker$Mate> {
  /// CupertinoTimerPicker CupertinoTimerPicker({Key? key, CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms, Duration initialTimerDuration = Duration.zero, int minuteInterval = 1, int secondInterval = 1, AlignmentGeometry alignment = Alignment.center, Color? backgroundColor, required void Function(Duration) onTimerDurationChanged})
  CupertinoTimerPicker$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms} , hasDefaultValue:true, defaultValueCode:CupertinoTimerPickerMode.hms
    required CupertinoTimerPickerMode mode,

    /// optionalParameters: {Duration initialTimerDuration = Duration.zero} , hasDefaultValue:true, defaultValueCode:Duration.zero
    required Duration initialTimerDuration,

    /// optionalParameters: {int minuteInterval = 1} , hasDefaultValue:true, defaultValueCode:1
    required int minuteInterval,

    /// optionalParameters: {int secondInterval = 1} , hasDefaultValue:true, defaultValueCode:1
    required int secondInterval,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {required void Function(Duration) onTimerDurationChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<Duration> onTimerDurationChanged,
  }) : super(
          key: key,
          mode: mode,
          initialTimerDuration: initialTimerDuration,
          minuteInterval: minuteInterval,
          secondInterval: secondInterval,
          alignment: alignment,
          backgroundColor: backgroundColor,
          onTimerDurationChanged: onTimerDurationChanged,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoTimerPicker$Mate(
        key: p.getValue('key'),
        mode: p.getValue('mode'),
        initialTimerDuration: p.getValue('initialTimerDuration'),
        minuteInterval: p.getValue('minuteInterval'),
        secondInterval: p.getValue('secondInterval'),
        alignment: p.getValue('alignment'),
        backgroundColor: p.getValue('backgroundColor'),
        onTimerDurationChanged: p.getValue('onTimerDurationChanged'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'mode', init: mode);
    mateParams.set(name: 'initialTimerDuration', init: initialTimerDuration);
    mateParams.set(name: 'minuteInterval', init: minuteInterval);
    mateParams.set(name: 'secondInterval', init: secondInterval);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'onTimerDurationChanged', init: onTimerDurationChanged);
  }
}
