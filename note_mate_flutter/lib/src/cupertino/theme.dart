// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/cupertino/text_theme.dart';
import 'dart:core';

/// class CupertinoTheme extends StatelessWidget
class CupertinoTheme$Mate extends CupertinoTheme with WidgetMate<CupertinoTheme$Mate> {
  /// CupertinoTheme CupertinoTheme({Key? key, required CupertinoThemeData data, required Widget child})
  CupertinoTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required CupertinoThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required CupertinoThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}

/// class CupertinoThemeData extends NoDefaultCupertinoThemeData with Diagnosticable
class CupertinoThemeData$Mate extends CupertinoThemeData with Mate<CupertinoThemeData$Mate> {
  /// CupertinoThemeData CupertinoThemeData({Brightness? brightness, Color? primaryColor, Color? primaryContrastingColor, CupertinoTextThemeData? textTheme, Color? barBackgroundColor, Color? scaffoldBackgroundColor, bool? applyThemeToAll})
  CupertinoThemeData$Mate({
    /// optionalParameters: {Brightness? brightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? brightness,

    /// optionalParameters: {Color? primaryColor} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryColor,

    /// optionalParameters: {Color? primaryContrastingColor} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContrastingColor,

    /// optionalParameters: {CupertinoTextThemeData? textTheme} , hasDefaultValue:false, defaultValueCode:null
    CupertinoTextThemeData? textTheme,

    /// optionalParameters: {Color? barBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? barBackgroundColor,

    /// optionalParameters: {Color? scaffoldBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? scaffoldBackgroundColor,

    /// optionalParameters: {bool? applyThemeToAll} , hasDefaultValue:false, defaultValueCode:null
    bool? applyThemeToAll,
  }) : super(
          brightness: brightness,
          primaryColor: primaryColor,
          primaryContrastingColor: primaryContrastingColor,
          textTheme: textTheme,
          barBackgroundColor: barBackgroundColor,
          scaffoldBackgroundColor: scaffoldBackgroundColor,
          applyThemeToAll: applyThemeToAll,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoThemeData$Mate(
        brightness: p.getValue('brightness'),
        primaryColor: p.getValue('primaryColor'),
        primaryContrastingColor: p.getValue('primaryContrastingColor'),
        textTheme: p.getValue('textTheme'),
        barBackgroundColor: p.getValue('barBackgroundColor'),
        scaffoldBackgroundColor: p.getValue('scaffoldBackgroundColor'),
        applyThemeToAll: p.getValue('applyThemeToAll'),
      ),
    );
    mateParams.set(name: 'brightness', init: brightness);
    mateParams.set(name: 'primaryColor', init: primaryColor);
    mateParams.set(name: 'primaryContrastingColor', init: primaryContrastingColor);
    mateParams.set(name: 'textTheme', init: textTheme);
    mateParams.set(name: 'barBackgroundColor', init: barBackgroundColor);
    mateParams.set(name: 'scaffoldBackgroundColor', init: scaffoldBackgroundColor);
    mateParams.set(name: 'applyThemeToAll', init: applyThemeToAll);
  }

  /// CupertinoThemeData CupertinoThemeData.raw(Brightness? brightness, Color? primaryColor, Color? primaryContrastingColor, CupertinoTextThemeData? textTheme, Color? barBackgroundColor, Color? scaffoldBackgroundColor, bool? applyThemeToAll)
  CupertinoThemeData$Mate.raw(
    /// requiredParameters: Brightness? brightness
    Brightness? brightness,

    /// requiredParameters: Color? primaryColor
    Color? primaryColor,

    /// requiredParameters: Color? primaryContrastingColor
    Color? primaryContrastingColor,

    /// requiredParameters: CupertinoTextThemeData? textTheme
    CupertinoTextThemeData? textTheme,

    /// requiredParameters: Color? barBackgroundColor
    Color? barBackgroundColor,

    /// requiredParameters: Color? scaffoldBackgroundColor
    Color? scaffoldBackgroundColor,

    /// requiredParameters: bool? applyThemeToAll
    bool? applyThemeToAll,
  ) : super.raw(
          brightness,
          primaryColor,
          primaryContrastingColor,
          textTheme,
          barBackgroundColor,
          scaffoldBackgroundColor,
          applyThemeToAll,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CupertinoThemeData$Mate.raw(
        p.getValue('brightness'),
        p.getValue('primaryColor'),
        p.getValue('primaryContrastingColor'),
        p.getValue('textTheme'),
        p.getValue('barBackgroundColor'),
        p.getValue('scaffoldBackgroundColor'),
        p.getValue('applyThemeToAll'),
      ),
    );
    mateParams.set(name: 'brightness', init: brightness);
    mateParams.set(name: 'primaryColor', init: primaryColor);
    mateParams.set(name: 'primaryContrastingColor', init: primaryContrastingColor);
    mateParams.set(name: 'textTheme', init: textTheme);
    mateParams.set(name: 'barBackgroundColor', init: barBackgroundColor);
    mateParams.set(name: 'scaffoldBackgroundColor', init: scaffoldBackgroundColor);
    mateParams.set(name: 'applyThemeToAll', init: applyThemeToAll);
  }
}

/// class NoDefaultCupertinoThemeData
class NoDefaultCupertinoThemeData$Mate extends NoDefaultCupertinoThemeData with Mate<NoDefaultCupertinoThemeData$Mate> {
  /// NoDefaultCupertinoThemeData NoDefaultCupertinoThemeData({Brightness? brightness, Color? primaryColor, Color? primaryContrastingColor, CupertinoTextThemeData? textTheme, Color? barBackgroundColor, Color? scaffoldBackgroundColor, bool? applyThemeToAll})
  NoDefaultCupertinoThemeData$Mate({
    /// optionalParameters: {Brightness? brightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? brightness,

    /// optionalParameters: {Color? primaryColor} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryColor,

    /// optionalParameters: {Color? primaryContrastingColor} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContrastingColor,

    /// optionalParameters: {CupertinoTextThemeData? textTheme} , hasDefaultValue:false, defaultValueCode:null
    CupertinoTextThemeData? textTheme,

    /// optionalParameters: {Color? barBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? barBackgroundColor,

    /// optionalParameters: {Color? scaffoldBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? scaffoldBackgroundColor,

    /// optionalParameters: {bool? applyThemeToAll} , hasDefaultValue:false, defaultValueCode:null
    bool? applyThemeToAll,
  }) : super(
          brightness: brightness,
          primaryColor: primaryColor,
          primaryContrastingColor: primaryContrastingColor,
          textTheme: textTheme,
          barBackgroundColor: barBackgroundColor,
          scaffoldBackgroundColor: scaffoldBackgroundColor,
          applyThemeToAll: applyThemeToAll,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NoDefaultCupertinoThemeData$Mate(
        brightness: p.getValue('brightness'),
        primaryColor: p.getValue('primaryColor'),
        primaryContrastingColor: p.getValue('primaryContrastingColor'),
        textTheme: p.getValue('textTheme'),
        barBackgroundColor: p.getValue('barBackgroundColor'),
        scaffoldBackgroundColor: p.getValue('scaffoldBackgroundColor'),
        applyThemeToAll: p.getValue('applyThemeToAll'),
      ),
    );
    mateParams.set(name: 'brightness', init: brightness);
    mateParams.set(name: 'primaryColor', init: primaryColor);
    mateParams.set(name: 'primaryContrastingColor', init: primaryContrastingColor);
    mateParams.set(name: 'textTheme', init: textTheme);
    mateParams.set(name: 'barBackgroundColor', init: barBackgroundColor);
    mateParams.set(name: 'scaffoldBackgroundColor', init: scaffoldBackgroundColor);
    mateParams.set(name: 'applyThemeToAll', init: applyThemeToAll);
  }
}
