// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:note/mate.dart';

/// class Focus extends StatefulWidget
class Focus$Mate extends Focus with WidgetMate<Focus$Mate> {
  /// Focus Focus({Key? key, required Widget child, FocusNode? focusNode, FocusNode? parentNode, bool autofocus = false, void Function(bool)? onFocusChange, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool? canRequestFocus, bool? skipTraversal, bool? descendantsAreFocusable, bool? descendantsAreTraversable, bool includeSemantics = true, String? debugLabel})
  Focus$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {FocusNode? parentNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? parentNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyCallback? onKey,

    /// optionalParameters: {bool? canRequestFocus} , hasDefaultValue:false, defaultValueCode:null
    bool? canRequestFocus,

    /// optionalParameters: {bool? skipTraversal} , hasDefaultValue:false, defaultValueCode:null
    bool? skipTraversal,

    /// optionalParameters: {bool? descendantsAreFocusable} , hasDefaultValue:false, defaultValueCode:null
    bool? descendantsAreFocusable,

    /// optionalParameters: {bool? descendantsAreTraversable} , hasDefaultValue:false, defaultValueCode:null
    bool? descendantsAreTraversable,

    /// optionalParameters: {bool includeSemantics = true} , hasDefaultValue:true, defaultValueCode:true
    required bool includeSemantics,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,
  }) : super(
          key: key,
          child: child,
          focusNode: focusNode,
          parentNode: parentNode,
          autofocus: autofocus,
          onFocusChange: onFocusChange,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          canRequestFocus: canRequestFocus,
          skipTraversal: skipTraversal,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          includeSemantics: includeSemantics,
          debugLabel: debugLabel,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Focus$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        focusNode: p.getValue('focusNode'),
        parentNode: p.getValue('parentNode'),
        autofocus: p.getValue('autofocus'),
        onFocusChange: p.getValue('onFocusChange'),
        onKeyEvent: p.getValue('onKeyEvent'),
        onKey: p.getValue('onKey'),
        canRequestFocus: p.getValue('canRequestFocus'),
        skipTraversal: p.getValue('skipTraversal'),
        descendantsAreFocusable: p.getValue('descendantsAreFocusable'),
        descendantsAreTraversable: p.getValue('descendantsAreTraversable'),
        includeSemantics: p.getValue('includeSemantics'),
        debugLabel: p.getValue('debugLabel'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'parentNode', init: parentNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'onKeyEvent', init: onKeyEvent);
    mateParams.set(name: 'onKey', init: onKey);
    mateParams.set(name: 'canRequestFocus', init: canRequestFocus);
    mateParams.set(name: 'skipTraversal', init: skipTraversal);
    mateParams.set(name: 'descendantsAreFocusable', init: descendantsAreFocusable);
    mateParams.set(name: 'descendantsAreTraversable', init: descendantsAreTraversable);
    mateParams.set(name: 'includeSemantics', init: includeSemantics);
    mateParams.set(name: 'debugLabel', init: debugLabel);
  }
}

/// class FocusScope extends Focus
class FocusScope$Mate extends FocusScope with WidgetMate<FocusScope$Mate> {
  /// FocusScope FocusScope({Key? key, FocusScopeNode? node, FocusNode? parentNode, required Widget child, bool autofocus = false, void Function(bool)? onFocusChange, bool? canRequestFocus, bool? skipTraversal, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, String? debugLabel})
  FocusScope$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {FocusScopeNode? node} , hasDefaultValue:false, defaultValueCode:null
    FocusScopeNode? node,

    /// optionalParameters: {FocusNode? parentNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? parentNode,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool? canRequestFocus} , hasDefaultValue:false, defaultValueCode:null
    bool? canRequestFocus,

    /// optionalParameters: {bool? skipTraversal} , hasDefaultValue:false, defaultValueCode:null
    bool? skipTraversal,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyCallback? onKey,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,
  }) : super(
          key: key,
          node: node,
          parentNode: parentNode,
          child: child,
          autofocus: autofocus,
          onFocusChange: onFocusChange,
          canRequestFocus: canRequestFocus,
          skipTraversal: skipTraversal,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          debugLabel: debugLabel,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FocusScope$Mate(
        key: p.getValue('key'),
        node: p.getValue('node'),
        parentNode: p.getValue('parentNode'),
        child: p.getValue('child'),
        autofocus: p.getValue('autofocus'),
        onFocusChange: p.getValue('onFocusChange'),
        canRequestFocus: p.getValue('canRequestFocus'),
        skipTraversal: p.getValue('skipTraversal'),
        onKeyEvent: p.getValue('onKeyEvent'),
        onKey: p.getValue('onKey'),
        debugLabel: p.getValue('debugLabel'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'node', init: node);
    mateParams.set(name: 'parentNode', init: parentNode);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'canRequestFocus', init: canRequestFocus);
    mateParams.set(name: 'skipTraversal', init: skipTraversal);
    mateParams.set(name: 'onKeyEvent', init: onKeyEvent);
    mateParams.set(name: 'onKey', init: onKey);
    mateParams.set(name: 'debugLabel', init: debugLabel);
  }
}

/// class ExcludeFocus extends StatelessWidget
class ExcludeFocus$Mate extends ExcludeFocus with WidgetMate<ExcludeFocus$Mate> {
  /// ExcludeFocus ExcludeFocus({Key? key, bool excluding = true, required Widget child})
  ExcludeFocus$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool excluding = true} , hasDefaultValue:true, defaultValueCode:true
    required bool excluding,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          excluding: excluding,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExcludeFocus$Mate(
        key: p.getValue('key'),
        excluding: p.getValue('excluding'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'excluding', init: excluding);
    mateParams.set(name: 'child', init: child);
  }
}
