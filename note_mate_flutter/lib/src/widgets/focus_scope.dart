// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.329479

import 'package:flutter/src/widgets/focus_scope.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';

/// class Focus extends StatefulWidget
class Focus$Mate extends Focus {
  /// Focus Focus({Key? key, required Widget child, FocusNode? focusNode, FocusNode? parentNode, bool autofocus = false, void Function(bool)? onFocusChange, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool? canRequestFocus, bool? skipTraversal, bool? descendantsAreFocusable, bool? descendantsAreTraversable, bool includeSemantics = true, String? debugLabel})
  Focus$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {FocusNode? parentNode}
    FocusNode? parentNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent}
    FocusOnKeyEventCallback? onKeyEvent,

    /// param: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey}
    FocusOnKeyCallback? onKey,

    /// param: {bool? canRequestFocus}
    bool? canRequestFocus,

    /// param: {bool? skipTraversal}
    bool? skipTraversal,

    /// param: {bool? descendantsAreFocusable}
    bool? descendantsAreFocusable,

    /// param: {bool? descendantsAreTraversable}
    bool? descendantsAreTraversable,

    /// param: {bool includeSemantics = true}
    required bool includeSemantics,

    /// param: {String? debugLabel}
    String? debugLabel,
  }) : super(
          key: key,
          child: child,
          focusNode: focusNode,
          parentNode: parentNode,
          autofocus: autofocus,
          onFocusChange: onFocusChange,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          canRequestFocus: canRequestFocus,
          skipTraversal: skipTraversal,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          includeSemantics: includeSemantics,
          debugLabel: debugLabel,
        ) {}
}

/// class FocusScope extends Focus
class FocusScope$Mate extends FocusScope {
  /// FocusScope FocusScope({Key? key, FocusScopeNode? node, FocusNode? parentNode, required Widget child, bool autofocus = false, void Function(bool)? onFocusChange, bool? canRequestFocus, bool? skipTraversal, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, String? debugLabel})
  FocusScope$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {FocusScopeNode? node}
    FocusScopeNode? node,

    /// param: {FocusNode? parentNode}
    FocusNode? parentNode,

    /// param: {required Widget child}
    required Widget child,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? canRequestFocus}
    bool? canRequestFocus,

    /// param: {bool? skipTraversal}
    bool? skipTraversal,

    /// param: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent}
    FocusOnKeyEventCallback? onKeyEvent,

    /// param: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey}
    FocusOnKeyCallback? onKey,

    /// param: {String? debugLabel}
    String? debugLabel,
  }) : super(
          key: key,
          node: node,
          parentNode: parentNode,
          child: child,
          autofocus: autofocus,
          onFocusChange: onFocusChange,
          canRequestFocus: canRequestFocus,
          skipTraversal: skipTraversal,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          debugLabel: debugLabel,
        ) {}
}

/// class ExcludeFocus extends StatelessWidget
class ExcludeFocus$Mate extends ExcludeFocus {
  /// ExcludeFocus ExcludeFocus({Key? key, bool excluding = true, required Widget child})
  ExcludeFocus$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool excluding = true}
    required bool excluding,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          excluding: excluding,
          child: child,
        ) {}
}
