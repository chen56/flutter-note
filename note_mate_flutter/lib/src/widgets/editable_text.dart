// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/editable_text.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/keyboard_inserted_content.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/services/autofill.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/src/widgets/magnifier.dart';

/// class TextEditingController extends ValueNotifier<TextEditingValue>
class TextEditingController$Mate extends TextEditingController with Mate<TextEditingController$Mate> {
  /// TextEditingController TextEditingController({String? text})
  TextEditingController$Mate(
      {
      /// optionalParameters: {String? text} , hasDefaultValue:false, defaultValueCode:null
      String? text})
      : super(text: text) {
    mateParams = Params(
      init: this,
      builder: (p) => TextEditingController$Mate(text: p.getValue('text')),
    );
    mateParams.set(name: 'text', init: text);
  }

  /// TextEditingController TextEditingController.fromValue(TextEditingValue? value)
  TextEditingController$Mate.fromValue(

      /// requiredParameters: TextEditingValue? value
      TextEditingValue? value)
      : super.fromValue(value) {
    mateParams = Params(
      init: this,
      builder: (p) => TextEditingController$Mate.fromValue(p.getValue('value')),
    );
    mateParams.set(name: 'value', init: value);
  }
}

/// class ToolbarOptions
class ToolbarOptions$Mate extends ToolbarOptions with Mate<ToolbarOptions$Mate> {
  /// ToolbarOptions ToolbarOptions({bool copy = false, bool cut = false, bool paste = false, bool selectAll = false})
  ToolbarOptions$Mate({
    /// optionalParameters: {bool copy = false} , hasDefaultValue:true, defaultValueCode:false
    required bool copy,

    /// optionalParameters: {bool cut = false} , hasDefaultValue:true, defaultValueCode:false
    required bool cut,

    /// optionalParameters: {bool paste = false} , hasDefaultValue:true, defaultValueCode:false
    required bool paste,

    /// optionalParameters: {bool selectAll = false} , hasDefaultValue:true, defaultValueCode:false
    required bool selectAll,
  }) : super(
          copy: copy,
          cut: cut,
          paste: paste,
          selectAll: selectAll,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ToolbarOptions$Mate(
        copy: p.getValue('copy'),
        cut: p.getValue('cut'),
        paste: p.getValue('paste'),
        selectAll: p.getValue('selectAll'),
      ),
    );
    mateParams.set(name: 'copy', init: copy);
    mateParams.set(name: 'cut', init: cut);
    mateParams.set(name: 'paste', init: paste);
    mateParams.set(name: 'selectAll', init: selectAll);
  }
}

/// class ContentInsertionConfiguration
class ContentInsertionConfiguration$Mate extends ContentInsertionConfiguration
    with Mate<ContentInsertionConfiguration$Mate> {
  /// ContentInsertionConfiguration ContentInsertionConfiguration({required void Function(KeyboardInsertedContent) onContentInserted, List<String> allowedMimeTypes = kDefaultContentInsertionMimeTypes})
  ContentInsertionConfiguration$Mate({
    /// optionalParameters: {required void Function(KeyboardInsertedContent) onContentInserted} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<KeyboardInsertedContent> onContentInserted,

    /// optionalParameters: {List<String> allowedMimeTypes = kDefaultContentInsertionMimeTypes} , hasDefaultValue:true, defaultValueCode:kDefaultContentInsertionMimeTypes
    required List<String> allowedMimeTypes,
  }) : super(
          onContentInserted: onContentInserted,
          allowedMimeTypes: allowedMimeTypes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ContentInsertionConfiguration$Mate(
        onContentInserted: p.getValue('onContentInserted'),
        allowedMimeTypes: p.getValue('allowedMimeTypes'),
      ),
    );
    mateParams.set(name: 'onContentInserted', init: onContentInserted);
    mateParams.set(name: 'allowedMimeTypes', init: allowedMimeTypes);
  }
}

/// class EditableText extends StatefulWidget
class EditableText$Mate extends EditableText with WidgetMate<EditableText$Mate> {
  /// EditableText EditableText({Key? key, required TextEditingController controller, required FocusNode focusNode, bool readOnly = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, required TextStyle style, StrutStyle? strutStyle, required Color cursorColor, required Color backgroundCursorColor, TextAlign textAlign = TextAlign.start, TextDirection? textDirection, Locale? locale, double? textScaleFactor, int? maxLines = 1, int? minLines, bool expands = false, bool forceLine = true, TextHeightBehavior? textHeightBehavior, TextWidthBasis textWidthBasis = TextWidthBasis.parent, bool autofocus = false, bool? showCursor, bool showSelectionHandles = false, Color? selectionColor, TextSelectionControls? selectionControls, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(String, Map<String, dynamic>)? onAppPrivateCommand, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, void Function()? onSelectionHandleTapped, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, MouseCursor? mouseCursor, bool rendererIgnoresPointer = false, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, bool cursorOpacityAnimates = false, Offset? cursorOffset, bool paintCursorAboveText = false, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), Brightness keyboardAppearance = Brightness.light, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Color? autocorrectionTextRectColor, ToolbarOptions? toolbarOptions, Iterable<String>? autofillHints = const <String>[], AutofillClient? autofillClient, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, ContentInsertionConfiguration? contentInsertionConfiguration, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  EditableText$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TextEditingController controller} , hasDefaultValue:false, defaultValueCode:null
    required TextEditingController controller,

    /// optionalParameters: {required FocusNode focusNode} , hasDefaultValue:false, defaultValueCode:null
    required FocusNode focusNode,

    /// optionalParameters: {bool readOnly = false} , hasDefaultValue:true, defaultValueCode:false
    required bool readOnly,

    /// optionalParameters: {String obscuringCharacter = '•'} , hasDefaultValue:true, defaultValueCode:'•'
    required String obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool obscureText,

    /// optionalParameters: {bool autocorrect = true} , hasDefaultValue:true, defaultValueCode:true
    required bool autocorrect,

    /// optionalParameters: {SmartDashesType? smartDashesType} , hasDefaultValue:false, defaultValueCode:null
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , hasDefaultValue:false, defaultValueCode:null
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableSuggestions,

    /// optionalParameters: {required TextStyle style} , hasDefaultValue:false, defaultValueCode:null
    required TextStyle style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {required Color cursorColor} , hasDefaultValue:false, defaultValueCode:null
    required Color cursorColor,

    /// optionalParameters: {required Color backgroundCursorColor} , hasDefaultValue:false, defaultValueCode:null
    required Color backgroundCursorColor,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , hasDefaultValue:true, defaultValueCode:TextAlign.start
    required TextAlign textAlign,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {double? textScaleFactor} , hasDefaultValue:false, defaultValueCode:null
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines = 1} , hasDefaultValue:true, defaultValueCode:1
    int? maxLines,

    /// optionalParameters: {int? minLines} , hasDefaultValue:false, defaultValueCode:null
    int? minLines,

    /// optionalParameters: {bool expands = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expands,

    /// optionalParameters: {bool forceLine = true} , hasDefaultValue:true, defaultValueCode:true
    required bool forceLine,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , hasDefaultValue:true, defaultValueCode:TextWidthBasis.parent
    required TextWidthBasis textWidthBasis,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {bool? showCursor} , hasDefaultValue:false, defaultValueCode:null
    bool? showCursor,

    /// optionalParameters: {bool showSelectionHandles = false} , hasDefaultValue:true, defaultValueCode:false
    required bool showSelectionHandles,

    /// optionalParameters: {Color? selectionColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectionColor,

    /// optionalParameters: {TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
    TextSelectionControls? selectionControls,

    /// optionalParameters: {TextInputType? keyboardType} , hasDefaultValue:false, defaultValueCode:null
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , hasDefaultValue:false, defaultValueCode:null
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , hasDefaultValue:true, defaultValueCode:TextCapitalization.none
    required TextCapitalization textCapitalization,

    /// optionalParameters: {void Function(String)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(String, Map<String, dynamic>)? onAppPrivateCommand} , hasDefaultValue:false, defaultValueCode:null
    AppPrivateCommandCallback? onAppPrivateCommand,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , hasDefaultValue:false, defaultValueCode:null
    SelectionChangedCallback? onSelectionChanged,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , hasDefaultValue:false, defaultValueCode:null
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , hasDefaultValue:false, defaultValueCode:null
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool rendererIgnoresPointer = false} , hasDefaultValue:true, defaultValueCode:false
    required bool rendererIgnoresPointer,

    /// optionalParameters: {double cursorWidth = 2.0} , hasDefaultValue:true, defaultValueCode:2.0
    required double cursorWidth,

    /// optionalParameters: {double? cursorHeight} , hasDefaultValue:false, defaultValueCode:null
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , hasDefaultValue:false, defaultValueCode:null
    Radius? cursorRadius,

    /// optionalParameters: {bool cursorOpacityAnimates = false} , hasDefaultValue:true, defaultValueCode:false
    required bool cursorOpacityAnimates,

    /// optionalParameters: {Offset? cursorOffset} , hasDefaultValue:false, defaultValueCode:null
    Offset? cursorOffset,

    /// optionalParameters: {bool paintCursorAboveText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool paintCursorAboveText,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxHeightStyle.tight
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxWidthStyle.tight
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.all(20.0)
    required EdgeInsets scrollPadding,

    /// optionalParameters: {Brightness keyboardAppearance = Brightness.light} , hasDefaultValue:true, defaultValueCode:Brightness.light
    required Brightness keyboardAppearance,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , hasDefaultValue:false, defaultValueCode:null
    bool? enableInteractiveSelection,

    /// optionalParameters: {ScrollController? scrollController} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Color? autocorrectionTextRectColor} , hasDefaultValue:false, defaultValueCode:null
    Color? autocorrectionTextRectColor,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , hasDefaultValue:true, defaultValueCode:const <String>[]
    Iterable<String>? autofillHints,

    /// optionalParameters: {AutofillClient? autofillClient} , hasDefaultValue:false, defaultValueCode:null
    AutofillClient? autofillClient,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , hasDefaultValue:false, defaultValueCode:null
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool scribbleEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool scribbleEnabled,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableIMEPersonalizedLearning,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , hasDefaultValue:false, defaultValueCode:null
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder} , hasDefaultValue:false, defaultValueCode:null
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , hasDefaultValue:false, defaultValueCode:null
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , hasDefaultValue:true, defaultValueCode:TextMagnifierConfiguration.disabled
    required TextMagnifierConfiguration magnifierConfiguration,
  }) : super(
          key: key,
          controller: controller,
          focusNode: focusNode,
          readOnly: readOnly,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          style: style,
          strutStyle: strutStyle,
          cursorColor: cursorColor,
          backgroundCursorColor: backgroundCursorColor,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          forceLine: forceLine,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          autofocus: autofocus,
          showCursor: showCursor,
          showSelectionHandles: showSelectionHandles,
          selectionColor: selectionColor,
          selectionControls: selectionControls,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onAppPrivateCommand: onAppPrivateCommand,
          onSelectionChanged: onSelectionChanged,
          onSelectionHandleTapped: onSelectionHandleTapped,
          onTapOutside: onTapOutside,
          inputFormatters: inputFormatters,
          mouseCursor: mouseCursor,
          rendererIgnoresPointer: rendererIgnoresPointer,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorOpacityAnimates: cursorOpacityAnimates,
          cursorOffset: cursorOffset,
          paintCursorAboveText: paintCursorAboveText,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          scrollPadding: scrollPadding,
          keyboardAppearance: keyboardAppearance,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autocorrectionTextRectColor: autocorrectionTextRectColor,
          autofillHints: autofillHints,
          autofillClient: autofillClient,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contentInsertionConfiguration: contentInsertionConfiguration,
          contextMenuBuilder: contextMenuBuilder,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => EditableText$Mate(
        key: p.getValue('key'),
        controller: p.getValue('controller'),
        focusNode: p.getValue('focusNode'),
        readOnly: p.getValue('readOnly'),
        obscuringCharacter: p.getValue('obscuringCharacter'),
        obscureText: p.getValue('obscureText'),
        autocorrect: p.getValue('autocorrect'),
        smartDashesType: p.getValue('smartDashesType'),
        smartQuotesType: p.getValue('smartQuotesType'),
        enableSuggestions: p.getValue('enableSuggestions'),
        style: p.getValue('style'),
        strutStyle: p.getValue('strutStyle'),
        cursorColor: p.getValue('cursorColor'),
        backgroundCursorColor: p.getValue('backgroundCursorColor'),
        textAlign: p.getValue('textAlign'),
        textDirection: p.getValue('textDirection'),
        locale: p.getValue('locale'),
        textScaleFactor: p.getValue('textScaleFactor'),
        maxLines: p.getValue('maxLines'),
        minLines: p.getValue('minLines'),
        expands: p.getValue('expands'),
        forceLine: p.getValue('forceLine'),
        textHeightBehavior: p.getValue('textHeightBehavior'),
        textWidthBasis: p.getValue('textWidthBasis'),
        autofocus: p.getValue('autofocus'),
        showCursor: p.getValue('showCursor'),
        showSelectionHandles: p.getValue('showSelectionHandles'),
        selectionColor: p.getValue('selectionColor'),
        selectionControls: p.getValue('selectionControls'),
        keyboardType: p.getValue('keyboardType'),
        textInputAction: p.getValue('textInputAction'),
        textCapitalization: p.getValue('textCapitalization'),
        onChanged: p.getValue('onChanged'),
        onEditingComplete: p.getValue('onEditingComplete'),
        onSubmitted: p.getValue('onSubmitted'),
        onAppPrivateCommand: p.getValue('onAppPrivateCommand'),
        onSelectionChanged: p.getValue('onSelectionChanged'),
        onSelectionHandleTapped: p.getValue('onSelectionHandleTapped'),
        onTapOutside: p.getValue('onTapOutside'),
        inputFormatters: p.getValue('inputFormatters'),
        mouseCursor: p.getValue('mouseCursor'),
        rendererIgnoresPointer: p.getValue('rendererIgnoresPointer'),
        cursorWidth: p.getValue('cursorWidth'),
        cursorHeight: p.getValue('cursorHeight'),
        cursorRadius: p.getValue('cursorRadius'),
        cursorOpacityAnimates: p.getValue('cursorOpacityAnimates'),
        cursorOffset: p.getValue('cursorOffset'),
        paintCursorAboveText: p.getValue('paintCursorAboveText'),
        selectionHeightStyle: p.getValue('selectionHeightStyle'),
        selectionWidthStyle: p.getValue('selectionWidthStyle'),
        scrollPadding: p.getValue('scrollPadding'),
        keyboardAppearance: p.getValue('keyboardAppearance'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        enableInteractiveSelection: p.getValue('enableInteractiveSelection'),
        scrollController: p.getValue('scrollController'),
        scrollPhysics: p.getValue('scrollPhysics'),
        autocorrectionTextRectColor: p.getValue('autocorrectionTextRectColor'),
        autofillHints: p.getValue('autofillHints'),
        autofillClient: p.getValue('autofillClient'),
        clipBehavior: p.getValue('clipBehavior'),
        restorationId: p.getValue('restorationId'),
        scrollBehavior: p.getValue('scrollBehavior'),
        scribbleEnabled: p.getValue('scribbleEnabled'),
        enableIMEPersonalizedLearning: p.getValue('enableIMEPersonalizedLearning'),
        contentInsertionConfiguration: p.getValue('contentInsertionConfiguration'),
        contextMenuBuilder: p.getValue('contextMenuBuilder'),
        spellCheckConfiguration: p.getValue('spellCheckConfiguration'),
        magnifierConfiguration: p.getValue('magnifierConfiguration'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'readOnly', init: readOnly);
    mateParams.set(name: 'obscuringCharacter', init: obscuringCharacter);
    mateParams.set(name: 'obscureText', init: obscureText);
    mateParams.set(name: 'autocorrect', init: autocorrect);
    mateParams.set(name: 'smartDashesType', init: smartDashesType);
    mateParams.set(name: 'smartQuotesType', init: smartQuotesType);
    mateParams.set(name: 'enableSuggestions', init: enableSuggestions);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'strutStyle', init: strutStyle);
    mateParams.set(name: 'cursorColor', init: cursorColor);
    mateParams.set(name: 'backgroundCursorColor', init: backgroundCursorColor);
    mateParams.set(name: 'textAlign', init: textAlign);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'locale', init: locale);
    mateParams.set(name: 'textScaleFactor', init: textScaleFactor);
    mateParams.set(name: 'maxLines', init: maxLines);
    mateParams.set(name: 'minLines', init: minLines);
    mateParams.set(name: 'expands', init: expands);
    mateParams.set(name: 'forceLine', init: forceLine);
    mateParams.set(name: 'textHeightBehavior', init: textHeightBehavior);
    mateParams.set(name: 'textWidthBasis', init: textWidthBasis);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'showCursor', init: showCursor);
    mateParams.set(name: 'showSelectionHandles', init: showSelectionHandles);
    mateParams.set(name: 'selectionColor', init: selectionColor);
    mateParams.set(name: 'selectionControls', init: selectionControls);
    mateParams.set(name: 'keyboardType', init: keyboardType);
    mateParams.set(name: 'textInputAction', init: textInputAction);
    mateParams.set(name: 'textCapitalization', init: textCapitalization);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'onEditingComplete', init: onEditingComplete);
    mateParams.set(name: 'onSubmitted', init: onSubmitted);
    mateParams.set(name: 'onAppPrivateCommand', init: onAppPrivateCommand);
    mateParams.set(name: 'onSelectionChanged', init: onSelectionChanged);
    mateParams.set(name: 'onSelectionHandleTapped', init: onSelectionHandleTapped);
    mateParams.set(name: 'onTapOutside', init: onTapOutside);
    mateParams.set(name: 'inputFormatters', init: inputFormatters);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'rendererIgnoresPointer', init: rendererIgnoresPointer);
    mateParams.set(name: 'cursorWidth', init: cursorWidth);
    mateParams.set(name: 'cursorHeight', init: cursorHeight);
    mateParams.set(name: 'cursorRadius', init: cursorRadius);
    mateParams.set(name: 'cursorOpacityAnimates', init: cursorOpacityAnimates);
    mateParams.set(name: 'cursorOffset', init: cursorOffset);
    mateParams.set(name: 'paintCursorAboveText', init: paintCursorAboveText);
    mateParams.set(name: 'selectionHeightStyle', init: selectionHeightStyle);
    mateParams.set(name: 'selectionWidthStyle', init: selectionWidthStyle);
    mateParams.set(name: 'scrollPadding', init: scrollPadding);
    mateParams.set(name: 'keyboardAppearance', init: keyboardAppearance);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'enableInteractiveSelection', init: enableInteractiveSelection);
    mateParams.set(name: 'scrollController', init: scrollController);
    mateParams.set(name: 'scrollPhysics', init: scrollPhysics);
    mateParams.set(name: 'autocorrectionTextRectColor', init: autocorrectionTextRectColor);
    mateParams.set(name: 'autofillHints', init: autofillHints);
    mateParams.set(name: 'autofillClient', init: autofillClient);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'scrollBehavior', init: scrollBehavior);
    mateParams.set(name: 'scribbleEnabled', init: scribbleEnabled);
    mateParams.set(name: 'enableIMEPersonalizedLearning', init: enableIMEPersonalizedLearning);
    mateParams.set(name: 'contentInsertionConfiguration', init: contentInsertionConfiguration);
    mateParams.set(name: 'contextMenuBuilder', init: contextMenuBuilder);
    mateParams.set(name: 'spellCheckConfiguration', init: spellCheckConfiguration);
    mateParams.set(name: 'magnifierConfiguration', init: magnifierConfiguration);
  }
}
