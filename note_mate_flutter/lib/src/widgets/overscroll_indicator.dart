// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/overscroll_indicator.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class GlowingOverscrollIndicator extends StatefulWidget
class GlowingOverscrollIndicator$Mate extends GlowingOverscrollIndicator
    with WidgetMate<GlowingOverscrollIndicator$Mate> {
  /// GlowingOverscrollIndicator GlowingOverscrollIndicator({Key? key, bool showLeading = true, bool showTrailing = true, required AxisDirection axisDirection, required Color color, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Widget? child})
  GlowingOverscrollIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool showLeading = true}
    required bool showLeading,

    /// param: {bool showTrailing = true}
    required bool showTrailing,

    /// param: {required AxisDirection axisDirection}
    required AxisDirection axisDirection,

    /// param: {required Color color}
    required Color color,

    /// param: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate}
    required ScrollNotificationPredicate notificationPredicate,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          showLeading: showLeading,
          showTrailing: showTrailing,
          axisDirection: axisDirection,
          color: color,
          notificationPredicate: notificationPredicate,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => GlowingOverscrollIndicator$Mate(
        key: p.getValue('key'),
        showLeading: p.getValue('showLeading'),
        showTrailing: p.getValue('showTrailing'),
        axisDirection: p.getValue('axisDirection'),
        color: p.getValue('color'),
        notificationPredicate: p.getValue('notificationPredicate'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'showLeading', init: showLeading);
    mateParams.set(name: 'showTrailing', init: showTrailing);
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'notificationPredicate', init: notificationPredicate);
    mateParams.set(name: 'child', init: child);
  }
}

/// class StretchingOverscrollIndicator extends StatefulWidget
class StretchingOverscrollIndicator$Mate extends StretchingOverscrollIndicator
    with WidgetMate<StretchingOverscrollIndicator$Mate> {
  /// StretchingOverscrollIndicator StretchingOverscrollIndicator({Key? key, required AxisDirection axisDirection, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Clip clipBehavior = Clip.hardEdge, Widget? child})
  StretchingOverscrollIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required AxisDirection axisDirection}
    required AxisDirection axisDirection,

    /// param: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate}
    required ScrollNotificationPredicate notificationPredicate,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          notificationPredicate: notificationPredicate,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => StretchingOverscrollIndicator$Mate(
        key: p.getValue('key'),
        axisDirection: p.getValue('axisDirection'),
        notificationPredicate: p.getValue('notificationPredicate'),
        clipBehavior: p.getValue('clipBehavior'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'notificationPredicate', init: notificationPredicate);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'child', init: child);
  }
}

/// class OverscrollIndicatorNotification extends Notification with ViewportNotificationMixin
class OverscrollIndicatorNotification$Mate extends OverscrollIndicatorNotification
    with Mate<OverscrollIndicatorNotification$Mate> {
  /// OverscrollIndicatorNotification OverscrollIndicatorNotification({required bool leading})
  OverscrollIndicatorNotification$Mate(
      {
      /// param: {required bool leading}
      required bool leading})
      : super(leading: leading) {
    mateParams = Params(
      init: this,
      builder: (p) => OverscrollIndicatorNotification$Mate(leading: p.getValue('leading')),
    );
    mateParams.set(name: 'leading', init: leading);
  }
}
