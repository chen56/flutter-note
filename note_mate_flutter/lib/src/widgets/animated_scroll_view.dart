// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/animated_scroll_view.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/rendering/sliver_grid.dart';
import 'package:flutter/src/widgets/sliver.dart';

/// class AnimatedList extends _AnimatedScrollView
class AnimatedList$Mate extends AnimatedList with WidgetMate<AnimatedList$Mate> {
  /// AnimatedList AnimatedList({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, int initialItemCount = 0, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, Clip clipBehavior = Clip.hardEdge})
  AnimatedList$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder}
    required AnimatedItemBuilder itemBuilder,

    /// param: {int initialItemCount = 0}
    required int initialItemCount,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          initialItemCount: initialItemCount,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnimatedList$Mate(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        initialItemCount: p.getValue('initialItemCount'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'initialItemCount', init: initialItemCount);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class AnimatedGrid extends _AnimatedScrollView
class AnimatedGrid$Mate extends AnimatedGrid with WidgetMate<AnimatedGrid$Mate> {
  /// AnimatedGrid AnimatedGrid({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, required SliverGridDelegate gridDelegate, int initialItemCount = 0, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, EdgeInsetsGeometry? padding, Clip clipBehavior = Clip.hardEdge})
  AnimatedGrid$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder}
    required AnimatedItemBuilder itemBuilder,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,

    /// param: {int initialItemCount = 0}
    required int initialItemCount,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          gridDelegate: gridDelegate,
          initialItemCount: initialItemCount,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          padding: padding,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnimatedGrid$Mate(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        gridDelegate: p.getValue('gridDelegate'),
        initialItemCount: p.getValue('initialItemCount'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        padding: p.getValue('padding'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
    mateParams.set(name: 'initialItemCount', init: initialItemCount);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class SliverAnimatedList extends _SliverAnimatedMultiBoxAdaptor
class SliverAnimatedList$Mate extends SliverAnimatedList with WidgetMate<SliverAnimatedList$Mate> {
  /// SliverAnimatedList SliverAnimatedList({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, int? Function(Key)? findChildIndexCallback, int initialItemCount = 0})
  SliverAnimatedList$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder}
    required AnimatedItemBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int initialItemCount = 0}
    required int initialItemCount,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          initialItemCount: initialItemCount,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverAnimatedList$Mate(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        initialItemCount: p.getValue('initialItemCount'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'initialItemCount', init: initialItemCount);
  }
}

/// class SliverAnimatedGrid extends _SliverAnimatedMultiBoxAdaptor
class SliverAnimatedGrid$Mate extends SliverAnimatedGrid with WidgetMate<SliverAnimatedGrid$Mate> {
  /// SliverAnimatedGrid SliverAnimatedGrid({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, required SliverGridDelegate gridDelegate, int? Function(Key)? findChildIndexCallback, int initialItemCount = 0})
  SliverAnimatedGrid$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder}
    required AnimatedItemBuilder itemBuilder,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int initialItemCount = 0}
    required int initialItemCount,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          gridDelegate: gridDelegate,
          findChildIndexCallback: findChildIndexCallback,
          initialItemCount: initialItemCount,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverAnimatedGrid$Mate(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        gridDelegate: p.getValue('gridDelegate'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        initialItemCount: p.getValue('initialItemCount'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'initialItemCount', init: initialItemCount);
  }
}
