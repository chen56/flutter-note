// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';

/// class Scrollable extends StatefulWidget
class Scrollable$Mate extends Scrollable with WidgetMate<Scrollable$Mate> {
  /// Scrollable Scrollable({Key? key, AxisDirection axisDirection = AxisDirection.down, ScrollController? controller, ScrollPhysics? physics, required Widget Function(BuildContext, ViewportOffset) viewportBuilder, double Function(ScrollIncrementDetails)? incrementCalculator, bool excludeFromSemantics = false, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, String? restorationId, ScrollBehavior? scrollBehavior, Clip clipBehavior = Clip.hardEdge})
  Scrollable$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {AxisDirection axisDirection = AxisDirection.down}
    required AxisDirection axisDirection,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {required Widget Function(BuildContext, ViewportOffset) viewportBuilder}
    required ViewportBuilder viewportBuilder,

    /// param: {double Function(ScrollIncrementDetails)? incrementCalculator}
    ScrollIncrementCalculator? incrementCalculator,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          controller: controller,
          physics: physics,
          viewportBuilder: viewportBuilder,
          incrementCalculator: incrementCalculator,
          excludeFromSemantics: excludeFromSemantics,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Scrollable$Mate(
        key: p.getValue('key'),
        axisDirection: p.getValue('axisDirection'),
        controller: p.getValue('controller'),
        physics: p.getValue('physics'),
        viewportBuilder: p.getValue('viewportBuilder'),
        incrementCalculator: p.getValue('incrementCalculator'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        restorationId: p.getValue('restorationId'),
        scrollBehavior: p.getValue('scrollBehavior'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'viewportBuilder', init: viewportBuilder);
    mateParams.set(name: 'incrementCalculator', init: incrementCalculator);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'scrollBehavior', init: scrollBehavior);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class EdgeDraggingAutoScroller
class EdgeDraggingAutoScroller$Mate extends EdgeDraggingAutoScroller with Mate<EdgeDraggingAutoScroller$Mate> {
  /// EdgeDraggingAutoScroller EdgeDraggingAutoScroller(ScrollableState scrollable, {void Function()? onScrollViewScrolled, double velocityScalar = _kDefaultAutoScrollVelocityScalar})
  EdgeDraggingAutoScroller$Mate(
    /// param: ScrollableState scrollable
    ScrollableState scrollable, {
    /// param: {void Function()? onScrollViewScrolled}
    VoidCallback? onScrollViewScrolled,

    /// param: {double velocityScalar = _kDefaultAutoScrollVelocityScalar}
    required double velocityScalar,
  }) : super(
          scrollable,
          onScrollViewScrolled: onScrollViewScrolled,
          velocityScalar: velocityScalar,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => EdgeDraggingAutoScroller$Mate(
        p.getValue('scrollable'),
        onScrollViewScrolled: p.getValue('onScrollViewScrolled'),
        velocityScalar: p.getValue('velocityScalar'),
      ),
    );
    mateParams.set(name: 'scrollable', init: scrollable);
    mateParams.set(name: 'onScrollViewScrolled', init: onScrollViewScrolled);
    mateParams.set(name: 'velocityScalar', init: velocityScalar);
  }
}

/// class ScrollableDetails
class ScrollableDetails$Mate extends ScrollableDetails with Mate<ScrollableDetails$Mate> {
  /// ScrollableDetails ScrollableDetails({required AxisDirection direction, required ScrollController controller, Clip? clipBehavior})
  ScrollableDetails$Mate({
    /// param: {required AxisDirection direction}
    required AxisDirection direction,

    /// param: {required ScrollController controller}
    required ScrollController controller,

    /// param: {Clip? clipBehavior}
    Clip? clipBehavior,
  }) : super(
          direction: direction,
          controller: controller,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollableDetails$Mate(
        direction: p.getValue('direction'),
        controller: p.getValue('controller'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'direction', init: direction);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class ScrollIncrementDetails
class ScrollIncrementDetails$Mate extends ScrollIncrementDetails with Mate<ScrollIncrementDetails$Mate> {
  /// ScrollIncrementDetails ScrollIncrementDetails({required ScrollIncrementType type, required ScrollMetrics metrics})
  ScrollIncrementDetails$Mate({
    /// param: {required ScrollIncrementType type}
    required ScrollIncrementType type,

    /// param: {required ScrollMetrics metrics}
    required ScrollMetrics metrics,
  }) : super(
          type: type,
          metrics: metrics,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollIncrementDetails$Mate(
        type: p.getValue('type'),
        metrics: p.getValue('metrics'),
      ),
    );
    mateParams.set(name: 'type', init: type);
    mateParams.set(name: 'metrics', init: metrics);
  }
}

/// class ScrollIntent extends Intent
class ScrollIntent$Mate extends ScrollIntent with Mate<ScrollIntent$Mate> {
  /// ScrollIntent ScrollIntent({required AxisDirection direction, ScrollIncrementType type = ScrollIncrementType.line})
  ScrollIntent$Mate({
    /// param: {required AxisDirection direction}
    required AxisDirection direction,

    /// param: {ScrollIncrementType type = ScrollIncrementType.line}
    required ScrollIncrementType type,
  }) : super(
          direction: direction,
          type: type,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollIntent$Mate(
        direction: p.getValue('direction'),
        type: p.getValue('type'),
      ),
    );
    mateParams.set(name: 'direction', init: direction);
    mateParams.set(name: 'type', init: type);
  }
}
