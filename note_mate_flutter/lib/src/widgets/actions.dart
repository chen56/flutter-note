// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.144667

import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';

/// class ActionListener extends StatefulWidget
class ActionListener$Mate extends ActionListener {
  /// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
  ActionListener$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required void Function(Action<Intent>) listener}
    required ActionListenerCallback listener,

    /// param: {required Action<Intent> action}
    required Action<Intent> action,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          listener: listener,
          action: action,
          child: child,
        ) {}
}

/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackAction$Mate<T extends Intent> extends CallbackAction<T> {
  /// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
  CallbackAction$Mate(
      {
      /// param: {required Object? Function(T) onInvoke}
      required OnInvokeCallback<T> onInvoke})
      : super(onInvoke: onInvoke) {}
}

/// class Actions extends StatefulWidget
class Actions$Mate extends Actions {
  /// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
  Actions$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ActionDispatcher? dispatcher}
    ActionDispatcher? dispatcher,

    /// param: {required Map<Type, Action<Intent>> actions}
    required Map<Type, Action<Intent>> actions,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          dispatcher: dispatcher,
          actions: actions,
          child: child,
        ) {}
}

/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetector$Mate extends FocusableActionDetector {
  /// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
  FocusableActionDetector$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool enabled = true}
    required bool enabled,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {bool descendantsAreFocusable = true}
    required bool descendantsAreFocusable,

    /// param: {bool descendantsAreTraversable = true}
    required bool descendantsAreTraversable,

    /// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,

    /// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,

    /// param: {void Function(bool)? onShowFocusHighlight}
    ValueChanged<bool>? onShowFocusHighlight,

    /// param: {void Function(bool)? onShowHoverHighlight}
    ValueChanged<bool>? onShowHoverHighlight,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {MouseCursor mouseCursor = MouseCursor.defer}
    required MouseCursor mouseCursor,

    /// param: {bool includeFocusSemantics = true}
    required bool includeFocusSemantics,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          enabled: enabled,
          focusNode: focusNode,
          autofocus: autofocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          shortcuts: shortcuts,
          actions: actions,
          onShowFocusHighlight: onShowFocusHighlight,
          onShowHoverHighlight: onShowHoverHighlight,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          includeFocusSemantics: includeFocusSemantics,
          child: child,
        ) {}
}

/// class VoidCallbackIntent extends Intent
class VoidCallbackIntent$Mate extends VoidCallbackIntent {
  /// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
  VoidCallbackIntent$Mate(

      /// param: void Function() callback
      VoidCallback callback)
      : super(callback) {}
}

/// class DoNothingAction extends Action<Intent>
class DoNothingAction$Mate extends DoNothingAction {
  /// DoNothingAction DoNothingAction({bool consumesKey = true})
  DoNothingAction$Mate(
      {
      /// param: {bool consumesKey = true}
      required bool consumesKey})
      : super(consumesKey: consumesKey) {}
}

/// class PrioritizedIntents extends Intent
class PrioritizedIntents$Mate extends PrioritizedIntents {
  /// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
  PrioritizedIntents$Mate(
      {
      /// param: {required List<Intent> orderedIntents}
      required List<Intent> orderedIntents})
      : super(orderedIntents: orderedIntents) {}
}
