// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';

/// class ActionListener extends StatefulWidget
class ActionListener$Mate extends ActionListener with WidgetMate<ActionListener$Mate> {
  /// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
  ActionListener$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required void Function(Action<Intent>) listener}
    required ActionListenerCallback listener,

    /// param: {required Action<Intent> action}
    required Action<Intent> action,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          listener: listener,
          action: action,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ActionListener$Mate(
        key: p.getValue('key'),
        listener: p.getValue('listener'),
        action: p.getValue('action'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'listener', init: listener);
    mateParams.set(name: 'action', init: action);
    mateParams.set(name: 'child', init: child);
  }
}

/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackAction$Mate<T extends Intent> extends CallbackAction<T> with Mate<CallbackAction$Mate> {
  /// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
  CallbackAction$Mate(
      {
      /// param: {required Object? Function(T) onInvoke}
      required OnInvokeCallback<T> onInvoke})
      : super(onInvoke: onInvoke) {
    mateParams = Params(
      init: this,
      builder: (p) => CallbackAction$Mate(onInvoke: p.getValue('onInvoke')),
    );
    mateParams.set(name: 'onInvoke', init: onInvoke);
  }
}

/// class Actions extends StatefulWidget
class Actions$Mate extends Actions with WidgetMate<Actions$Mate> {
  /// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
  Actions$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ActionDispatcher? dispatcher}
    ActionDispatcher? dispatcher,

    /// param: {required Map<Type, Action<Intent>> actions}
    required Map<Type, Action<Intent>> actions,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          dispatcher: dispatcher,
          actions: actions,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Actions$Mate(
        key: p.getValue('key'),
        dispatcher: p.getValue('dispatcher'),
        actions: p.getValue('actions'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'dispatcher', init: dispatcher);
    mateParams.set(name: 'actions', init: actions);
    mateParams.set(name: 'child', init: child);
  }
}

/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetector$Mate extends FocusableActionDetector with WidgetMate<FocusableActionDetector$Mate> {
  /// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
  FocusableActionDetector$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool enabled = true}
    required bool enabled,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {bool descendantsAreFocusable = true}
    required bool descendantsAreFocusable,

    /// param: {bool descendantsAreTraversable = true}
    required bool descendantsAreTraversable,

    /// param: {Map<ShortcutActivator, Intent>? shortcuts}
    Map<ShortcutActivator, Intent>? shortcuts,

    /// param: {Map<Type, Action<Intent>>? actions}
    Map<Type, Action<Intent>>? actions,

    /// param: {void Function(bool)? onShowFocusHighlight}
    ValueChanged<bool>? onShowFocusHighlight,

    /// param: {void Function(bool)? onShowHoverHighlight}
    ValueChanged<bool>? onShowHoverHighlight,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {MouseCursor mouseCursor = MouseCursor.defer}
    required MouseCursor mouseCursor,

    /// param: {bool includeFocusSemantics = true}
    required bool includeFocusSemantics,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          enabled: enabled,
          focusNode: focusNode,
          autofocus: autofocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          shortcuts: shortcuts,
          actions: actions,
          onShowFocusHighlight: onShowFocusHighlight,
          onShowHoverHighlight: onShowHoverHighlight,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          includeFocusSemantics: includeFocusSemantics,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FocusableActionDetector$Mate(
        key: p.getValue('key'),
        enabled: p.getValue('enabled'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        descendantsAreFocusable: p.getValue('descendantsAreFocusable'),
        descendantsAreTraversable: p.getValue('descendantsAreTraversable'),
        shortcuts: p.getValue('shortcuts'),
        actions: p.getValue('actions'),
        onShowFocusHighlight: p.getValue('onShowFocusHighlight'),
        onShowHoverHighlight: p.getValue('onShowHoverHighlight'),
        onFocusChange: p.getValue('onFocusChange'),
        mouseCursor: p.getValue('mouseCursor'),
        includeFocusSemantics: p.getValue('includeFocusSemantics'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'descendantsAreFocusable', init: descendantsAreFocusable);
    mateParams.set(name: 'descendantsAreTraversable', init: descendantsAreTraversable);
    mateParams.set(name: 'shortcuts', init: shortcuts);
    mateParams.set(name: 'actions', init: actions);
    mateParams.set(name: 'onShowFocusHighlight', init: onShowFocusHighlight);
    mateParams.set(name: 'onShowHoverHighlight', init: onShowHoverHighlight);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'includeFocusSemantics', init: includeFocusSemantics);
    mateParams.set(name: 'child', init: child);
  }
}

/// class VoidCallbackIntent extends Intent
class VoidCallbackIntent$Mate extends VoidCallbackIntent with Mate<VoidCallbackIntent$Mate> {
  /// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
  VoidCallbackIntent$Mate(

      /// param: void Function() callback
      VoidCallback callback)
      : super(callback) {
    mateParams = Params(
      init: this,
      builder: (p) => VoidCallbackIntent$Mate(p.getValue('callback')),
    );
    mateParams.set(name: 'callback', init: callback);
  }
}

/// class DoNothingAction extends Action<Intent>
class DoNothingAction$Mate extends DoNothingAction with Mate<DoNothingAction$Mate> {
  /// DoNothingAction DoNothingAction({bool consumesKey = true})
  DoNothingAction$Mate(
      {
      /// param: {bool consumesKey = true}
      required bool consumesKey})
      : super(consumesKey: consumesKey) {
    mateParams = Params(
      init: this,
      builder: (p) => DoNothingAction$Mate(consumesKey: p.getValue('consumesKey')),
    );
    mateParams.set(name: 'consumesKey', init: consumesKey);
  }
}

/// class PrioritizedIntents extends Intent
class PrioritizedIntents$Mate extends PrioritizedIntents with Mate<PrioritizedIntents$Mate> {
  /// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
  PrioritizedIntents$Mate(
      {
      /// param: {required List<Intent> orderedIntents}
      required List<Intent> orderedIntents})
      : super(orderedIntents: orderedIntents) {
    mateParams = Params(
      init: this,
      builder: (p) => PrioritizedIntents$Mate(orderedIntents: p.getValue('orderedIntents')),
    );
    mateParams.set(name: 'orderedIntents', init: orderedIntents);
  }
}
