// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/rendering/box.dart';
import 'package:vector_math/vector_math_64.dart';

/// class DecoratedBox extends SingleChildRenderObjectWidget
class DecoratedBox$Mate extends DecoratedBox with WidgetMate<DecoratedBox$Mate> {
  /// DecoratedBox DecoratedBox({Key? key, required Decoration decoration, DecorationPosition position = DecorationPosition.background, Widget? child})
  DecoratedBox$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Decoration decoration}
    required Decoration decoration,

    /// param: {DecorationPosition position = DecorationPosition.background}
    required DecorationPosition position,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          decoration: decoration,
          position: position,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DecoratedBox$Mate(
        key: p.getValue('key'),
        decoration: p.getValue('decoration'),
        position: p.getValue('position'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'position', init: position);
    mateParams.set(name: 'child', init: child);
  }
}

/// class Container extends StatelessWidget
class Container$Mate extends Container with WidgetMate<Container$Mate> {
  /// Container Container({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior = Clip.none})
  Container$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {AlignmentGeometry? alignment}
    AlignmentGeometry? alignment,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {Color? color}
    Color? color,

    /// param: {Decoration? decoration}
    Decoration? decoration,

    /// param: {Decoration? foregroundDecoration}
    Decoration? foregroundDecoration,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {BoxConstraints? constraints}
    BoxConstraints? constraints,

    /// param: {EdgeInsetsGeometry? margin}
    EdgeInsetsGeometry? margin,

    /// param: {Matrix4? transform}
    Matrix4? transform,

    /// param: {AlignmentGeometry? transformAlignment}
    AlignmentGeometry? transformAlignment,

    /// param: {Widget? child}
    Widget? child,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
  }) : super(
          key: key,
          alignment: alignment,
          padding: padding,
          color: color,
          decoration: decoration,
          foregroundDecoration: foregroundDecoration,
          width: width,
          height: height,
          constraints: constraints,
          margin: margin,
          transform: transform,
          transformAlignment: transformAlignment,
          child: child,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Container$Mate(
        key: p.getValue('key'),
        alignment: p.getValue('alignment'),
        padding: p.getValue('padding'),
        color: p.getValue('color'),
        decoration: p.getValue('decoration'),
        foregroundDecoration: p.getValue('foregroundDecoration'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        constraints: p.getValue('constraints'),
        margin: p.getValue('margin'),
        transform: p.getValue('transform'),
        transformAlignment: p.getValue('transformAlignment'),
        child: p.getValue('child'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'foregroundDecoration', init: foregroundDecoration);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'constraints', init: constraints);
    mateParams.set(name: 'margin', init: margin);
    mateParams.set(name: 'transform', init: transform);
    mateParams.set(name: 'transformAlignment', init: transformAlignment);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}
