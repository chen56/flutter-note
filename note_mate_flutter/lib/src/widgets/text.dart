// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.658397

import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/inline_span.dart';

/// class DefaultTextStyle extends InheritedTheme
class DefaultTextStyle$Mate extends DefaultTextStyle {
  /// DefaultTextStyle DefaultTextStyle({Key? key, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, required Widget child})
  DefaultTextStyle$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required TextStyle style}
    required TextStyle style,

    /// param: {TextAlign? textAlign}
    TextAlign? textAlign,

    /// param: {bool softWrap = true}
    required bool softWrap,

    /// param: {TextOverflow overflow = TextOverflow.clip}
    required TextOverflow overflow,

    /// param: {int? maxLines}
    int? maxLines,

    /// param: {TextWidthBasis textWidthBasis = TextWidthBasis.parent}
    required TextWidthBasis textWidthBasis,

    /// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          style: style,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {}

  /// DefaultTextStyle DefaultTextStyle.fallback({Key? key})
  DefaultTextStyle$Mate.fallback(
      {
      /// param: {Key? key}
      Key? key})
      : super.fallback(key: key) {}
}

/// class DefaultTextHeightBehavior extends InheritedTheme
class DefaultTextHeightBehavior$Mate extends DefaultTextHeightBehavior {
  /// DefaultTextHeightBehavior DefaultTextHeightBehavior({Key? key, required TextHeightBehavior textHeightBehavior, required Widget child})
  DefaultTextHeightBehavior$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required TextHeightBehavior textHeightBehavior}
    required TextHeightBehavior textHeightBehavior,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {}
}

/// class Text extends StatelessWidget
class Text$Mate extends Text {
  /// Text Text(String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate(
    /// param: String data
    String data, {
    /// param: {Key? key}
    Key? key,

    /// param: {TextStyle? style}
    TextStyle? style,

    /// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,

    /// param: {TextAlign? textAlign}
    TextAlign? textAlign,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {Locale? locale}
    Locale? locale,

    /// param: {bool? softWrap}
    bool? softWrap,

    /// param: {TextOverflow? overflow}
    TextOverflow? overflow,

    /// param: {double? textScaleFactor}
    double? textScaleFactor,

    /// param: {int? maxLines}
    int? maxLines,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {TextWidthBasis? textWidthBasis}
    TextWidthBasis? textWidthBasis,

    /// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,

    /// param: {Color? selectionColor}
    Color? selectionColor,
  }) : super(
          data,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {}

  /// Text Text.rich(InlineSpan textSpan, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate.rich(
    /// param: InlineSpan textSpan
    InlineSpan textSpan, {
    /// param: {Key? key}
    Key? key,

    /// param: {TextStyle? style}
    TextStyle? style,

    /// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,

    /// param: {TextAlign? textAlign}
    TextAlign? textAlign,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {Locale? locale}
    Locale? locale,

    /// param: {bool? softWrap}
    bool? softWrap,

    /// param: {TextOverflow? overflow}
    TextOverflow? overflow,

    /// param: {double? textScaleFactor}
    double? textScaleFactor,

    /// param: {int? maxLines}
    int? maxLines,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {TextWidthBasis? textWidthBasis}
    TextWidthBasis? textWidthBasis,

    /// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,

    /// param: {Color? selectionColor}
    Color? selectionColor,
  }) : super.rich(
          textSpan,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {}
}
