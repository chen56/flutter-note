// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/async.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'dart:async';

/// class AsyncSnapshot<T>
class AsyncSnapshot$Mate<T> extends AsyncSnapshot<T> with Mate<AsyncSnapshot$Mate> {
  /// AsyncSnapshot<T> AsyncSnapshot.withData(ConnectionState state, T data)
  AsyncSnapshot$Mate.withData(
    /// requiredParameters: ConnectionState state
    ConnectionState state,

    /// requiredParameters: T data
    T data,
  ) : super.withData(
          state,
          data,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AsyncSnapshot$Mate.withData(
        p.getValue('state'),
        p.getValue('data'),
      ),
    );
    mateParams.set(name: 'state', init: state);
    mateParams.set(name: 'data', init: data);
  }

  /// AsyncSnapshot<T> AsyncSnapshot.withError(ConnectionState state, Object error, [StackTrace stackTrace = StackTrace.empty])
  AsyncSnapshot$Mate.withError(
    /// requiredParameters: ConnectionState state
    ConnectionState state,

    /// requiredParameters: Object error
    Object error,

    /// requiredParameters: [StackTrace stackTrace = StackTrace.empty]
    StackTrace stackTrace,
  ) : super.withError(
          state,
          error,
          stackTrace,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AsyncSnapshot$Mate.withError(
        p.getValue('state'),
        p.getValue('error'),
        p.getValue('stackTrace'),
      ),
    );
    mateParams.set(name: 'state', init: state);
    mateParams.set(name: 'error', init: error);
    mateParams.set(name: 'stackTrace', init: stackTrace);
  }
}

/// class StreamBuilder<T> extends StreamBuilderBase<T, AsyncSnapshot<T>>
class StreamBuilder$Mate<T> extends StreamBuilder<T> with WidgetMate<StreamBuilder$Mate> {
  /// StreamBuilder<T> StreamBuilder({Key? key, T? initialData, Stream<T>? stream, required Widget Function(BuildContext, AsyncSnapshot<T>) builder})
  StreamBuilder$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {T? initialData} , hasDefaultValue:false, defaultValueCode:null
    T? initialData,

    /// optionalParameters: {Stream<T>? stream} , hasDefaultValue:false, defaultValueCode:null
    Stream<T>? stream,

    /// optionalParameters: {required Widget Function(BuildContext, AsyncSnapshot<T>) builder} , hasDefaultValue:false, defaultValueCode:null
    required AsyncWidgetBuilder<T> builder,
  }) : super(
          key: key,
          initialData: initialData,
          stream: stream,
          builder: builder,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => StreamBuilder$Mate(
        key: p.getValue('key'),
        initialData: p.getValue('initialData'),
        stream: p.getValue('stream'),
        builder: p.getValue('builder'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'initialData', init: initialData);
    mateParams.set(name: 'stream', init: stream);
    mateParams.set(name: 'builder', init: builder);
  }
}

/// class FutureBuilder<T> extends StatefulWidget
class FutureBuilder$Mate<T> extends FutureBuilder<T> with WidgetMate<FutureBuilder$Mate> {
  /// FutureBuilder<T> FutureBuilder({Key? key, Future<T>? future, T? initialData, required Widget Function(BuildContext, AsyncSnapshot<T>) builder})
  FutureBuilder$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Future<T>? future} , hasDefaultValue:false, defaultValueCode:null
    Future<T>? future,

    /// optionalParameters: {T? initialData} , hasDefaultValue:false, defaultValueCode:null
    T? initialData,

    /// optionalParameters: {required Widget Function(BuildContext, AsyncSnapshot<T>) builder} , hasDefaultValue:false, defaultValueCode:null
    required AsyncWidgetBuilder<T> builder,
  }) : super(
          key: key,
          future: future,
          initialData: initialData,
          builder: builder,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FutureBuilder$Mate(
        key: p.getValue('key'),
        future: p.getValue('future'),
        initialData: p.getValue('initialData'),
        builder: p.getValue('builder'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'future', init: future);
    mateParams.set(name: 'initialData', init: initialData);
    mateParams.set(name: 'builder', init: builder);
  }
}
