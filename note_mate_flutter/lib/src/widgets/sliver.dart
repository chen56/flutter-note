// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/rendering/sliver_grid.dart';

/// class SliverChildBuilderDelegate extends SliverChildDelegate
class SliverChildBuilderDelegate$Mate extends SliverChildBuilderDelegate with Mate<SliverChildBuilderDelegate$Mate> {
  /// SliverChildBuilderDelegate SliverChildBuilderDelegate(Widget? Function(BuildContext, int) builder, {int? Function(Key)? findChildIndexCallback, int? childCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback, int semanticIndexOffset = 0})
  SliverChildBuilderDelegate$Mate(
    /// requiredParameters: Widget? Function(BuildContext, int) builder
    NullableIndexedWidgetBuilder builder, {
    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? childCount} , hasDefaultValue:false, defaultValueCode:null
    int? childCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback} , hasDefaultValue:true, defaultValueCode:_kDefaultSemanticIndexCallback
    required SemanticIndexCallback semanticIndexCallback,

    /// optionalParameters: {int semanticIndexOffset = 0} , hasDefaultValue:true, defaultValueCode:0
    required int semanticIndexOffset,
  }) : super(
          builder,
          findChildIndexCallback: findChildIndexCallback,
          childCount: childCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          semanticIndexCallback: semanticIndexCallback,
          semanticIndexOffset: semanticIndexOffset,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverChildBuilderDelegate$Mate(
        p.getValue('builder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        childCount: p.getValue('childCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        semanticIndexCallback: p.getValue('semanticIndexCallback'),
        semanticIndexOffset: p.getValue('semanticIndexOffset'),
      ),
    );
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'childCount', init: childCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'semanticIndexCallback', init: semanticIndexCallback);
    mateParams.set(name: 'semanticIndexOffset', init: semanticIndexOffset);
  }
}

/// class SliverChildListDelegate extends SliverChildDelegate
class SliverChildListDelegate$Mate extends SliverChildListDelegate with Mate<SliverChildListDelegate$Mate> {
  /// SliverChildListDelegate SliverChildListDelegate(List<Widget> children, {bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback, int semanticIndexOffset = 0})
  SliverChildListDelegate$Mate(
    /// requiredParameters: List<Widget> children
    List<Widget> children, {
    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback} , hasDefaultValue:true, defaultValueCode:_kDefaultSemanticIndexCallback
    required SemanticIndexCallback semanticIndexCallback,

    /// optionalParameters: {int semanticIndexOffset = 0} , hasDefaultValue:true, defaultValueCode:0
    required int semanticIndexOffset,
  }) : super(
          children,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          semanticIndexCallback: semanticIndexCallback,
          semanticIndexOffset: semanticIndexOffset,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverChildListDelegate$Mate(
        p.getValue('children'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        semanticIndexCallback: p.getValue('semanticIndexCallback'),
        semanticIndexOffset: p.getValue('semanticIndexOffset'),
      ),
    );
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'semanticIndexCallback', init: semanticIndexCallback);
    mateParams.set(name: 'semanticIndexOffset', init: semanticIndexOffset);
  }

  /// SliverChildListDelegate SliverChildListDelegate.fixed(List<Widget> children, {bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback, int semanticIndexOffset = 0})
  SliverChildListDelegate$Mate.fixed(
    /// requiredParameters: List<Widget> children
    List<Widget> children, {
    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback} , hasDefaultValue:true, defaultValueCode:_kDefaultSemanticIndexCallback
    required SemanticIndexCallback semanticIndexCallback,

    /// optionalParameters: {int semanticIndexOffset = 0} , hasDefaultValue:true, defaultValueCode:0
    required int semanticIndexOffset,
  }) : super.fixed(
          children,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          semanticIndexCallback: semanticIndexCallback,
          semanticIndexOffset: semanticIndexOffset,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverChildListDelegate$Mate.fixed(
        p.getValue('children'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        semanticIndexCallback: p.getValue('semanticIndexCallback'),
        semanticIndexOffset: p.getValue('semanticIndexOffset'),
      ),
    );
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'semanticIndexCallback', init: semanticIndexCallback);
    mateParams.set(name: 'semanticIndexOffset', init: semanticIndexOffset);
  }
}

/// class SliverList extends SliverMultiBoxAdaptorWidget
class SliverList$Mate extends SliverList with WidgetMate<SliverList$Mate> {
  /// SliverList SliverList({Key? key, required SliverChildDelegate delegate})
  SliverList$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverChildDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverChildDelegate delegate,
  }) : super(
          key: key,
          delegate: delegate,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverList$Mate(
        key: p.getValue('key'),
        delegate: p.getValue('delegate'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'delegate', init: delegate);
  }

  /// SliverList SliverList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , hasDefaultValue:false, defaultValueCode:null
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverList$Mate.builder(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }

  /// SliverList SliverList.separated({Key? key, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, required Widget? Function(BuildContext, int) separatorBuilder, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.separated({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {required Widget? Function(BuildContext, int) separatorBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder separatorBuilder,

    /// optionalParameters: {int? itemCount} , hasDefaultValue:false, defaultValueCode:null
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,
  }) : super.separated(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          separatorBuilder: separatorBuilder,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverList$Mate.separated(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        separatorBuilder: p.getValue('separatorBuilder'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'separatorBuilder', init: separatorBuilder);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }

  /// SliverList SliverList.list({Key? key, required List<Widget> children, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.list({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<Widget> children} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget> children,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,
  }) : super.list(
          key: key,
          children: children,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverList$Mate.list(
        key: p.getValue('key'),
        children: p.getValue('children'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }
}

/// class SliverFixedExtentList extends SliverMultiBoxAdaptorWidget
class SliverFixedExtentList$Mate extends SliverFixedExtentList with WidgetMate<SliverFixedExtentList$Mate> {
  /// SliverFixedExtentList SliverFixedExtentList({Key? key, required SliverChildDelegate delegate, required double itemExtent})
  SliverFixedExtentList$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverChildDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverChildDelegate delegate,

    /// optionalParameters: {required double itemExtent} , hasDefaultValue:false, defaultValueCode:null
    required double itemExtent,
  }) : super(
          key: key,
          delegate: delegate,
          itemExtent: itemExtent,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverFixedExtentList$Mate(
        key: p.getValue('key'),
        delegate: p.getValue('delegate'),
        itemExtent: p.getValue('itemExtent'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'itemExtent', init: itemExtent);
  }

  /// SliverFixedExtentList SliverFixedExtentList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, required double itemExtent, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverFixedExtentList$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {required double itemExtent} , hasDefaultValue:false, defaultValueCode:null
    required double itemExtent,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , hasDefaultValue:false, defaultValueCode:null
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          itemBuilder: itemBuilder,
          itemExtent: itemExtent,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverFixedExtentList$Mate.builder(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        itemExtent: p.getValue('itemExtent'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }

  /// SliverFixedExtentList SliverFixedExtentList.list({Key? key, required List<Widget> children, required double itemExtent, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverFixedExtentList$Mate.list({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<Widget> children} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget> children,

    /// optionalParameters: {required double itemExtent} , hasDefaultValue:false, defaultValueCode:null
    required double itemExtent,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,
  }) : super.list(
          key: key,
          children: children,
          itemExtent: itemExtent,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverFixedExtentList$Mate.list(
        key: p.getValue('key'),
        children: p.getValue('children'),
        itemExtent: p.getValue('itemExtent'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }
}

/// class SliverGrid extends SliverMultiBoxAdaptorWidget
class SliverGrid$Mate extends SliverGrid with WidgetMate<SliverGrid$Mate> {
  /// SliverGrid SliverGrid({Key? key, required SliverChildDelegate delegate, required SliverGridDelegate gridDelegate})
  SliverGrid$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverChildDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverChildDelegate delegate,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,
  }) : super(
          key: key,
          delegate: delegate,
          gridDelegate: gridDelegate,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverGrid$Mate(
        key: p.getValue('key'),
        delegate: p.getValue('delegate'),
        gridDelegate: p.getValue('gridDelegate'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
  }

  /// SliverGrid SliverGrid.builder({Key? key, required SliverGridDelegate gridDelegate, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverGrid$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , hasDefaultValue:false, defaultValueCode:null
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          gridDelegate: gridDelegate,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverGrid$Mate.builder(
        key: p.getValue('key'),
        gridDelegate: p.getValue('gridDelegate'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }

  /// SliverGrid SliverGrid.count({Key? key, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, List<Widget> children = const <Widget>[]})
  SliverGrid$Mate.count({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required int crossAxisCount} , hasDefaultValue:false, defaultValueCode:null
    required int crossAxisCount,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double mainAxisSpacing,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisSpacing,

    /// optionalParameters: {double childAspectRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double childAspectRatio,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,
  }) : super.count(
          key: key,
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverGrid$Mate.count(
        key: p.getValue('key'),
        crossAxisCount: p.getValue('crossAxisCount'),
        mainAxisSpacing: p.getValue('mainAxisSpacing'),
        crossAxisSpacing: p.getValue('crossAxisSpacing'),
        childAspectRatio: p.getValue('childAspectRatio'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'crossAxisCount', init: crossAxisCount);
    mateParams.set(name: 'mainAxisSpacing', init: mainAxisSpacing);
    mateParams.set(name: 'crossAxisSpacing', init: crossAxisSpacing);
    mateParams.set(name: 'childAspectRatio', init: childAspectRatio);
    mateParams.set(name: 'children', init: children);
  }

  /// SliverGrid SliverGrid.extent({Key? key, required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, List<Widget> children = const <Widget>[]})
  SliverGrid$Mate.extent({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required double maxCrossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
    required double maxCrossAxisExtent,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double mainAxisSpacing,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisSpacing,

    /// optionalParameters: {double childAspectRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double childAspectRatio,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,
  }) : super.extent(
          key: key,
          maxCrossAxisExtent: maxCrossAxisExtent,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverGrid$Mate.extent(
        key: p.getValue('key'),
        maxCrossAxisExtent: p.getValue('maxCrossAxisExtent'),
        mainAxisSpacing: p.getValue('mainAxisSpacing'),
        crossAxisSpacing: p.getValue('crossAxisSpacing'),
        childAspectRatio: p.getValue('childAspectRatio'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'maxCrossAxisExtent', init: maxCrossAxisExtent);
    mateParams.set(name: 'mainAxisSpacing', init: mainAxisSpacing);
    mateParams.set(name: 'crossAxisSpacing', init: crossAxisSpacing);
    mateParams.set(name: 'childAspectRatio', init: childAspectRatio);
    mateParams.set(name: 'children', init: children);
  }
}

/// class SliverMultiBoxAdaptorElement extends RenderObjectElement implements RenderSliverBoxChildManager
class SliverMultiBoxAdaptorElement$Mate extends SliverMultiBoxAdaptorElement
    with Mate<SliverMultiBoxAdaptorElement$Mate> {
  /// SliverMultiBoxAdaptorElement SliverMultiBoxAdaptorElement(SliverMultiBoxAdaptorWidget widget, {bool replaceMovedChildren = false})
  SliverMultiBoxAdaptorElement$Mate(
    /// requiredParameters: SliverMultiBoxAdaptorWidget widget
    SliverMultiBoxAdaptorWidget widget, {
    /// optionalParameters: {bool replaceMovedChildren = false} , hasDefaultValue:true, defaultValueCode:false
    required bool replaceMovedChildren,
  }) : super(
          widget,
          replaceMovedChildren: replaceMovedChildren,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverMultiBoxAdaptorElement$Mate(
        p.getValue('widget'),
        replaceMovedChildren: p.getValue('replaceMovedChildren'),
      ),
    );
    mateParams.set(name: 'widget', init: widget);
    mateParams.set(name: 'replaceMovedChildren', init: replaceMovedChildren);
  }
}

/// class SliverOpacity extends SingleChildRenderObjectWidget
class SliverOpacity$Mate extends SliverOpacity with WidgetMate<SliverOpacity$Mate> {
  /// SliverOpacity SliverOpacity({Key? key, required double opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverOpacity$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required double opacity} , hasDefaultValue:false, defaultValueCode:null
    required double opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alwaysIncludeSemantics,

    /// optionalParameters: {Widget? sliver} , hasDefaultValue:false, defaultValueCode:null
    Widget? sliver,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          sliver: sliver,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverOpacity$Mate(
        key: p.getValue('key'),
        opacity: p.getValue('opacity'),
        alwaysIncludeSemantics: p.getValue('alwaysIncludeSemantics'),
        sliver: p.getValue('sliver'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'alwaysIncludeSemantics', init: alwaysIncludeSemantics);
    mateParams.set(name: 'sliver', init: sliver);
  }
}

/// class SliverIgnorePointer extends SingleChildRenderObjectWidget
class SliverIgnorePointer$Mate extends SliverIgnorePointer with WidgetMate<SliverIgnorePointer$Mate> {
  /// SliverIgnorePointer SliverIgnorePointer({Key? key, bool ignoring = true, bool? ignoringSemantics, Widget? sliver})
  SliverIgnorePointer$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool ignoring = true} , hasDefaultValue:true, defaultValueCode:true
    required bool ignoring,

    /// optionalParameters: {bool? ignoringSemantics} , hasDefaultValue:false, defaultValueCode:null
    bool? ignoringSemantics,

    /// optionalParameters: {Widget? sliver} , hasDefaultValue:false, defaultValueCode:null
    Widget? sliver,
  }) : super(
          key: key,
          ignoring: ignoring,
          ignoringSemantics: ignoringSemantics,
          sliver: sliver,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverIgnorePointer$Mate(
        key: p.getValue('key'),
        ignoring: p.getValue('ignoring'),
        ignoringSemantics: p.getValue('ignoringSemantics'),
        sliver: p.getValue('sliver'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'ignoring', init: ignoring);
    mateParams.set(name: 'ignoringSemantics', init: ignoringSemantics);
    mateParams.set(name: 'sliver', init: sliver);
  }
}

/// class SliverOffstage extends SingleChildRenderObjectWidget
class SliverOffstage$Mate extends SliverOffstage with WidgetMate<SliverOffstage$Mate> {
  /// SliverOffstage SliverOffstage({Key? key, bool offstage = true, Widget? sliver})
  SliverOffstage$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool offstage = true} , hasDefaultValue:true, defaultValueCode:true
    required bool offstage,

    /// optionalParameters: {Widget? sliver} , hasDefaultValue:false, defaultValueCode:null
    Widget? sliver,
  }) : super(
          key: key,
          offstage: offstage,
          sliver: sliver,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverOffstage$Mate(
        key: p.getValue('key'),
        offstage: p.getValue('offstage'),
        sliver: p.getValue('sliver'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'offstage', init: offstage);
    mateParams.set(name: 'sliver', init: sliver);
  }
}

/// class KeepAlive extends ParentDataWidget<KeepAliveParentDataMixin>
class KeepAlive$Mate extends KeepAlive with WidgetMate<KeepAlive$Mate> {
  /// KeepAlive KeepAlive({Key? key, required bool keepAlive, required Widget child})
  KeepAlive$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required bool keepAlive} , hasDefaultValue:false, defaultValueCode:null
    required bool keepAlive,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          keepAlive: keepAlive,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeepAlive$Mate(
        key: p.getValue('key'),
        keepAlive: p.getValue('keepAlive'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'keepAlive', init: keepAlive);
    mateParams.set(name: 'child', init: child);
  }
}
