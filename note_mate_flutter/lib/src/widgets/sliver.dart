// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.628438

import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/rendering/sliver_grid.dart';
export 'package:flutter/rendering.dart'
    show SliverGridDelegate, SliverGridDelegateWithFixedCrossAxisCount, SliverGridDelegateWithMaxCrossAxisExtent;

/// class SliverChildBuilderDelegate extends SliverChildDelegate
class SliverChildBuilderDelegate$Mate extends SliverChildBuilderDelegate {
  /// SliverChildBuilderDelegate SliverChildBuilderDelegate(Widget? Function(BuildContext, int) builder, {int? Function(Key)? findChildIndexCallback, int? childCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback, int semanticIndexOffset = 0})
  SliverChildBuilderDelegate$Mate(
    /// param: Widget? Function(BuildContext, int) builder
    NullableIndexedWidgetBuilder builder, {
    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? childCount}
    int? childCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback}
    required SemanticIndexCallback semanticIndexCallback,

    /// param: {int semanticIndexOffset = 0}
    required int semanticIndexOffset,
  }) : super(
          builder,
          findChildIndexCallback: findChildIndexCallback,
          childCount: childCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          semanticIndexCallback: semanticIndexCallback,
          semanticIndexOffset: semanticIndexOffset,
        ) {}
}

/// class SliverChildListDelegate extends SliverChildDelegate
class SliverChildListDelegate$Mate extends SliverChildListDelegate {
  /// SliverChildListDelegate SliverChildListDelegate(List<Widget> children, {bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback, int semanticIndexOffset = 0})
  SliverChildListDelegate$Mate(
    /// param: List<Widget> children
    List<Widget> children, {
    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback}
    required SemanticIndexCallback semanticIndexCallback,

    /// param: {int semanticIndexOffset = 0}
    required int semanticIndexOffset,
  }) : super(
          children,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          semanticIndexCallback: semanticIndexCallback,
          semanticIndexOffset: semanticIndexOffset,
        ) {}

  /// SliverChildListDelegate SliverChildListDelegate.fixed(List<Widget> children, {bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback, int semanticIndexOffset = 0})
  SliverChildListDelegate$Mate.fixed(
    /// param: List<Widget> children
    List<Widget> children, {
    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {int? Function(Widget, int) semanticIndexCallback = _kDefaultSemanticIndexCallback}
    required SemanticIndexCallback semanticIndexCallback,

    /// param: {int semanticIndexOffset = 0}
    required int semanticIndexOffset,
  }) : super.fixed(
          children,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          semanticIndexCallback: semanticIndexCallback,
          semanticIndexOffset: semanticIndexOffset,
        ) {}
}

/// abstract class SliverWithKeepAliveWidget extends RenderObjectWidget
abstract class SliverWithKeepAliveWidget$Mate extends SliverWithKeepAliveWidget {
  /// SliverWithKeepAliveWidget SliverWithKeepAliveWidget({Key? key})
  SliverWithKeepAliveWidget$Mate(
      {
      /// param: {Key? key}
      Key? key})
      : super(key: key) {}
}

/// abstract class SliverMultiBoxAdaptorWidget extends SliverWithKeepAliveWidget
abstract class SliverMultiBoxAdaptorWidget$Mate extends SliverMultiBoxAdaptorWidget {
  /// SliverMultiBoxAdaptorWidget SliverMultiBoxAdaptorWidget({Key? key, required SliverChildDelegate delegate})
  SliverMultiBoxAdaptorWidget$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverChildDelegate delegate}
    required SliverChildDelegate delegate,
  }) : super(
          key: key,
          delegate: delegate,
        ) {}
}

/// class SliverList extends SliverMultiBoxAdaptorWidget
class SliverList$Mate extends SliverList {
  /// SliverList SliverList({Key? key, required SliverChildDelegate delegate})
  SliverList$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverChildDelegate delegate}
    required SliverChildDelegate delegate,
  }) : super(
          key: key,
          delegate: delegate,
        ) {}

  /// SliverList SliverList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {}

  /// SliverList SliverList.separated({Key? key, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, required Widget? Function(BuildContext, int) separatorBuilder, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.separated({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {required Widget? Function(BuildContext, int) separatorBuilder}
    required NullableIndexedWidgetBuilder separatorBuilder,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.separated(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          separatorBuilder: separatorBuilder,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {}

  /// SliverList SliverList.list({Key? key, required List<Widget> children, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.list({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<Widget> children}
    required List<Widget> children,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.list(
          key: key,
          children: children,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {}
}

/// class SliverFixedExtentList extends SliverMultiBoxAdaptorWidget
class SliverFixedExtentList$Mate extends SliverFixedExtentList {
  /// SliverFixedExtentList SliverFixedExtentList({Key? key, required SliverChildDelegate delegate, required double itemExtent})
  SliverFixedExtentList$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverChildDelegate delegate}
    required SliverChildDelegate delegate,

    /// param: {required double itemExtent}
    required double itemExtent,
  }) : super(
          key: key,
          delegate: delegate,
          itemExtent: itemExtent,
        ) {}

  /// SliverFixedExtentList SliverFixedExtentList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, required double itemExtent, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverFixedExtentList$Mate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {required double itemExtent}
    required double itemExtent,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          itemBuilder: itemBuilder,
          itemExtent: itemExtent,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {}

  /// SliverFixedExtentList SliverFixedExtentList.list({Key? key, required List<Widget> children, required double itemExtent, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverFixedExtentList$Mate.list({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<Widget> children}
    required List<Widget> children,

    /// param: {required double itemExtent}
    required double itemExtent,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.list(
          key: key,
          children: children,
          itemExtent: itemExtent,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {}
}

/// class SliverGrid extends SliverMultiBoxAdaptorWidget
class SliverGrid$Mate extends SliverGrid {
  /// SliverGrid SliverGrid({Key? key, required SliverChildDelegate delegate, required SliverGridDelegate gridDelegate})
  SliverGrid$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverChildDelegate delegate}
    required SliverChildDelegate delegate,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,
  }) : super(
          key: key,
          delegate: delegate,
          gridDelegate: gridDelegate,
        ) {}

  /// SliverGrid SliverGrid.builder({Key? key, required SliverGridDelegate gridDelegate, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverGrid$Mate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          gridDelegate: gridDelegate,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {}

  /// SliverGrid SliverGrid.count({Key? key, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, List<Widget> children = const <Widget>[]})
  SliverGrid$Mate.count({
    /// param: {Key? key}
    Key? key,

    /// param: {required int crossAxisCount}
    required int crossAxisCount,

    /// param: {double mainAxisSpacing = 0.0}
    required double mainAxisSpacing,

    /// param: {double crossAxisSpacing = 0.0}
    required double crossAxisSpacing,

    /// param: {double childAspectRatio = 1.0}
    required double childAspectRatio,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,
  }) : super.count(
          key: key,
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          children: children,
        ) {}

  /// SliverGrid SliverGrid.extent({Key? key, required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, List<Widget> children = const <Widget>[]})
  SliverGrid$Mate.extent({
    /// param: {Key? key}
    Key? key,

    /// param: {required double maxCrossAxisExtent}
    required double maxCrossAxisExtent,

    /// param: {double mainAxisSpacing = 0.0}
    required double mainAxisSpacing,

    /// param: {double crossAxisSpacing = 0.0}
    required double crossAxisSpacing,

    /// param: {double childAspectRatio = 1.0}
    required double childAspectRatio,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,
  }) : super.extent(
          key: key,
          maxCrossAxisExtent: maxCrossAxisExtent,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          children: children,
        ) {}
}

/// class SliverMultiBoxAdaptorElement extends RenderObjectElement implements RenderSliverBoxChildManager
class SliverMultiBoxAdaptorElement$Mate extends SliverMultiBoxAdaptorElement {
  /// SliverMultiBoxAdaptorElement SliverMultiBoxAdaptorElement(SliverMultiBoxAdaptorWidget widget, {bool replaceMovedChildren = false})
  SliverMultiBoxAdaptorElement$Mate(
    /// param: SliverMultiBoxAdaptorWidget widget
    SliverMultiBoxAdaptorWidget widget, {
    /// param: {bool replaceMovedChildren = false}
    required bool replaceMovedChildren,
  }) : super(
          widget,
          replaceMovedChildren: replaceMovedChildren,
        ) {}
}

/// class SliverOpacity extends SingleChildRenderObjectWidget
class SliverOpacity$Mate extends SliverOpacity {
  /// SliverOpacity SliverOpacity({Key? key, required double opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverOpacity$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required double opacity}
    required double opacity,

    /// param: {bool alwaysIncludeSemantics = false}
    required bool alwaysIncludeSemantics,

    /// param: {Widget? sliver}
    Widget? sliver,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          sliver: sliver,
        ) {}
}

/// class SliverIgnorePointer extends SingleChildRenderObjectWidget
class SliverIgnorePointer$Mate extends SliverIgnorePointer {
  /// SliverIgnorePointer SliverIgnorePointer({Key? key, bool ignoring = true, bool? ignoringSemantics, Widget? sliver})
  SliverIgnorePointer$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool ignoring = true}
    required bool ignoring,

    /// param: {bool? ignoringSemantics}
    bool? ignoringSemantics,

    /// param: {Widget? sliver}
    Widget? sliver,
  }) : super(
          key: key,
          ignoring: ignoring,
          ignoringSemantics: ignoringSemantics,
          sliver: sliver,
        ) {}
}

/// class SliverOffstage extends SingleChildRenderObjectWidget
class SliverOffstage$Mate extends SliverOffstage {
  /// SliverOffstage SliverOffstage({Key? key, bool offstage = true, Widget? sliver})
  SliverOffstage$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool offstage = true}
    required bool offstage,

    /// param: {Widget? sliver}
    Widget? sliver,
  }) : super(
          key: key,
          offstage: offstage,
          sliver: sliver,
        ) {}
}

/// class KeepAlive extends ParentDataWidget<KeepAliveParentDataMixin>
class KeepAlive$Mate extends KeepAlive {
  /// KeepAlive KeepAlive({Key? key, required bool keepAlive, required Widget child})
  KeepAlive$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool keepAlive}
    required bool keepAlive,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          keepAlive: keepAlive,
          child: child,
        ) {}
}
