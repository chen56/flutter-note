// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/form.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'dart:core';

/// class Form extends StatefulWidget
class Form$Mate extends Form with WidgetMate<Form$Mate> {
  /// Form Form({Key? key, required Widget child, Future<bool> Function()? onWillPop, void Function()? onChanged, AutovalidateMode? autovalidateMode})
  Form$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {Future<bool> Function()? onWillPop}
    WillPopCallback? onWillPop,

    /// param: {void Function()? onChanged}
    VoidCallback? onChanged,

    /// param: {AutovalidateMode? autovalidateMode}
    AutovalidateMode? autovalidateMode,
  }) : super(
          key: key,
          child: child,
          onWillPop: onWillPop,
          onChanged: onChanged,
          autovalidateMode: autovalidateMode,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Form$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        onWillPop: p.getValue('onWillPop'),
        onChanged: p.getValue('onChanged'),
        autovalidateMode: p.getValue('autovalidateMode'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'onWillPop', init: onWillPop);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'autovalidateMode', init: autovalidateMode);
  }
}

/// class FormField<T> extends StatefulWidget
class FormField$Mate<T> extends FormField<T> with WidgetMate<FormField$Mate> {
  /// FormField<T> FormField({Key? key, required Widget Function(FormFieldState<T>) builder, void Function(T?)? onSaved, String? Function(T?)? validator, T? initialValue, bool enabled = true, AutovalidateMode? autovalidateMode, String? restorationId})
  FormField$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget Function(FormFieldState<T>) builder}
    required FormFieldBuilder<T> builder,

    /// param: {void Function(T?)? onSaved}
    FormFieldSetter<T>? onSaved,

    /// param: {String? Function(T?)? validator}
    FormFieldValidator<T>? validator,

    /// param: {T? initialValue}
    T? initialValue,

    /// param: {bool enabled = true}
    required bool enabled,

    /// param: {AutovalidateMode? autovalidateMode}
    AutovalidateMode? autovalidateMode,

    /// param: {String? restorationId}
    String? restorationId,
  }) : super(
          key: key,
          builder: builder,
          onSaved: onSaved,
          validator: validator,
          initialValue: initialValue,
          enabled: enabled,
          autovalidateMode: autovalidateMode,
          restorationId: restorationId,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FormField$Mate(
        key: p.getValue('key'),
        builder: p.getValue('builder'),
        onSaved: p.getValue('onSaved'),
        validator: p.getValue('validator'),
        initialValue: p.getValue('initialValue'),
        enabled: p.getValue('enabled'),
        autovalidateMode: p.getValue('autovalidateMode'),
        restorationId: p.getValue('restorationId'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'onSaved', init: onSaved);
    mateParams.set(name: 'validator', init: validator);
    mateParams.set(name: 'initialValue', init: initialValue);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'autovalidateMode', init: autovalidateMode);
    mateParams.set(name: 'restorationId', init: restorationId);
  }
}
