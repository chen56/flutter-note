// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/widget_inspector.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class WidgetInspector extends StatefulWidget
class WidgetInspector$Mate extends WidgetInspector with WidgetMate<WidgetInspector$Mate> {
  /// WidgetInspector WidgetInspector({Key? key, required Widget child, required Widget Function(BuildContext, void Function())? selectButtonBuilder})
  WidgetInspector$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {required Widget Function(BuildContext, void Function())? selectButtonBuilder} , hasDefaultValue:false, defaultValueCode:null
    required InspectorSelectButtonBuilder? selectButtonBuilder,
  }) : super(
          key: key,
          child: child,
          selectButtonBuilder: selectButtonBuilder,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => WidgetInspector$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        selectButtonBuilder: p.getValue('selectButtonBuilder'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'selectButtonBuilder', init: selectButtonBuilder);
  }
}

/// class DevToolsDeepLinkProperty extends DiagnosticsProperty<String>
class DevToolsDeepLinkProperty$Mate extends DevToolsDeepLinkProperty with Mate<DevToolsDeepLinkProperty$Mate> {
  /// DevToolsDeepLinkProperty DevToolsDeepLinkProperty(String description, String url)
  DevToolsDeepLinkProperty$Mate(
    /// requiredParameters: String description
    String description,

    /// requiredParameters: String url
    String url,
  ) : super(
          description,
          url,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DevToolsDeepLinkProperty$Mate(
        p.getValue('description'),
        p.getValue('url'),
      ),
    );
    mateParams.set(name: 'description', init: description);
    mateParams.set(name: 'url', init: url);
  }
}

/// class InspectorSerializationDelegate implements DiagnosticsSerializationDelegate
class InspectorSerializationDelegate$Mate extends InspectorSerializationDelegate
    with Mate<InspectorSerializationDelegate$Mate> {
  /// InspectorSerializationDelegate InspectorSerializationDelegate({String? groupName, bool summaryTree = false, int maxDescendentsTruncatableNode = -1, bool expandPropertyValues = true, int subtreeDepth = 1, bool includeProperties = false, required WidgetInspectorService service, Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)? addAdditionalPropertiesCallback})
  InspectorSerializationDelegate$Mate({
    /// optionalParameters: {String? groupName} , hasDefaultValue:false, defaultValueCode:null
    String? groupName,

    /// optionalParameters: {bool summaryTree = false} , hasDefaultValue:true, defaultValueCode:false
    required bool summaryTree,

    /// optionalParameters: {int maxDescendentsTruncatableNode = -1} , hasDefaultValue:true, defaultValueCode:-1
    required int maxDescendentsTruncatableNode,

    /// optionalParameters: {bool expandPropertyValues = true} , hasDefaultValue:true, defaultValueCode:true
    required bool expandPropertyValues,

    /// optionalParameters: {int subtreeDepth = 1} , hasDefaultValue:true, defaultValueCode:1
    required int subtreeDepth,

    /// optionalParameters: {bool includeProperties = false} , hasDefaultValue:true, defaultValueCode:false
    required bool includeProperties,

    /// optionalParameters: {required WidgetInspectorService service} , hasDefaultValue:false, defaultValueCode:null
    required WidgetInspectorService service,

    /// optionalParameters: {Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)? addAdditionalPropertiesCallback} , hasDefaultValue:false, defaultValueCode:null
    Map<String, Object>? Function(
      DiagnosticsNode,
      InspectorSerializationDelegate,
    )?
        addAdditionalPropertiesCallback,
  }) : super(
          groupName: groupName,
          summaryTree: summaryTree,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
          expandPropertyValues: expandPropertyValues,
          subtreeDepth: subtreeDepth,
          includeProperties: includeProperties,
          service: service,
          addAdditionalPropertiesCallback: addAdditionalPropertiesCallback,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InspectorSerializationDelegate$Mate(
        groupName: p.getValue('groupName'),
        summaryTree: p.getValue('summaryTree'),
        maxDescendentsTruncatableNode: p.getValue('maxDescendentsTruncatableNode'),
        expandPropertyValues: p.getValue('expandPropertyValues'),
        subtreeDepth: p.getValue('subtreeDepth'),
        includeProperties: p.getValue('includeProperties'),
        service: p.getValue('service'),
        addAdditionalPropertiesCallback: p.getValue('addAdditionalPropertiesCallback'),
      ),
    );
    mateParams.set(name: 'groupName', init: groupName);
    mateParams.set(name: 'summaryTree', init: summaryTree);
    mateParams.set(name: 'maxDescendentsTruncatableNode', init: maxDescendentsTruncatableNode);
    mateParams.set(name: 'expandPropertyValues', init: expandPropertyValues);
    mateParams.set(name: 'subtreeDepth', init: subtreeDepth);
    mateParams.set(name: 'includeProperties', init: includeProperties);
    mateParams.set(name: 'service', init: service);
    mateParams.set(name: 'addAdditionalPropertiesCallback', init: addAdditionalPropertiesCallback);
  }
}
