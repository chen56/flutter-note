// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.652431

import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class TapDragDownDetails with Diagnosticable
class TapDragDownDetails$Mate extends TapDragDownDetails {
  /// TapDragDownDetails TapDragDownDetails({required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragDownDetails$Mate({
    /// param: {required Offset globalPosition}
    required Offset globalPosition,

    /// param: {required Offset localPosition}
    required Offset localPosition,

    /// param: {PointerDeviceKind? kind}
    PointerDeviceKind? kind,

    /// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,

    /// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {}
}

/// class TapDragUpDetails with Diagnosticable
class TapDragUpDetails$Mate extends TapDragUpDetails {
  /// TapDragUpDetails TapDragUpDetails({required PointerDeviceKind kind, required Offset globalPosition, required Offset localPosition, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragUpDetails$Mate({
    /// param: {required PointerDeviceKind kind}
    required PointerDeviceKind kind,

    /// param: {required Offset globalPosition}
    required Offset globalPosition,

    /// param: {required Offset localPosition}
    required Offset localPosition,

    /// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,

    /// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          kind: kind,
          globalPosition: globalPosition,
          localPosition: localPosition,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {}
}

/// class TapDragStartDetails with Diagnosticable
class TapDragStartDetails$Mate extends TapDragStartDetails {
  /// TapDragStartDetails TapDragStartDetails({Duration? sourceTimeStamp, required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragStartDetails$Mate({
    /// param: {Duration? sourceTimeStamp}
    Duration? sourceTimeStamp,

    /// param: {required Offset globalPosition}
    required Offset globalPosition,

    /// param: {required Offset localPosition}
    required Offset localPosition,

    /// param: {PointerDeviceKind? kind}
    PointerDeviceKind? kind,

    /// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,

    /// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {}
}

/// class TapDragUpdateDetails with Diagnosticable
class TapDragUpdateDetails$Mate extends TapDragUpdateDetails {
  /// TapDragUpdateDetails TapDragUpdateDetails({Duration? sourceTimeStamp, Offset delta = Offset.zero, double? primaryDelta, required Offset globalPosition, PointerDeviceKind? kind, required Offset localPosition, required Offset offsetFromOrigin, required Offset localOffsetFromOrigin, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragUpdateDetails$Mate({
    /// param: {Duration? sourceTimeStamp}
    Duration? sourceTimeStamp,

    /// param: {Offset delta = Offset.zero}
    required Offset delta,

    /// param: {double? primaryDelta}
    double? primaryDelta,

    /// param: {required Offset globalPosition}
    required Offset globalPosition,

    /// param: {PointerDeviceKind? kind}
    PointerDeviceKind? kind,

    /// param: {required Offset localPosition}
    required Offset localPosition,

    /// param: {required Offset offsetFromOrigin}
    required Offset offsetFromOrigin,

    /// param: {required Offset localOffsetFromOrigin}
    required Offset localOffsetFromOrigin,

    /// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,

    /// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          delta: delta,
          primaryDelta: primaryDelta,
          globalPosition: globalPosition,
          kind: kind,
          localPosition: localPosition,
          offsetFromOrigin: offsetFromOrigin,
          localOffsetFromOrigin: localOffsetFromOrigin,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {}
}

/// class TapDragEndDetails with Diagnosticable
class TapDragEndDetails$Mate extends TapDragEndDetails {
  /// TapDragEndDetails TapDragEndDetails({Velocity velocity = Velocity.zero, double? primaryVelocity, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragEndDetails$Mate({
    /// param: {Velocity velocity = Velocity.zero}
    required Velocity velocity,

    /// param: {double? primaryVelocity}
    double? primaryVelocity,

    /// param: {required int consecutiveTapCount}
    required int consecutiveTapCount,

    /// param: {required Set<LogicalKeyboardKey> keysPressedOnDown}
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          velocity: velocity,
          primaryVelocity: primaryVelocity,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {}
}

/// class TapAndDragGestureRecognizer extends OneSequenceGestureRecognizer with _TapStatusTrackerMixin
class TapAndDragGestureRecognizer$Mate extends TapAndDragGestureRecognizer {
  /// TapAndDragGestureRecognizer TapAndDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  TapAndDragGestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}
