// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/magnifier.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/animation/animation_controller.dart';
import 'package:flutter/src/painting/box_shadow.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class MagnifierInfo
class MagnifierInfo$Mate extends MagnifierInfo with Mate<MagnifierInfo$Mate> {
  /// MagnifierInfo MagnifierInfo({required Offset globalGesturePosition, required Rect caretRect, required Rect fieldBounds, required Rect currentLineBoundaries})
  MagnifierInfo$Mate({
    /// param: {required Offset globalGesturePosition}
    required Offset globalGesturePosition,

    /// param: {required Rect caretRect}
    required Rect caretRect,

    /// param: {required Rect fieldBounds}
    required Rect fieldBounds,

    /// param: {required Rect currentLineBoundaries}
    required Rect currentLineBoundaries,
  }) : super(
          globalGesturePosition: globalGesturePosition,
          caretRect: caretRect,
          fieldBounds: fieldBounds,
          currentLineBoundaries: currentLineBoundaries,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MagnifierInfo$Mate(
        globalGesturePosition: p.getValue('globalGesturePosition'),
        caretRect: p.getValue('caretRect'),
        fieldBounds: p.getValue('fieldBounds'),
        currentLineBoundaries: p.getValue('currentLineBoundaries'),
      ),
    );
    mateParams.set(name: 'globalGesturePosition', init: globalGesturePosition);
    mateParams.set(name: 'caretRect', init: caretRect);
    mateParams.set(name: 'fieldBounds', init: fieldBounds);
    mateParams.set(name: 'currentLineBoundaries', init: currentLineBoundaries);
  }
}

/// class TextMagnifierConfiguration
class TextMagnifierConfiguration$Mate extends TextMagnifierConfiguration with Mate<TextMagnifierConfiguration$Mate> {
  /// TextMagnifierConfiguration TextMagnifierConfiguration({Widget? Function(BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)? magnifierBuilder, bool shouldDisplayHandlesInMagnifier = true})
  TextMagnifierConfiguration$Mate({
    /// param: {Widget? Function(BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)? magnifierBuilder}
    MagnifierBuilder? magnifierBuilder,

    /// param: {bool shouldDisplayHandlesInMagnifier = true}
    required bool shouldDisplayHandlesInMagnifier,
  }) : super(
          magnifierBuilder: magnifierBuilder,
          shouldDisplayHandlesInMagnifier: shouldDisplayHandlesInMagnifier,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextMagnifierConfiguration$Mate(
        magnifierBuilder: p.getValue('magnifierBuilder'),
        shouldDisplayHandlesInMagnifier: p.getValue('shouldDisplayHandlesInMagnifier'),
      ),
    );
    mateParams.set(name: 'magnifierBuilder', init: magnifierBuilder);
    mateParams.set(name: 'shouldDisplayHandlesInMagnifier', init: shouldDisplayHandlesInMagnifier);
  }
}

/// class MagnifierController
class MagnifierController$Mate extends MagnifierController with Mate<MagnifierController$Mate> {
  /// MagnifierController MagnifierController({AnimationController? animationController})
  MagnifierController$Mate(
      {
      /// param: {AnimationController? animationController}
      AnimationController? animationController})
      : super(animationController: animationController) {
    mateParams = Params(
      init: this,
      builder: (p) => MagnifierController$Mate(animationController: p.getValue('animationController')),
    );
    mateParams.set(name: 'animationController', init: animationController);
  }
}

/// class MagnifierDecoration extends ShapeDecoration
class MagnifierDecoration$Mate extends MagnifierDecoration with Mate<MagnifierDecoration$Mate> {
  /// MagnifierDecoration MagnifierDecoration({double opacity = 1, List<BoxShadow>? shadows, ShapeBorder shape = const RoundedRectangleBorder()})
  MagnifierDecoration$Mate({
    /// param: {double opacity = 1}
    required double opacity,

    /// param: {List<BoxShadow>? shadows}
    List<BoxShadow>? shadows,

    /// param: {ShapeBorder shape = const RoundedRectangleBorder()}
    required ShapeBorder shape,
  }) : super(
          opacity: opacity,
          shadows: shadows,
          shape: shape,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MagnifierDecoration$Mate(
        opacity: p.getValue('opacity'),
        shadows: p.getValue('shadows'),
        shape: p.getValue('shape'),
      ),
    );
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'shadows', init: shadows);
    mateParams.set(name: 'shape', init: shape);
  }
}

/// class RawMagnifier extends StatelessWidget
class RawMagnifier$Mate extends RawMagnifier with WidgetMate<RawMagnifier$Mate> {
  /// RawMagnifier RawMagnifier({Key? key, Widget? child, MagnifierDecoration decoration = const MagnifierDecoration(), Offset focalPointOffset = Offset.zero, double magnificationScale = 1, required Size size})
  RawMagnifier$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,

    /// param: {MagnifierDecoration decoration = const MagnifierDecoration()}
    required MagnifierDecoration decoration,

    /// param: {Offset focalPointOffset = Offset.zero}
    required Offset focalPointOffset,

    /// param: {double magnificationScale = 1}
    required double magnificationScale,

    /// param: {required Size size}
    required Size size,
  }) : super(
          key: key,
          child: child,
          decoration: decoration,
          focalPointOffset: focalPointOffset,
          magnificationScale: magnificationScale,
          size: size,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RawMagnifier$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        decoration: p.getValue('decoration'),
        focalPointOffset: p.getValue('focalPointOffset'),
        magnificationScale: p.getValue('magnificationScale'),
        size: p.getValue('size'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'focalPointOffset', init: focalPointOffset);
    mateParams.set(name: 'magnificationScale', init: magnificationScale);
    mateParams.set(name: 'size', init: size);
  }
}
