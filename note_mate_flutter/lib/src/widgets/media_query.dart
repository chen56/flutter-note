// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/media_query.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/gesture_settings.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class MediaQueryData
class MediaQueryData$Mate extends MediaQueryData with Mate<MediaQueryData$Mate> {
  /// MediaQueryData MediaQueryData({Size size = Size.zero, double devicePixelRatio = 1.0, double textScaleFactor = 1.0, Brightness platformBrightness = Brightness.light, EdgeInsets padding = EdgeInsets.zero, EdgeInsets viewInsets = EdgeInsets.zero, EdgeInsets systemGestureInsets = EdgeInsets.zero, EdgeInsets viewPadding = EdgeInsets.zero, bool alwaysUse24HourFormat = false, bool accessibleNavigation = false, bool invertColors = false, bool highContrast = false, bool disableAnimations = false, bool boldText = false, NavigationMode navigationMode = NavigationMode.traditional, DeviceGestureSettings gestureSettings = const DeviceGestureSettings(touchSlop: kTouchSlop), List<DisplayFeature> displayFeatures = const <ui.DisplayFeature>[]})
  MediaQueryData$Mate({
    /// optionalParameters: {Size size = Size.zero} , hasDefaultValue:true, defaultValueCode:Size.zero
    required Size size,

    /// optionalParameters: {double devicePixelRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double devicePixelRatio,

    /// optionalParameters: {double textScaleFactor = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double textScaleFactor,

    /// optionalParameters: {Brightness platformBrightness = Brightness.light} , hasDefaultValue:true, defaultValueCode:Brightness.light
    required Brightness platformBrightness,

    /// optionalParameters: {EdgeInsets padding = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets padding,

    /// optionalParameters: {EdgeInsets viewInsets = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets viewInsets,

    /// optionalParameters: {EdgeInsets systemGestureInsets = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets systemGestureInsets,

    /// optionalParameters: {EdgeInsets viewPadding = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets viewPadding,

    /// optionalParameters: {bool alwaysUse24HourFormat = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alwaysUse24HourFormat,

    /// optionalParameters: {bool accessibleNavigation = false} , hasDefaultValue:true, defaultValueCode:false
    required bool accessibleNavigation,

    /// optionalParameters: {bool invertColors = false} , hasDefaultValue:true, defaultValueCode:false
    required bool invertColors,

    /// optionalParameters: {bool highContrast = false} , hasDefaultValue:true, defaultValueCode:false
    required bool highContrast,

    /// optionalParameters: {bool disableAnimations = false} , hasDefaultValue:true, defaultValueCode:false
    required bool disableAnimations,

    /// optionalParameters: {bool boldText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool boldText,

    /// optionalParameters: {NavigationMode navigationMode = NavigationMode.traditional} , hasDefaultValue:true, defaultValueCode:NavigationMode.traditional
    required NavigationMode navigationMode,

    /// optionalParameters: {DeviceGestureSettings gestureSettings = const DeviceGestureSettings(touchSlop: kTouchSlop)} , hasDefaultValue:true, defaultValueCode:const DeviceGestureSettings(touchSlop: kTouchSlop)
    required DeviceGestureSettings gestureSettings,

    /// optionalParameters: {List<DisplayFeature> displayFeatures = const <ui.DisplayFeature>[]} , hasDefaultValue:true, defaultValueCode:const <ui.DisplayFeature>[]
    required List<DisplayFeature> displayFeatures,
  }) : super(
          size: size,
          devicePixelRatio: devicePixelRatio,
          textScaleFactor: textScaleFactor,
          platformBrightness: platformBrightness,
          padding: padding,
          viewInsets: viewInsets,
          systemGestureInsets: systemGestureInsets,
          viewPadding: viewPadding,
          alwaysUse24HourFormat: alwaysUse24HourFormat,
          accessibleNavigation: accessibleNavigation,
          invertColors: invertColors,
          highContrast: highContrast,
          disableAnimations: disableAnimations,
          boldText: boldText,
          navigationMode: navigationMode,
          gestureSettings: gestureSettings,
          displayFeatures: displayFeatures,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MediaQueryData$Mate(
        size: p.getValue('size'),
        devicePixelRatio: p.getValue('devicePixelRatio'),
        textScaleFactor: p.getValue('textScaleFactor'),
        platformBrightness: p.getValue('platformBrightness'),
        padding: p.getValue('padding'),
        viewInsets: p.getValue('viewInsets'),
        systemGestureInsets: p.getValue('systemGestureInsets'),
        viewPadding: p.getValue('viewPadding'),
        alwaysUse24HourFormat: p.getValue('alwaysUse24HourFormat'),
        accessibleNavigation: p.getValue('accessibleNavigation'),
        invertColors: p.getValue('invertColors'),
        highContrast: p.getValue('highContrast'),
        disableAnimations: p.getValue('disableAnimations'),
        boldText: p.getValue('boldText'),
        navigationMode: p.getValue('navigationMode'),
        gestureSettings: p.getValue('gestureSettings'),
        displayFeatures: p.getValue('displayFeatures'),
      ),
    );
    mateParams.set(name: 'size', init: size);
    mateParams.set(name: 'devicePixelRatio', init: devicePixelRatio);
    mateParams.set(name: 'textScaleFactor', init: textScaleFactor);
    mateParams.set(name: 'platformBrightness', init: platformBrightness);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'viewInsets', init: viewInsets);
    mateParams.set(name: 'systemGestureInsets', init: systemGestureInsets);
    mateParams.set(name: 'viewPadding', init: viewPadding);
    mateParams.set(name: 'alwaysUse24HourFormat', init: alwaysUse24HourFormat);
    mateParams.set(name: 'accessibleNavigation', init: accessibleNavigation);
    mateParams.set(name: 'invertColors', init: invertColors);
    mateParams.set(name: 'highContrast', init: highContrast);
    mateParams.set(name: 'disableAnimations', init: disableAnimations);
    mateParams.set(name: 'boldText', init: boldText);
    mateParams.set(name: 'navigationMode', init: navigationMode);
    mateParams.set(name: 'gestureSettings', init: gestureSettings);
    mateParams.set(name: 'displayFeatures', init: displayFeatures);
  }

  /// MediaQueryData MediaQueryData.fromView(FlutterView view, {MediaQueryData? platformData})
  MediaQueryData$Mate.fromView(
    /// requiredParameters: FlutterView view
    FlutterView view, {
    /// optionalParameters: {MediaQueryData? platformData} , hasDefaultValue:false, defaultValueCode:null
    MediaQueryData? platformData,
  }) : super.fromView(
          view,
          platformData: platformData,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MediaQueryData$Mate.fromView(
        p.getValue('view'),
        platformData: p.getValue('platformData'),
      ),
    );
    mateParams.set(name: 'view', init: view);
    mateParams.set(name: 'platformData', init: platformData);
  }
}

/// class MediaQuery extends InheritedModel<_MediaQueryAspect>
class MediaQuery$Mate extends MediaQuery with WidgetMate<MediaQuery$Mate> {
  /// MediaQuery MediaQuery({Key? key, required MediaQueryData data, required Widget child})
  MediaQuery$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required MediaQueryData data} , hasDefaultValue:false, defaultValueCode:null
    required MediaQueryData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MediaQuery$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
