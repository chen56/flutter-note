// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/keyboard_listener.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class KeyboardListener extends StatelessWidget
class KeyboardListener$Mate extends KeyboardListener with WidgetMate<KeyboardListener$Mate> {
  /// KeyboardListener KeyboardListener({Key? key, required FocusNode focusNode, bool autofocus = false, bool includeSemantics = true, void Function(KeyEvent)? onKeyEvent, required Widget child})
  KeyboardListener$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required FocusNode focusNode} , hasDefaultValue:false, defaultValueCode:null
    required FocusNode focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {bool includeSemantics = true} , hasDefaultValue:true, defaultValueCode:true
    required bool includeSemantics,

    /// optionalParameters: {void Function(KeyEvent)? onKeyEvent} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<KeyEvent>? onKeyEvent,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          focusNode: focusNode,
          autofocus: autofocus,
          includeSemantics: includeSemantics,
          onKeyEvent: onKeyEvent,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeyboardListener$Mate(
        key: p.getValue('key'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        includeSemantics: p.getValue('includeSemantics'),
        onKeyEvent: p.getValue('onKeyEvent'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'includeSemantics', init: includeSemantics);
    mateParams.set(name: 'onKeyEvent', init: onKeyEvent);
    mateParams.set(name: 'child', init: child);
  }
}
