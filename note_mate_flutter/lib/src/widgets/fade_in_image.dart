// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/fade_in_image.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:core';
import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'package:note/mate.dart';
import 'dart:typed_data';
import 'package:flutter/src/services/asset_bundle.dart';

/// class FadeInImage extends StatefulWidget
class FadeInImage$Mate extends FadeInImage with WidgetMate<FadeInImage$Mate> {
  /// FadeInImage FadeInImage({Key? key, required ImageProvider<Object> placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required ImageProvider<Object> image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false})
  FadeInImage$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ImageProvider<Object> placeholder} , hasDefaultValue:false, defaultValueCode:null
    required ImageProvider<Object> placeholder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// optionalParameters: {required ImageProvider<Object> image} , hasDefaultValue:false, defaultValueCode:null
    required ImageProvider<Object> image,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {String? imageSemanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? imageSemanticLabel,

    /// optionalParameters: {Duration fadeOutDuration = const Duration(milliseconds: 300)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 300)
    required Duration fadeOutDuration,

    /// optionalParameters: {Curve fadeOutCurve = Curves.easeOut} , hasDefaultValue:true, defaultValueCode:Curves.easeOut
    required Curve fadeOutCurve,

    /// optionalParameters: {Duration fadeInDuration = const Duration(milliseconds: 700)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 700)
    required Duration fadeInDuration,

    /// optionalParameters: {Curve fadeInCurve = Curves.easeIn} , hasDefaultValue:true, defaultValueCode:Curves.easeIn
    required Curve fadeInCurve,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {BoxFit? placeholderFit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? placeholderFit,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {FilterQuality? placeholderFilterQuality} , hasDefaultValue:false, defaultValueCode:null
    FilterQuality? placeholderFilterQuality,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,
  }) : super(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FadeInImage$Mate(
        key: p.getValue('key'),
        placeholder: p.getValue('placeholder'),
        placeholderErrorBuilder: p.getValue('placeholderErrorBuilder'),
        image: p.getValue('image'),
        imageErrorBuilder: p.getValue('imageErrorBuilder'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        imageSemanticLabel: p.getValue('imageSemanticLabel'),
        fadeOutDuration: p.getValue('fadeOutDuration'),
        fadeOutCurve: p.getValue('fadeOutCurve'),
        fadeInDuration: p.getValue('fadeInDuration'),
        fadeInCurve: p.getValue('fadeInCurve'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        fit: p.getValue('fit'),
        placeholderFit: p.getValue('placeholderFit'),
        filterQuality: p.getValue('filterQuality'),
        placeholderFilterQuality: p.getValue('placeholderFilterQuality'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        matchTextDirection: p.getValue('matchTextDirection'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'placeholder', init: placeholder);
    mateParams.set(name: 'placeholderErrorBuilder', init: placeholderErrorBuilder);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'imageErrorBuilder', init: imageErrorBuilder);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'imageSemanticLabel', init: imageSemanticLabel);
    mateParams.set(name: 'fadeOutDuration', init: fadeOutDuration);
    mateParams.set(name: 'fadeOutCurve', init: fadeOutCurve);
    mateParams.set(name: 'fadeInDuration', init: fadeInDuration);
    mateParams.set(name: 'fadeInCurve', init: fadeInCurve);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'placeholderFit', init: placeholderFit);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'placeholderFilterQuality', init: placeholderFilterQuality);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
  }

  /// FadeInImage FadeInImage.memoryNetwork({Key? key, required Uint8List placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required String image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, double placeholderScale = 1.0, double imageScale = 1.0, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, int? placeholderCacheWidth, int? placeholderCacheHeight, int? imageCacheWidth, int? imageCacheHeight})
  FadeInImage$Mate.memoryNetwork({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Uint8List placeholder} , hasDefaultValue:false, defaultValueCode:null
    required Uint8List placeholder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// optionalParameters: {required String image} , hasDefaultValue:false, defaultValueCode:null
    required String image,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// optionalParameters: {double placeholderScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double placeholderScale,

    /// optionalParameters: {double imageScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double imageScale,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {String? imageSemanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? imageSemanticLabel,

    /// optionalParameters: {Duration fadeOutDuration = const Duration(milliseconds: 300)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 300)
    required Duration fadeOutDuration,

    /// optionalParameters: {Curve fadeOutCurve = Curves.easeOut} , hasDefaultValue:true, defaultValueCode:Curves.easeOut
    required Curve fadeOutCurve,

    /// optionalParameters: {Duration fadeInDuration = const Duration(milliseconds: 700)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 700)
    required Duration fadeInDuration,

    /// optionalParameters: {Curve fadeInCurve = Curves.easeIn} , hasDefaultValue:true, defaultValueCode:Curves.easeIn
    required Curve fadeInCurve,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {BoxFit? placeholderFit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? placeholderFit,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {FilterQuality? placeholderFilterQuality} , hasDefaultValue:false, defaultValueCode:null
    FilterQuality? placeholderFilterQuality,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {int? placeholderCacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? placeholderCacheWidth,

    /// optionalParameters: {int? placeholderCacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? placeholderCacheHeight,

    /// optionalParameters: {int? imageCacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? imageCacheWidth,

    /// optionalParameters: {int? imageCacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? imageCacheHeight,
  }) : super.memoryNetwork(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          placeholderScale: placeholderScale,
          imageScale: imageScale,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          placeholderCacheWidth: placeholderCacheWidth,
          placeholderCacheHeight: placeholderCacheHeight,
          imageCacheWidth: imageCacheWidth,
          imageCacheHeight: imageCacheHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FadeInImage$Mate.memoryNetwork(
        key: p.getValue('key'),
        placeholder: p.getValue('placeholder'),
        placeholderErrorBuilder: p.getValue('placeholderErrorBuilder'),
        image: p.getValue('image'),
        imageErrorBuilder: p.getValue('imageErrorBuilder'),
        placeholderScale: p.getValue('placeholderScale'),
        imageScale: p.getValue('imageScale'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        imageSemanticLabel: p.getValue('imageSemanticLabel'),
        fadeOutDuration: p.getValue('fadeOutDuration'),
        fadeOutCurve: p.getValue('fadeOutCurve'),
        fadeInDuration: p.getValue('fadeInDuration'),
        fadeInCurve: p.getValue('fadeInCurve'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        fit: p.getValue('fit'),
        placeholderFit: p.getValue('placeholderFit'),
        filterQuality: p.getValue('filterQuality'),
        placeholderFilterQuality: p.getValue('placeholderFilterQuality'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        matchTextDirection: p.getValue('matchTextDirection'),
        placeholderCacheWidth: p.getValue('placeholderCacheWidth'),
        placeholderCacheHeight: p.getValue('placeholderCacheHeight'),
        imageCacheWidth: p.getValue('imageCacheWidth'),
        imageCacheHeight: p.getValue('imageCacheHeight'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'placeholder', init: placeholder);
    mateParams.set(name: 'placeholderErrorBuilder', init: placeholderErrorBuilder);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'imageErrorBuilder', init: imageErrorBuilder);
    mateParams.set(name: 'placeholderScale', init: placeholderScale);
    mateParams.set(name: 'imageScale', init: imageScale);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'imageSemanticLabel', init: imageSemanticLabel);
    mateParams.set(name: 'fadeOutDuration', init: fadeOutDuration);
    mateParams.set(name: 'fadeOutCurve', init: fadeOutCurve);
    mateParams.set(name: 'fadeInDuration', init: fadeInDuration);
    mateParams.set(name: 'fadeInCurve', init: fadeInCurve);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'placeholderFit', init: placeholderFit);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'placeholderFilterQuality', init: placeholderFilterQuality);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'placeholderCacheWidth', init: placeholderCacheWidth);
    mateParams.set(name: 'placeholderCacheHeight', init: placeholderCacheHeight);
    mateParams.set(name: 'imageCacheWidth', init: imageCacheWidth);
    mateParams.set(name: 'imageCacheHeight', init: imageCacheHeight);
  }

  /// FadeInImage FadeInImage.assetNetwork({Key? key, required String placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required String image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, AssetBundle? bundle, double? placeholderScale, double imageScale = 1.0, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, int? placeholderCacheWidth, int? placeholderCacheHeight, int? imageCacheWidth, int? imageCacheHeight})
  FadeInImage$Mate.assetNetwork({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required String placeholder} , hasDefaultValue:false, defaultValueCode:null
    required String placeholder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// optionalParameters: {required String image} , hasDefaultValue:false, defaultValueCode:null
    required String image,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// optionalParameters: {AssetBundle? bundle} , hasDefaultValue:false, defaultValueCode:null
    AssetBundle? bundle,

    /// optionalParameters: {double? placeholderScale} , hasDefaultValue:false, defaultValueCode:null
    double? placeholderScale,

    /// optionalParameters: {double imageScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double imageScale,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {String? imageSemanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? imageSemanticLabel,

    /// optionalParameters: {Duration fadeOutDuration = const Duration(milliseconds: 300)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 300)
    required Duration fadeOutDuration,

    /// optionalParameters: {Curve fadeOutCurve = Curves.easeOut} , hasDefaultValue:true, defaultValueCode:Curves.easeOut
    required Curve fadeOutCurve,

    /// optionalParameters: {Duration fadeInDuration = const Duration(milliseconds: 700)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 700)
    required Duration fadeInDuration,

    /// optionalParameters: {Curve fadeInCurve = Curves.easeIn} , hasDefaultValue:true, defaultValueCode:Curves.easeIn
    required Curve fadeInCurve,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {BoxFit? placeholderFit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? placeholderFit,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {FilterQuality? placeholderFilterQuality} , hasDefaultValue:false, defaultValueCode:null
    FilterQuality? placeholderFilterQuality,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {int? placeholderCacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? placeholderCacheWidth,

    /// optionalParameters: {int? placeholderCacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? placeholderCacheHeight,

    /// optionalParameters: {int? imageCacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? imageCacheWidth,

    /// optionalParameters: {int? imageCacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? imageCacheHeight,
  }) : super.assetNetwork(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          bundle: bundle,
          placeholderScale: placeholderScale,
          imageScale: imageScale,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          placeholderCacheWidth: placeholderCacheWidth,
          placeholderCacheHeight: placeholderCacheHeight,
          imageCacheWidth: imageCacheWidth,
          imageCacheHeight: imageCacheHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FadeInImage$Mate.assetNetwork(
        key: p.getValue('key'),
        placeholder: p.getValue('placeholder'),
        placeholderErrorBuilder: p.getValue('placeholderErrorBuilder'),
        image: p.getValue('image'),
        imageErrorBuilder: p.getValue('imageErrorBuilder'),
        bundle: p.getValue('bundle'),
        placeholderScale: p.getValue('placeholderScale'),
        imageScale: p.getValue('imageScale'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        imageSemanticLabel: p.getValue('imageSemanticLabel'),
        fadeOutDuration: p.getValue('fadeOutDuration'),
        fadeOutCurve: p.getValue('fadeOutCurve'),
        fadeInDuration: p.getValue('fadeInDuration'),
        fadeInCurve: p.getValue('fadeInCurve'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        fit: p.getValue('fit'),
        placeholderFit: p.getValue('placeholderFit'),
        filterQuality: p.getValue('filterQuality'),
        placeholderFilterQuality: p.getValue('placeholderFilterQuality'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        matchTextDirection: p.getValue('matchTextDirection'),
        placeholderCacheWidth: p.getValue('placeholderCacheWidth'),
        placeholderCacheHeight: p.getValue('placeholderCacheHeight'),
        imageCacheWidth: p.getValue('imageCacheWidth'),
        imageCacheHeight: p.getValue('imageCacheHeight'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'placeholder', init: placeholder);
    mateParams.set(name: 'placeholderErrorBuilder', init: placeholderErrorBuilder);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'imageErrorBuilder', init: imageErrorBuilder);
    mateParams.set(name: 'bundle', init: bundle);
    mateParams.set(name: 'placeholderScale', init: placeholderScale);
    mateParams.set(name: 'imageScale', init: imageScale);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'imageSemanticLabel', init: imageSemanticLabel);
    mateParams.set(name: 'fadeOutDuration', init: fadeOutDuration);
    mateParams.set(name: 'fadeOutCurve', init: fadeOutCurve);
    mateParams.set(name: 'fadeInDuration', init: fadeInDuration);
    mateParams.set(name: 'fadeInCurve', init: fadeInCurve);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'placeholderFit', init: placeholderFit);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'placeholderFilterQuality', init: placeholderFilterQuality);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'placeholderCacheWidth', init: placeholderCacheWidth);
    mateParams.set(name: 'placeholderCacheHeight', init: placeholderCacheHeight);
    mateParams.set(name: 'imageCacheWidth', init: imageCacheWidth);
    mateParams.set(name: 'imageCacheHeight', init: imageCacheHeight);
  }
}
