// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/safe_area.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class SafeArea extends StatelessWidget
class SafeArea$Mate extends SafeArea with WidgetMate<SafeArea$Mate> {
  /// SafeArea SafeArea({Key? key, bool left = true, bool top = true, bool right = true, bool bottom = true, EdgeInsets minimum = EdgeInsets.zero, bool maintainBottomViewPadding = false, required Widget child})
  SafeArea$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool left = true}
    required bool left,

    /// param: {bool top = true}
    required bool top,

    /// param: {bool right = true}
    required bool right,

    /// param: {bool bottom = true}
    required bool bottom,

    /// param: {EdgeInsets minimum = EdgeInsets.zero}
    required EdgeInsets minimum,

    /// param: {bool maintainBottomViewPadding = false}
    required bool maintainBottomViewPadding,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          minimum: minimum,
          maintainBottomViewPadding: maintainBottomViewPadding,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SafeArea$Mate(
        key: p.getValue('key'),
        left: p.getValue('left'),
        top: p.getValue('top'),
        right: p.getValue('right'),
        bottom: p.getValue('bottom'),
        minimum: p.getValue('minimum'),
        maintainBottomViewPadding: p.getValue('maintainBottomViewPadding'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'left', init: left);
    mateParams.set(name: 'top', init: top);
    mateParams.set(name: 'right', init: right);
    mateParams.set(name: 'bottom', init: bottom);
    mateParams.set(name: 'minimum', init: minimum);
    mateParams.set(name: 'maintainBottomViewPadding', init: maintainBottomViewPadding);
    mateParams.set(name: 'child', init: child);
  }
}

/// class SliverSafeArea extends StatelessWidget
class SliverSafeArea$Mate extends SliverSafeArea with WidgetMate<SliverSafeArea$Mate> {
  /// SliverSafeArea SliverSafeArea({Key? key, bool left = true, bool top = true, bool right = true, bool bottom = true, EdgeInsets minimum = EdgeInsets.zero, required Widget sliver})
  SliverSafeArea$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {bool left = true}
    required bool left,

    /// param: {bool top = true}
    required bool top,

    /// param: {bool right = true}
    required bool right,

    /// param: {bool bottom = true}
    required bool bottom,

    /// param: {EdgeInsets minimum = EdgeInsets.zero}
    required EdgeInsets minimum,

    /// param: {required Widget sliver}
    required Widget sliver,
  }) : super(
          key: key,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          minimum: minimum,
          sliver: sliver,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverSafeArea$Mate(
        key: p.getValue('key'),
        left: p.getValue('left'),
        top: p.getValue('top'),
        right: p.getValue('right'),
        bottom: p.getValue('bottom'),
        minimum: p.getValue('minimum'),
        sliver: p.getValue('sliver'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'left', init: left);
    mateParams.set(name: 'top', init: top);
    mateParams.set(name: 'right', init: right);
    mateParams.set(name: 'bottom', init: bottom);
    mateParams.set(name: 'minimum', init: minimum);
    mateParams.set(name: 'sliver', init: sliver);
  }
}
