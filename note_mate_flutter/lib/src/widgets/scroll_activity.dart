// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/drag_details.dart';
import 'dart:core';
import 'package:flutter/src/physics/simulation.dart';
import 'package:flutter/src/scheduler/ticker.dart';
import 'package:flutter/src/animation/curves.dart';

/// class IdleScrollActivity extends ScrollActivity
class IdleScrollActivity$Mate extends IdleScrollActivity with Mate<IdleScrollActivity$Mate> {
  /// IdleScrollActivity IdleScrollActivity(ScrollActivityDelegate delegate)
  IdleScrollActivity$Mate(

      /// requiredParameters: ScrollActivityDelegate delegate
      ScrollActivityDelegate delegate)
      : super(delegate) {
    mateParams = Params(
      init: this,
      builder: (p) => IdleScrollActivity$Mate(p.getValue('delegate')),
    );
    mateParams.set(name: 'delegate', init: delegate);
  }
}

/// class HoldScrollActivity extends ScrollActivity implements ScrollHoldController
class HoldScrollActivity$Mate extends HoldScrollActivity with Mate<HoldScrollActivity$Mate> {
  /// HoldScrollActivity HoldScrollActivity({required ScrollActivityDelegate delegate, void Function()? onHoldCanceled})
  HoldScrollActivity$Mate({
    /// optionalParameters: {required ScrollActivityDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
    required ScrollActivityDelegate delegate,

    /// optionalParameters: {void Function()? onHoldCanceled} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onHoldCanceled,
  }) : super(
          delegate: delegate,
          onHoldCanceled: onHoldCanceled,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => HoldScrollActivity$Mate(
        delegate: p.getValue('delegate'),
        onHoldCanceled: p.getValue('onHoldCanceled'),
      ),
    );
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'onHoldCanceled', init: onHoldCanceled);
  }
}

/// class ScrollDragController implements Drag
class ScrollDragController$Mate extends ScrollDragController with Mate<ScrollDragController$Mate> {
  /// ScrollDragController ScrollDragController({required ScrollActivityDelegate delegate, required DragStartDetails details, void Function()? onDragCanceled, double? carriedVelocity, double? motionStartDistanceThreshold})
  ScrollDragController$Mate({
    /// optionalParameters: {required ScrollActivityDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
    required ScrollActivityDelegate delegate,

    /// optionalParameters: {required DragStartDetails details} , hasDefaultValue:false, defaultValueCode:null
    required DragStartDetails details,

    /// optionalParameters: {void Function()? onDragCanceled} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onDragCanceled,

    /// optionalParameters: {double? carriedVelocity} , hasDefaultValue:false, defaultValueCode:null
    double? carriedVelocity,

    /// optionalParameters: {double? motionStartDistanceThreshold} , hasDefaultValue:false, defaultValueCode:null
    double? motionStartDistanceThreshold,
  }) : super(
          delegate: delegate,
          details: details,
          onDragCanceled: onDragCanceled,
          carriedVelocity: carriedVelocity,
          motionStartDistanceThreshold: motionStartDistanceThreshold,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollDragController$Mate(
        delegate: p.getValue('delegate'),
        details: p.getValue('details'),
        onDragCanceled: p.getValue('onDragCanceled'),
        carriedVelocity: p.getValue('carriedVelocity'),
        motionStartDistanceThreshold: p.getValue('motionStartDistanceThreshold'),
      ),
    );
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'details', init: details);
    mateParams.set(name: 'onDragCanceled', init: onDragCanceled);
    mateParams.set(name: 'carriedVelocity', init: carriedVelocity);
    mateParams.set(name: 'motionStartDistanceThreshold', init: motionStartDistanceThreshold);
  }
}

/// class DragScrollActivity extends ScrollActivity
class DragScrollActivity$Mate extends DragScrollActivity with Mate<DragScrollActivity$Mate> {
  /// DragScrollActivity DragScrollActivity(ScrollActivityDelegate delegate, ScrollDragController controller)
  DragScrollActivity$Mate(
    /// requiredParameters: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate,

    /// requiredParameters: ScrollDragController controller
    ScrollDragController controller,
  ) : super(
          delegate,
          controller,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DragScrollActivity$Mate(
        p.getValue('delegate'),
        p.getValue('controller'),
      ),
    );
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'controller', init: controller);
  }
}

/// class BallisticScrollActivity extends ScrollActivity
class BallisticScrollActivity$Mate extends BallisticScrollActivity with Mate<BallisticScrollActivity$Mate> {
  /// BallisticScrollActivity BallisticScrollActivity(ScrollActivityDelegate delegate, Simulation simulation, TickerProvider vsync, bool shouldIgnorePointer)
  BallisticScrollActivity$Mate(
    /// requiredParameters: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate,

    /// requiredParameters: Simulation simulation
    Simulation simulation,

    /// requiredParameters: TickerProvider vsync
    TickerProvider vsync,

    /// requiredParameters: bool shouldIgnorePointer
    bool shouldIgnorePointer,
  ) : super(
          delegate,
          simulation,
          vsync,
          shouldIgnorePointer,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BallisticScrollActivity$Mate(
        p.getValue('delegate'),
        p.getValue('simulation'),
        p.getValue('vsync'),
        p.getValue('shouldIgnorePointer'),
      ),
    );
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'simulation', init: simulation);
    mateParams.set(name: 'vsync', init: vsync);
    mateParams.set(name: 'shouldIgnorePointer', init: shouldIgnorePointer);
  }
}

/// class DrivenScrollActivity extends ScrollActivity
class DrivenScrollActivity$Mate extends DrivenScrollActivity with Mate<DrivenScrollActivity$Mate> {
  /// DrivenScrollActivity DrivenScrollActivity(ScrollActivityDelegate delegate, {required double from, required double to, required Duration duration, required Curve curve, required TickerProvider vsync})
  DrivenScrollActivity$Mate(
    /// requiredParameters: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate, {
    /// optionalParameters: {required double from} , hasDefaultValue:false, defaultValueCode:null
    required double from,

    /// optionalParameters: {required double to} , hasDefaultValue:false, defaultValueCode:null
    required double to,

    /// optionalParameters: {required Duration duration} , hasDefaultValue:false, defaultValueCode:null
    required Duration duration,

    /// optionalParameters: {required Curve curve} , hasDefaultValue:false, defaultValueCode:null
    required Curve curve,

    /// optionalParameters: {required TickerProvider vsync} , hasDefaultValue:false, defaultValueCode:null
    required TickerProvider vsync,
  }) : super(
          delegate,
          from: from,
          to: to,
          duration: duration,
          curve: curve,
          vsync: vsync,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DrivenScrollActivity$Mate(
        p.getValue('delegate'),
        from: p.getValue('from'),
        to: p.getValue('to'),
        duration: p.getValue('duration'),
        curve: p.getValue('curve'),
        vsync: p.getValue('vsync'),
      ),
    );
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'from', init: from);
    mateParams.set(name: 'to', init: to);
    mateParams.set(name: 'duration', init: duration);
    mateParams.set(name: 'curve', init: curve);
    mateParams.set(name: 'vsync', init: vsync);
  }
}
