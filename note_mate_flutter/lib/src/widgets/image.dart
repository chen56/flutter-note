// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'package:note/mate.dart';
import 'dart:io';
import 'package:flutter/src/services/asset_bundle.dart';
import 'dart:typed_data';

/// class Image extends StatefulWidget
class Image$Mate extends Image with WidgetMate<Image$Mate> {
  /// Image Image({Key? key, required ImageProvider<Object> image, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low})
  Image$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ImageProvider<Object> image} , hasDefaultValue:false, defaultValueCode:null
    required ImageProvider<Object> image,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageFrameBuilder? frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageLoadingBuilder? loadingBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? errorBuilder,

    /// optionalParameters: {String? semanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Animation<double>? opacity} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , hasDefaultValue:false, defaultValueCode:null
    BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {Rect? centerSlice} , hasDefaultValue:false, defaultValueCode:null
    Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , hasDefaultValue:true, defaultValueCode:false
    required bool gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,
  }) : super(
          key: key,
          image: image,
          frameBuilder: frameBuilder,
          loadingBuilder: loadingBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Image$Mate(
        key: p.getValue('key'),
        image: p.getValue('image'),
        frameBuilder: p.getValue('frameBuilder'),
        loadingBuilder: p.getValue('loadingBuilder'),
        errorBuilder: p.getValue('errorBuilder'),
        semanticLabel: p.getValue('semanticLabel'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        color: p.getValue('color'),
        opacity: p.getValue('opacity'),
        colorBlendMode: p.getValue('colorBlendMode'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        centerSlice: p.getValue('centerSlice'),
        matchTextDirection: p.getValue('matchTextDirection'),
        gaplessPlayback: p.getValue('gaplessPlayback'),
        isAntiAlias: p.getValue('isAntiAlias'),
        filterQuality: p.getValue('filterQuality'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'frameBuilder', init: frameBuilder);
    mateParams.set(name: 'loadingBuilder', init: loadingBuilder);
    mateParams.set(name: 'errorBuilder', init: errorBuilder);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'colorBlendMode', init: colorBlendMode);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'gaplessPlayback', init: gaplessPlayback);
    mateParams.set(name: 'isAntiAlias', init: isAntiAlias);
    mateParams.set(name: 'filterQuality', init: filterQuality);
  }

  /// Image Image.network(String src, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, FilterQuality filterQuality = FilterQuality.low, bool isAntiAlias = false, Map<String, String>? headers, int? cacheWidth, int? cacheHeight})
  Image$Mate.network(
    /// requiredParameters: String src
    String src, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageFrameBuilder? frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageLoadingBuilder? loadingBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? errorBuilder,

    /// optionalParameters: {String? semanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Animation<double>? opacity} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , hasDefaultValue:false, defaultValueCode:null
    BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {Rect? centerSlice} , hasDefaultValue:false, defaultValueCode:null
    Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , hasDefaultValue:true, defaultValueCode:false
    required bool gaplessPlayback,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {bool isAntiAlias = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isAntiAlias,

    /// optionalParameters: {Map<String, String>? headers} , hasDefaultValue:false, defaultValueCode:null
    Map<String, String>? headers,

    /// optionalParameters: {int? cacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? cacheWidth,

    /// optionalParameters: {int? cacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? cacheHeight,
  }) : super.network(
          src,
          key: key,
          scale: scale,
          frameBuilder: frameBuilder,
          loadingBuilder: loadingBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          filterQuality: filterQuality,
          isAntiAlias: isAntiAlias,
          headers: headers,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Image$Mate.network(
        p.getValue('src'),
        key: p.getValue('key'),
        scale: p.getValue('scale'),
        frameBuilder: p.getValue('frameBuilder'),
        loadingBuilder: p.getValue('loadingBuilder'),
        errorBuilder: p.getValue('errorBuilder'),
        semanticLabel: p.getValue('semanticLabel'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        color: p.getValue('color'),
        opacity: p.getValue('opacity'),
        colorBlendMode: p.getValue('colorBlendMode'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        centerSlice: p.getValue('centerSlice'),
        matchTextDirection: p.getValue('matchTextDirection'),
        gaplessPlayback: p.getValue('gaplessPlayback'),
        filterQuality: p.getValue('filterQuality'),
        isAntiAlias: p.getValue('isAntiAlias'),
        headers: p.getValue('headers'),
        cacheWidth: p.getValue('cacheWidth'),
        cacheHeight: p.getValue('cacheHeight'),
      ),
    );
    mateParams.set(name: 'src', init: src);
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'frameBuilder', init: frameBuilder);
    mateParams.set(name: 'loadingBuilder', init: loadingBuilder);
    mateParams.set(name: 'errorBuilder', init: errorBuilder);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'colorBlendMode', init: colorBlendMode);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'gaplessPlayback', init: gaplessPlayback);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'isAntiAlias', init: isAntiAlias);
    mateParams.set(name: 'headers', init: headers);
    mateParams.set(name: 'cacheWidth', init: cacheWidth);
    mateParams.set(name: 'cacheHeight', init: cacheHeight);
  }

  /// Image Image.file(File file, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  Image$Mate.file(
    /// requiredParameters: File file
    File file, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageFrameBuilder? frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? errorBuilder,

    /// optionalParameters: {String? semanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Animation<double>? opacity} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , hasDefaultValue:false, defaultValueCode:null
    BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {Rect? centerSlice} , hasDefaultValue:false, defaultValueCode:null
    Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , hasDefaultValue:true, defaultValueCode:false
    required bool gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {int? cacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? cacheWidth,

    /// optionalParameters: {int? cacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? cacheHeight,
  }) : super.file(
          file,
          key: key,
          scale: scale,
          frameBuilder: frameBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Image$Mate.file(
        p.getValue('file'),
        key: p.getValue('key'),
        scale: p.getValue('scale'),
        frameBuilder: p.getValue('frameBuilder'),
        errorBuilder: p.getValue('errorBuilder'),
        semanticLabel: p.getValue('semanticLabel'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        color: p.getValue('color'),
        opacity: p.getValue('opacity'),
        colorBlendMode: p.getValue('colorBlendMode'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        centerSlice: p.getValue('centerSlice'),
        matchTextDirection: p.getValue('matchTextDirection'),
        gaplessPlayback: p.getValue('gaplessPlayback'),
        isAntiAlias: p.getValue('isAntiAlias'),
        filterQuality: p.getValue('filterQuality'),
        cacheWidth: p.getValue('cacheWidth'),
        cacheHeight: p.getValue('cacheHeight'),
      ),
    );
    mateParams.set(name: 'file', init: file);
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'frameBuilder', init: frameBuilder);
    mateParams.set(name: 'errorBuilder', init: errorBuilder);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'colorBlendMode', init: colorBlendMode);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'gaplessPlayback', init: gaplessPlayback);
    mateParams.set(name: 'isAntiAlias', init: isAntiAlias);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'cacheWidth', init: cacheWidth);
    mateParams.set(name: 'cacheHeight', init: cacheHeight);
  }

  /// Image Image.asset(String name, {Key? key, AssetBundle? bundle, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? scale, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, String? package, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  Image$Mate.asset(
    /// requiredParameters: String name
    String name, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {AssetBundle? bundle} , hasDefaultValue:false, defaultValueCode:null
    AssetBundle? bundle,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageFrameBuilder? frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? errorBuilder,

    /// optionalParameters: {String? semanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {double? scale} , hasDefaultValue:false, defaultValueCode:null
    double? scale,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Animation<double>? opacity} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , hasDefaultValue:false, defaultValueCode:null
    BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {Rect? centerSlice} , hasDefaultValue:false, defaultValueCode:null
    Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , hasDefaultValue:true, defaultValueCode:false
    required bool gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isAntiAlias,

    /// optionalParameters: {String? package} , hasDefaultValue:false, defaultValueCode:null
    String? package,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {int? cacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? cacheWidth,

    /// optionalParameters: {int? cacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? cacheHeight,
  }) : super.asset(
          name,
          key: key,
          bundle: bundle,
          frameBuilder: frameBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          scale: scale,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          package: package,
          filterQuality: filterQuality,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Image$Mate.asset(
        p.getValue('name'),
        key: p.getValue('key'),
        bundle: p.getValue('bundle'),
        frameBuilder: p.getValue('frameBuilder'),
        errorBuilder: p.getValue('errorBuilder'),
        semanticLabel: p.getValue('semanticLabel'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        scale: p.getValue('scale'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        color: p.getValue('color'),
        opacity: p.getValue('opacity'),
        colorBlendMode: p.getValue('colorBlendMode'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        centerSlice: p.getValue('centerSlice'),
        matchTextDirection: p.getValue('matchTextDirection'),
        gaplessPlayback: p.getValue('gaplessPlayback'),
        isAntiAlias: p.getValue('isAntiAlias'),
        package: p.getValue('package'),
        filterQuality: p.getValue('filterQuality'),
        cacheWidth: p.getValue('cacheWidth'),
        cacheHeight: p.getValue('cacheHeight'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'bundle', init: bundle);
    mateParams.set(name: 'frameBuilder', init: frameBuilder);
    mateParams.set(name: 'errorBuilder', init: errorBuilder);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'colorBlendMode', init: colorBlendMode);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'gaplessPlayback', init: gaplessPlayback);
    mateParams.set(name: 'isAntiAlias', init: isAntiAlias);
    mateParams.set(name: 'package', init: package);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'cacheWidth', init: cacheWidth);
    mateParams.set(name: 'cacheHeight', init: cacheHeight);
  }

  /// Image Image.memory(Uint8List bytes, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  Image$Mate.memory(
    /// requiredParameters: Uint8List bytes
    Uint8List bytes, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageFrameBuilder? frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorWidgetBuilder? errorBuilder,

    /// optionalParameters: {String? semanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Animation<double>? opacity} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , hasDefaultValue:false, defaultValueCode:null
    BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {Rect? centerSlice} , hasDefaultValue:false, defaultValueCode:null
    Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , hasDefaultValue:true, defaultValueCode:false
    required bool gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,

    /// optionalParameters: {int? cacheWidth} , hasDefaultValue:false, defaultValueCode:null
    int? cacheWidth,

    /// optionalParameters: {int? cacheHeight} , hasDefaultValue:false, defaultValueCode:null
    int? cacheHeight,
  }) : super.memory(
          bytes,
          key: key,
          scale: scale,
          frameBuilder: frameBuilder,
          errorBuilder: errorBuilder,
          semanticLabel: semanticLabel,
          excludeFromSemantics: excludeFromSemantics,
          width: width,
          height: height,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          gaplessPlayback: gaplessPlayback,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
          cacheWidth: cacheWidth,
          cacheHeight: cacheHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Image$Mate.memory(
        p.getValue('bytes'),
        key: p.getValue('key'),
        scale: p.getValue('scale'),
        frameBuilder: p.getValue('frameBuilder'),
        errorBuilder: p.getValue('errorBuilder'),
        semanticLabel: p.getValue('semanticLabel'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        color: p.getValue('color'),
        opacity: p.getValue('opacity'),
        colorBlendMode: p.getValue('colorBlendMode'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        repeat: p.getValue('repeat'),
        centerSlice: p.getValue('centerSlice'),
        matchTextDirection: p.getValue('matchTextDirection'),
        gaplessPlayback: p.getValue('gaplessPlayback'),
        isAntiAlias: p.getValue('isAntiAlias'),
        filterQuality: p.getValue('filterQuality'),
        cacheWidth: p.getValue('cacheWidth'),
        cacheHeight: p.getValue('cacheHeight'),
      ),
    );
    mateParams.set(name: 'bytes', init: bytes);
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'frameBuilder', init: frameBuilder);
    mateParams.set(name: 'errorBuilder', init: errorBuilder);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'opacity', init: opacity);
    mateParams.set(name: 'colorBlendMode', init: colorBlendMode);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'gaplessPlayback', init: gaplessPlayback);
    mateParams.set(name: 'isAntiAlias', init: isAntiAlias);
    mateParams.set(name: 'filterQuality', init: filterQuality);
    mateParams.set(name: 'cacheWidth', init: cacheWidth);
    mateParams.set(name: 'cacheHeight', init: cacheHeight);
  }
}
