// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/dismissible.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:note/mate.dart';

/// class Dismissible extends StatefulWidget
class Dismissible$Mate extends Dismissible with WidgetMate<Dismissible$Mate> {
  /// Dismissible Dismissible({required Key key, required Widget child, Widget? background, Widget? secondaryBackground, Future<bool?> Function(DismissDirection)? confirmDismiss, void Function()? onResize, void Function(DismissUpdateDetails)? onUpdate, void Function(DismissDirection)? onDismissed, DismissDirection direction = DismissDirection.horizontal, Duration? resizeDuration = const Duration(milliseconds: 300), Map<DismissDirection, double> dismissThresholds = const <DismissDirection, double>{}, Duration movementDuration = const Duration(milliseconds: 200), double crossAxisEndOffset = 0.0, DragStartBehavior dragStartBehavior = DragStartBehavior.start, HitTestBehavior behavior = HitTestBehavior.opaque})
  Dismissible$Mate({
    /// optionalParameters: {required Key key} , hasDefaultValue:false, defaultValueCode:null
    required Key key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {Widget? background} , hasDefaultValue:false, defaultValueCode:null
    Widget? background,

    /// optionalParameters: {Widget? secondaryBackground} , hasDefaultValue:false, defaultValueCode:null
    Widget? secondaryBackground,

    /// optionalParameters: {Future<bool?> Function(DismissDirection)? confirmDismiss} , hasDefaultValue:false, defaultValueCode:null
    ConfirmDismissCallback? confirmDismiss,

    /// optionalParameters: {void Function()? onResize} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onResize,

    /// optionalParameters: {void Function(DismissUpdateDetails)? onUpdate} , hasDefaultValue:false, defaultValueCode:null
    DismissUpdateCallback? onUpdate,

    /// optionalParameters: {void Function(DismissDirection)? onDismissed} , hasDefaultValue:false, defaultValueCode:null
    DismissDirectionCallback? onDismissed,

    /// optionalParameters: {DismissDirection direction = DismissDirection.horizontal} , hasDefaultValue:true, defaultValueCode:DismissDirection.horizontal
    required DismissDirection direction,

    /// optionalParameters: {Duration? resizeDuration = const Duration(milliseconds: 300)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 300)
    Duration? resizeDuration,

    /// optionalParameters: {Map<DismissDirection, double> dismissThresholds = const <DismissDirection, double>{}} , hasDefaultValue:true, defaultValueCode:const <DismissDirection, double>{}
    required Map<DismissDirection, double> dismissThresholds,

    /// optionalParameters: {Duration movementDuration = const Duration(milliseconds: 200)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 200)
    required Duration movementDuration,

    /// optionalParameters: {double crossAxisEndOffset = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisEndOffset,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.opaque} , hasDefaultValue:true, defaultValueCode:HitTestBehavior.opaque
    required HitTestBehavior behavior,
  }) : super(
          key: key,
          child: child,
          background: background,
          secondaryBackground: secondaryBackground,
          confirmDismiss: confirmDismiss,
          onResize: onResize,
          onUpdate: onUpdate,
          onDismissed: onDismissed,
          direction: direction,
          resizeDuration: resizeDuration,
          dismissThresholds: dismissThresholds,
          movementDuration: movementDuration,
          crossAxisEndOffset: crossAxisEndOffset,
          dragStartBehavior: dragStartBehavior,
          behavior: behavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Dismissible$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        background: p.getValue('background'),
        secondaryBackground: p.getValue('secondaryBackground'),
        confirmDismiss: p.getValue('confirmDismiss'),
        onResize: p.getValue('onResize'),
        onUpdate: p.getValue('onUpdate'),
        onDismissed: p.getValue('onDismissed'),
        direction: p.getValue('direction'),
        resizeDuration: p.getValue('resizeDuration'),
        dismissThresholds: p.getValue('dismissThresholds'),
        movementDuration: p.getValue('movementDuration'),
        crossAxisEndOffset: p.getValue('crossAxisEndOffset'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        behavior: p.getValue('behavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'background', init: background);
    mateParams.set(name: 'secondaryBackground', init: secondaryBackground);
    mateParams.set(name: 'confirmDismiss', init: confirmDismiss);
    mateParams.set(name: 'onResize', init: onResize);
    mateParams.set(name: 'onUpdate', init: onUpdate);
    mateParams.set(name: 'onDismissed', init: onDismissed);
    mateParams.set(name: 'direction', init: direction);
    mateParams.set(name: 'resizeDuration', init: resizeDuration);
    mateParams.set(name: 'dismissThresholds', init: dismissThresholds);
    mateParams.set(name: 'movementDuration', init: movementDuration);
    mateParams.set(name: 'crossAxisEndOffset', init: crossAxisEndOffset);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'behavior', init: behavior);
  }
}

/// class DismissUpdateDetails
class DismissUpdateDetails$Mate extends DismissUpdateDetails with Mate<DismissUpdateDetails$Mate> {
  /// DismissUpdateDetails DismissUpdateDetails({DismissDirection direction = DismissDirection.horizontal, bool reached = false, bool previousReached = false, double progress = 0.0})
  DismissUpdateDetails$Mate({
    /// optionalParameters: {DismissDirection direction = DismissDirection.horizontal} , hasDefaultValue:true, defaultValueCode:DismissDirection.horizontal
    required DismissDirection direction,

    /// optionalParameters: {bool reached = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reached,

    /// optionalParameters: {bool previousReached = false} , hasDefaultValue:true, defaultValueCode:false
    required bool previousReached,

    /// optionalParameters: {double progress = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double progress,
  }) : super(
          direction: direction,
          reached: reached,
          previousReached: previousReached,
          progress: progress,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DismissUpdateDetails$Mate(
        direction: p.getValue('direction'),
        reached: p.getValue('reached'),
        previousReached: p.getValue('previousReached'),
        progress: p.getValue('progress'),
      ),
    );
    mateParams.set(name: 'direction', init: direction);
    mateParams.set(name: 'reached', init: reached);
    mateParams.set(name: 'previousReached', init: previousReached);
    mateParams.set(name: 'progress', init: progress);
  }
}
