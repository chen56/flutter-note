// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/list_wheel_scroll_view.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// class ListWheelChildListDelegate extends ListWheelChildDelegate
class ListWheelChildListDelegate$Mate extends ListWheelChildListDelegate with Mate<ListWheelChildListDelegate$Mate> {
  /// ListWheelChildListDelegate ListWheelChildListDelegate({required List<Widget> children})
  ListWheelChildListDelegate$Mate(
      {
      /// param: {required List<Widget> children}
      required List<Widget> children})
      : super(children: children) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelChildListDelegate$Mate(children: p.getValue('children')),
    );
    mateParams.set(name: 'children', init: children);
  }
}

/// class ListWheelChildLoopingListDelegate extends ListWheelChildDelegate
class ListWheelChildLoopingListDelegate$Mate extends ListWheelChildLoopingListDelegate
    with Mate<ListWheelChildLoopingListDelegate$Mate> {
  /// ListWheelChildLoopingListDelegate ListWheelChildLoopingListDelegate({required List<Widget> children})
  ListWheelChildLoopingListDelegate$Mate(
      {
      /// param: {required List<Widget> children}
      required List<Widget> children})
      : super(children: children) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelChildLoopingListDelegate$Mate(children: p.getValue('children')),
    );
    mateParams.set(name: 'children', init: children);
  }
}

/// class ListWheelChildBuilderDelegate extends ListWheelChildDelegate
class ListWheelChildBuilderDelegate$Mate extends ListWheelChildBuilderDelegate
    with Mate<ListWheelChildBuilderDelegate$Mate> {
  /// ListWheelChildBuilderDelegate ListWheelChildBuilderDelegate({required Widget? Function(BuildContext, int) builder, int? childCount})
  ListWheelChildBuilderDelegate$Mate({
    /// param: {required Widget? Function(BuildContext, int) builder}
    required NullableIndexedWidgetBuilder builder,

    /// param: {int? childCount}
    int? childCount,
  }) : super(
          builder: builder,
          childCount: childCount,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelChildBuilderDelegate$Mate(
        builder: p.getValue('builder'),
        childCount: p.getValue('childCount'),
      ),
    );
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'childCount', init: childCount);
  }
}

/// class FixedExtentScrollController extends ScrollController
class FixedExtentScrollController$Mate extends FixedExtentScrollController with Mate<FixedExtentScrollController$Mate> {
  /// FixedExtentScrollController FixedExtentScrollController({int initialItem = 0})
  FixedExtentScrollController$Mate(
      {
      /// param: {int initialItem = 0}
      required int initialItem})
      : super(initialItem: initialItem) {
    mateParams = Params(
      init: this,
      builder: (p) => FixedExtentScrollController$Mate(initialItem: p.getValue('initialItem')),
    );
    mateParams.set(name: 'initialItem', init: initialItem);
  }
}

/// class FixedExtentMetrics extends FixedScrollMetrics
class FixedExtentMetrics$Mate extends FixedExtentMetrics with Mate<FixedExtentMetrics$Mate> {
  /// FixedExtentMetrics FixedExtentMetrics({required double? minScrollExtent, required double? maxScrollExtent, required double? pixels, required double? viewportDimension, required AxisDirection axisDirection, required int itemIndex, required double devicePixelRatio})
  FixedExtentMetrics$Mate({
    /// param: {required double? minScrollExtent}
    required double? minScrollExtent,

    /// param: {required double? maxScrollExtent}
    required double? maxScrollExtent,

    /// param: {required double? pixels}
    required double? pixels,

    /// param: {required double? viewportDimension}
    required double? viewportDimension,

    /// param: {required AxisDirection axisDirection}
    required AxisDirection axisDirection,

    /// param: {required int itemIndex}
    required int itemIndex,

    /// param: {required double devicePixelRatio}
    required double devicePixelRatio,
  }) : super(
          minScrollExtent: minScrollExtent,
          maxScrollExtent: maxScrollExtent,
          pixels: pixels,
          viewportDimension: viewportDimension,
          axisDirection: axisDirection,
          itemIndex: itemIndex,
          devicePixelRatio: devicePixelRatio,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FixedExtentMetrics$Mate(
        minScrollExtent: p.getValue('minScrollExtent'),
        maxScrollExtent: p.getValue('maxScrollExtent'),
        pixels: p.getValue('pixels'),
        viewportDimension: p.getValue('viewportDimension'),
        axisDirection: p.getValue('axisDirection'),
        itemIndex: p.getValue('itemIndex'),
        devicePixelRatio: p.getValue('devicePixelRatio'),
      ),
    );
    mateParams.set(name: 'minScrollExtent', init: minScrollExtent);
    mateParams.set(name: 'maxScrollExtent', init: maxScrollExtent);
    mateParams.set(name: 'pixels', init: pixels);
    mateParams.set(name: 'viewportDimension', init: viewportDimension);
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'itemIndex', init: itemIndex);
    mateParams.set(name: 'devicePixelRatio', init: devicePixelRatio);
  }
}

/// class FixedExtentScrollPhysics extends ScrollPhysics
class FixedExtentScrollPhysics$Mate extends FixedExtentScrollPhysics with Mate<FixedExtentScrollPhysics$Mate> {
  /// FixedExtentScrollPhysics FixedExtentScrollPhysics({ScrollPhysics? parent})
  FixedExtentScrollPhysics$Mate(
      {
      /// param: {ScrollPhysics? parent}
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateParams = Params(
      init: this,
      builder: (p) => FixedExtentScrollPhysics$Mate(parent: p.getValue('parent')),
    );
    mateParams.set(name: 'parent', init: parent);
  }
}

/// class ListWheelScrollView extends StatefulWidget
class ListWheelScrollView$Mate extends ListWheelScrollView with WidgetMate<ListWheelScrollView$Mate> {
  /// ListWheelScrollView ListWheelScrollView({Key? key, ScrollController? controller, ScrollPhysics? physics, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, void Function(int)? onSelectedItemChanged, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, required List<Widget> children})
  ListWheelScrollView$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio}
    required double diameterRatio,

    /// param: {double perspective = RenderListWheelViewport.defaultPerspective}
    required double perspective,

    /// param: {double offAxisFraction = 0.0}
    required double offAxisFraction,

    /// param: {bool useMagnifier = false}
    required bool useMagnifier,

    /// param: {double magnification = 1.0}
    required double magnification,

    /// param: {double overAndUnderCenterOpacity = 1.0}
    required double overAndUnderCenterOpacity,

    /// param: {required double itemExtent}
    required double itemExtent,

    /// param: {double squeeze = 1.0}
    required double squeeze,

    /// param: {void Function(int)? onSelectedItemChanged}
    ValueChanged<int>? onSelectedItemChanged,

    /// param: {bool renderChildrenOutsideViewport = false}
    required bool renderChildrenOutsideViewport,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {required List<Widget> children}
    required List<Widget> children,
  }) : super(
          key: key,
          controller: controller,
          physics: physics,
          diameterRatio: diameterRatio,
          perspective: perspective,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          overAndUnderCenterOpacity: overAndUnderCenterOpacity,
          itemExtent: itemExtent,
          squeeze: squeeze,
          onSelectedItemChanged: onSelectedItemChanged,
          renderChildrenOutsideViewport: renderChildrenOutsideViewport,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelScrollView$Mate(
        key: p.getValue('key'),
        controller: p.getValue('controller'),
        physics: p.getValue('physics'),
        diameterRatio: p.getValue('diameterRatio'),
        perspective: p.getValue('perspective'),
        offAxisFraction: p.getValue('offAxisFraction'),
        useMagnifier: p.getValue('useMagnifier'),
        magnification: p.getValue('magnification'),
        overAndUnderCenterOpacity: p.getValue('overAndUnderCenterOpacity'),
        itemExtent: p.getValue('itemExtent'),
        squeeze: p.getValue('squeeze'),
        onSelectedItemChanged: p.getValue('onSelectedItemChanged'),
        renderChildrenOutsideViewport: p.getValue('renderChildrenOutsideViewport'),
        clipBehavior: p.getValue('clipBehavior'),
        restorationId: p.getValue('restorationId'),
        scrollBehavior: p.getValue('scrollBehavior'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'diameterRatio', init: diameterRatio);
    mateParams.set(name: 'perspective', init: perspective);
    mateParams.set(name: 'offAxisFraction', init: offAxisFraction);
    mateParams.set(name: 'useMagnifier', init: useMagnifier);
    mateParams.set(name: 'magnification', init: magnification);
    mateParams.set(name: 'overAndUnderCenterOpacity', init: overAndUnderCenterOpacity);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'squeeze', init: squeeze);
    mateParams.set(name: 'onSelectedItemChanged', init: onSelectedItemChanged);
    mateParams.set(name: 'renderChildrenOutsideViewport', init: renderChildrenOutsideViewport);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'scrollBehavior', init: scrollBehavior);
    mateParams.set(name: 'children', init: children);
  }

  /// ListWheelScrollView ListWheelScrollView.useDelegate({Key? key, ScrollController? controller, ScrollPhysics? physics, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, void Function(int)? onSelectedItemChanged, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, required ListWheelChildDelegate childDelegate})
  ListWheelScrollView$Mate.useDelegate({
    /// param: {Key? key}
    Key? key,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio}
    required double diameterRatio,

    /// param: {double perspective = RenderListWheelViewport.defaultPerspective}
    required double perspective,

    /// param: {double offAxisFraction = 0.0}
    required double offAxisFraction,

    /// param: {bool useMagnifier = false}
    required bool useMagnifier,

    /// param: {double magnification = 1.0}
    required double magnification,

    /// param: {double overAndUnderCenterOpacity = 1.0}
    required double overAndUnderCenterOpacity,

    /// param: {required double itemExtent}
    required double itemExtent,

    /// param: {double squeeze = 1.0}
    required double squeeze,

    /// param: {void Function(int)? onSelectedItemChanged}
    ValueChanged<int>? onSelectedItemChanged,

    /// param: {bool renderChildrenOutsideViewport = false}
    required bool renderChildrenOutsideViewport,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {required ListWheelChildDelegate childDelegate}
    required ListWheelChildDelegate childDelegate,
  }) : super.useDelegate(
          key: key,
          controller: controller,
          physics: physics,
          diameterRatio: diameterRatio,
          perspective: perspective,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          overAndUnderCenterOpacity: overAndUnderCenterOpacity,
          itemExtent: itemExtent,
          squeeze: squeeze,
          onSelectedItemChanged: onSelectedItemChanged,
          renderChildrenOutsideViewport: renderChildrenOutsideViewport,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          childDelegate: childDelegate,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelScrollView$Mate.useDelegate(
        key: p.getValue('key'),
        controller: p.getValue('controller'),
        physics: p.getValue('physics'),
        diameterRatio: p.getValue('diameterRatio'),
        perspective: p.getValue('perspective'),
        offAxisFraction: p.getValue('offAxisFraction'),
        useMagnifier: p.getValue('useMagnifier'),
        magnification: p.getValue('magnification'),
        overAndUnderCenterOpacity: p.getValue('overAndUnderCenterOpacity'),
        itemExtent: p.getValue('itemExtent'),
        squeeze: p.getValue('squeeze'),
        onSelectedItemChanged: p.getValue('onSelectedItemChanged'),
        renderChildrenOutsideViewport: p.getValue('renderChildrenOutsideViewport'),
        clipBehavior: p.getValue('clipBehavior'),
        restorationId: p.getValue('restorationId'),
        scrollBehavior: p.getValue('scrollBehavior'),
        childDelegate: p.getValue('childDelegate'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'diameterRatio', init: diameterRatio);
    mateParams.set(name: 'perspective', init: perspective);
    mateParams.set(name: 'offAxisFraction', init: offAxisFraction);
    mateParams.set(name: 'useMagnifier', init: useMagnifier);
    mateParams.set(name: 'magnification', init: magnification);
    mateParams.set(name: 'overAndUnderCenterOpacity', init: overAndUnderCenterOpacity);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'squeeze', init: squeeze);
    mateParams.set(name: 'onSelectedItemChanged', init: onSelectedItemChanged);
    mateParams.set(name: 'renderChildrenOutsideViewport', init: renderChildrenOutsideViewport);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'scrollBehavior', init: scrollBehavior);
    mateParams.set(name: 'childDelegate', init: childDelegate);
  }
}

/// class ListWheelElement extends RenderObjectElement implements ListWheelChildManager
class ListWheelElement$Mate extends ListWheelElement with Mate<ListWheelElement$Mate> {
  /// ListWheelElement ListWheelElement(ListWheelViewport widget)
  ListWheelElement$Mate(

      /// param: ListWheelViewport widget
      ListWheelViewport widget)
      : super(widget) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelElement$Mate(p.getValue('widget')),
    );
    mateParams.set(name: 'widget', init: widget);
  }
}

/// class ListWheelViewport extends RenderObjectWidget
class ListWheelViewport$Mate extends ListWheelViewport with WidgetMate<ListWheelViewport$Mate> {
  /// ListWheelViewport ListWheelViewport({Key? key, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, bool renderChildrenOutsideViewport = false, required ViewportOffset offset, required ListWheelChildDelegate childDelegate, Clip clipBehavior = Clip.hardEdge})
  ListWheelViewport$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio}
    required double diameterRatio,

    /// param: {double perspective = RenderListWheelViewport.defaultPerspective}
    required double perspective,

    /// param: {double offAxisFraction = 0.0}
    required double offAxisFraction,

    /// param: {bool useMagnifier = false}
    required bool useMagnifier,

    /// param: {double magnification = 1.0}
    required double magnification,

    /// param: {double overAndUnderCenterOpacity = 1.0}
    required double overAndUnderCenterOpacity,

    /// param: {required double itemExtent}
    required double itemExtent,

    /// param: {double squeeze = 1.0}
    required double squeeze,

    /// param: {bool renderChildrenOutsideViewport = false}
    required bool renderChildrenOutsideViewport,

    /// param: {required ViewportOffset offset}
    required ViewportOffset offset,

    /// param: {required ListWheelChildDelegate childDelegate}
    required ListWheelChildDelegate childDelegate,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          diameterRatio: diameterRatio,
          perspective: perspective,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          overAndUnderCenterOpacity: overAndUnderCenterOpacity,
          itemExtent: itemExtent,
          squeeze: squeeze,
          renderChildrenOutsideViewport: renderChildrenOutsideViewport,
          offset: offset,
          childDelegate: childDelegate,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListWheelViewport$Mate(
        key: p.getValue('key'),
        diameterRatio: p.getValue('diameterRatio'),
        perspective: p.getValue('perspective'),
        offAxisFraction: p.getValue('offAxisFraction'),
        useMagnifier: p.getValue('useMagnifier'),
        magnification: p.getValue('magnification'),
        overAndUnderCenterOpacity: p.getValue('overAndUnderCenterOpacity'),
        itemExtent: p.getValue('itemExtent'),
        squeeze: p.getValue('squeeze'),
        renderChildrenOutsideViewport: p.getValue('renderChildrenOutsideViewport'),
        offset: p.getValue('offset'),
        childDelegate: p.getValue('childDelegate'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'diameterRatio', init: diameterRatio);
    mateParams.set(name: 'perspective', init: perspective);
    mateParams.set(name: 'offAxisFraction', init: offAxisFraction);
    mateParams.set(name: 'useMagnifier', init: useMagnifier);
    mateParams.set(name: 'magnification', init: magnification);
    mateParams.set(name: 'overAndUnderCenterOpacity', init: overAndUnderCenterOpacity);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'squeeze', init: squeeze);
    mateParams.set(name: 'renderChildrenOutsideViewport', init: renderChildrenOutsideViewport);
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'childDelegate', init: childDelegate);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}
