// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.350911

import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/rendering/object.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/foundation/assertions.dart';
export 'package:flutter/foundation.dart'
    show factory, immutable, mustCallSuper, optionalTypeArgs, protected, required, visibleForTesting;
export 'package:flutter/foundation.dart'
    show ErrorDescription, ErrorHint, ErrorSummary, FlutterError, debugPrint, debugPrintStack;
export 'package:flutter/foundation.dart' show ValueChanged, ValueGetter, ValueSetter, VoidCallback;
export 'package:flutter/foundation.dart' show DiagnosticLevel, DiagnosticsNode;
export 'package:flutter/foundation.dart' show Key, LocalKey, ValueKey;
export 'package:flutter/rendering.dart' show RenderBox, RenderObject, debugDumpLayerTree, debugDumpRenderTree;

/// class ObjectKey extends LocalKey
class ObjectKey$Mate extends ObjectKey {
  /// ObjectKey ObjectKey(Object? value)
  ObjectKey$Mate(

      /// param: Object? value
      Object? value)
      : super(value) {}
}

/// class LabeledGlobalKey<T extends State<StatefulWidget>> extends GlobalKey<T>
class LabeledGlobalKey$Mate<T extends State<StatefulWidget>> extends LabeledGlobalKey<T> {
  /// LabeledGlobalKey<T> LabeledGlobalKey(String? _debugLabel)
  LabeledGlobalKey$Mate(

      /// param: String? _debugLabel
      String? _debugLabel)
      : super(_debugLabel) {}
}

/// class GlobalObjectKey<T extends State<StatefulWidget>> extends GlobalKey<T>
class GlobalObjectKey$Mate<T extends State<StatefulWidget>> extends GlobalObjectKey<T> {
  /// GlobalObjectKey<T> GlobalObjectKey(Object value)
  GlobalObjectKey$Mate(

      /// param: Object value
      Object value)
      : super(value) {}
}

/// abstract class Widget extends DiagnosticableTree
abstract class Widget$Mate extends Widget {
  /// Widget Widget({Key? key})
  Widget$Mate(
      {
      /// param: {Key? key}
      Key? key})
      : super(key: key) {}
}

/// abstract class StatelessWidget extends Widget
abstract class StatelessWidget$Mate extends StatelessWidget {
  /// StatelessWidget StatelessWidget({Key? key})
  StatelessWidget$Mate(
      {
      /// param: {Key? key}
      Key? key})
      : super(key: key) {}
}

/// abstract class StatefulWidget extends Widget
abstract class StatefulWidget$Mate extends StatefulWidget {
  /// StatefulWidget StatefulWidget({Key? key})
  StatefulWidget$Mate(
      {
      /// param: {Key? key}
      Key? key})
      : super(key: key) {}
}

/// abstract class ProxyWidget extends Widget
abstract class ProxyWidget$Mate extends ProxyWidget {
  /// ProxyWidget ProxyWidget({Key? key, required Widget child})
  ProxyWidget$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {}
}

/// abstract class ParentDataWidget<T extends ParentData> extends ProxyWidget
abstract class ParentDataWidget$Mate<T extends ParentData> extends ParentDataWidget<T> {
  /// ParentDataWidget<T> ParentDataWidget({Key? key, required Widget child})
  ParentDataWidget$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {}
}

/// abstract class InheritedWidget extends ProxyWidget
abstract class InheritedWidget$Mate extends InheritedWidget {
  /// InheritedWidget InheritedWidget({Key? key, required Widget child})
  InheritedWidget$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {}
}

/// abstract class RenderObjectWidget extends Widget
abstract class RenderObjectWidget$Mate extends RenderObjectWidget {
  /// RenderObjectWidget RenderObjectWidget({Key? key})
  RenderObjectWidget$Mate(
      {
      /// param: {Key? key}
      Key? key})
      : super(key: key) {}
}

/// abstract class LeafRenderObjectWidget extends RenderObjectWidget
abstract class LeafRenderObjectWidget$Mate extends LeafRenderObjectWidget {
  /// LeafRenderObjectWidget LeafRenderObjectWidget({Key? key})
  LeafRenderObjectWidget$Mate(
      {
      /// param: {Key? key}
      Key? key})
      : super(key: key) {}
}

/// abstract class SingleChildRenderObjectWidget extends RenderObjectWidget
abstract class SingleChildRenderObjectWidget$Mate extends SingleChildRenderObjectWidget {
  /// SingleChildRenderObjectWidget SingleChildRenderObjectWidget({Key? key, Widget? child})
  SingleChildRenderObjectWidget$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          child: child,
        ) {}
}

/// abstract class MultiChildRenderObjectWidget extends RenderObjectWidget
abstract class MultiChildRenderObjectWidget$Mate extends MultiChildRenderObjectWidget {
  /// MultiChildRenderObjectWidget MultiChildRenderObjectWidget({Key? key, List<Widget> children = const <Widget>[]})
  MultiChildRenderObjectWidget$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,
  }) : super(
          key: key,
          children: children,
        ) {}
}

/// class BuildOwner
class BuildOwner$Mate extends BuildOwner {
  /// BuildOwner BuildOwner({void Function()? onBuildScheduled, FocusManager? focusManager})
  BuildOwner$Mate({
    /// param: {void Function()? onBuildScheduled}
    VoidCallback? onBuildScheduled,

    /// param: {FocusManager? focusManager}
    FocusManager? focusManager,
  }) : super(
          onBuildScheduled: onBuildScheduled,
          focusManager: focusManager,
        ) {}
}

/// abstract class Element extends DiagnosticableTree implements BuildContext
abstract class Element$Mate extends Element {
  /// Element Element(Widget widget)
  Element$Mate(

      /// param: Widget widget
      Widget widget)
      : super(widget) {}
}

/// class ErrorWidget extends LeafRenderObjectWidget
class ErrorWidget$Mate extends ErrorWidget {
  /// ErrorWidget ErrorWidget(Object exception)
  ErrorWidget$Mate(

      /// param: Object exception
      Object exception)
      : super(exception) {}

  /// ErrorWidget ErrorWidget.withDetails({String message = '', FlutterError? error})
  ErrorWidget$Mate.withDetails({
    /// param: {String message = ''}
    required String message,

    /// param: {FlutterError? error}
    FlutterError? error,
  }) : super.withDetails(
          message: message,
          error: error,
        ) {}
}

/// abstract class ComponentElement extends Element
abstract class ComponentElement$Mate extends ComponentElement {
  /// ComponentElement ComponentElement(Widget widget)
  ComponentElement$Mate(

      /// param: Widget widget
      Widget widget)
      : super(widget) {}
}

/// class StatelessElement extends ComponentElement
class StatelessElement$Mate extends StatelessElement {
  /// StatelessElement StatelessElement(StatelessWidget widget)
  StatelessElement$Mate(

      /// param: StatelessWidget widget
      StatelessWidget widget)
      : super(widget) {}
}

/// class StatefulElement extends ComponentElement
class StatefulElement$Mate extends StatefulElement {
  /// StatefulElement StatefulElement(StatefulWidget widget)
  StatefulElement$Mate(

      /// param: StatefulWidget widget
      StatefulWidget widget)
      : super(widget) {}
}

/// abstract class ProxyElement extends ComponentElement
abstract class ProxyElement$Mate extends ProxyElement {
  /// ProxyElement ProxyElement(ProxyWidget widget)
  ProxyElement$Mate(

      /// param: ProxyWidget widget
      ProxyWidget widget)
      : super(widget) {}
}

/// class ParentDataElement<T extends ParentData> extends ProxyElement
class ParentDataElement$Mate<T extends ParentData> extends ParentDataElement<T> {
  /// ParentDataElement<T> ParentDataElement(ParentDataWidget<T> widget)
  ParentDataElement$Mate(

      /// param: ParentDataWidget<T> widget
      ParentDataWidget<T> widget)
      : super(widget) {}
}

/// class InheritedElement extends ProxyElement
class InheritedElement$Mate extends InheritedElement {
  /// InheritedElement InheritedElement(InheritedWidget widget)
  InheritedElement$Mate(

      /// param: InheritedWidget widget
      InheritedWidget widget)
      : super(widget) {}
}

/// abstract class RenderObjectElement extends Element
abstract class RenderObjectElement$Mate extends RenderObjectElement {
  /// RenderObjectElement RenderObjectElement(RenderObjectWidget widget)
  RenderObjectElement$Mate(

      /// param: RenderObjectWidget widget
      RenderObjectWidget widget)
      : super(widget) {}
}

/// abstract class RootRenderObjectElement extends RenderObjectElement
abstract class RootRenderObjectElement$Mate extends RootRenderObjectElement {
  /// RootRenderObjectElement RootRenderObjectElement(RenderObjectWidget widget)
  RootRenderObjectElement$Mate(

      /// param: RenderObjectWidget widget
      RenderObjectWidget widget)
      : super(widget) {}
}

/// class LeafRenderObjectElement extends RenderObjectElement
class LeafRenderObjectElement$Mate extends LeafRenderObjectElement {
  /// LeafRenderObjectElement LeafRenderObjectElement(LeafRenderObjectWidget widget)
  LeafRenderObjectElement$Mate(

      /// param: LeafRenderObjectWidget widget
      LeafRenderObjectWidget widget)
      : super(widget) {}
}

/// class SingleChildRenderObjectElement extends RenderObjectElement
class SingleChildRenderObjectElement$Mate extends SingleChildRenderObjectElement {
  /// SingleChildRenderObjectElement SingleChildRenderObjectElement(SingleChildRenderObjectWidget widget)
  SingleChildRenderObjectElement$Mate(

      /// param: SingleChildRenderObjectWidget widget
      SingleChildRenderObjectWidget widget)
      : super(widget) {}
}

/// class MultiChildRenderObjectElement extends RenderObjectElement
class MultiChildRenderObjectElement$Mate extends MultiChildRenderObjectElement {
  /// MultiChildRenderObjectElement MultiChildRenderObjectElement(MultiChildRenderObjectWidget widget)
  MultiChildRenderObjectElement$Mate(

      /// param: MultiChildRenderObjectWidget widget
      MultiChildRenderObjectWidget widget)
      : super(widget) {}
}

/// class DebugCreator
class DebugCreator$Mate extends DebugCreator {
  /// DebugCreator DebugCreator(Element element)
  DebugCreator$Mate(

      /// param: Element element
      Element element)
      : super(element) {}
}

/// class IndexedSlot<T extends Element?>
class IndexedSlot$Mate<T extends Element?> extends IndexedSlot<T> {
  /// IndexedSlot<T> IndexedSlot(int index, T value)
  IndexedSlot$Mate(
    /// param: int index
    int index,

    /// param: T value
    T value,
  ) : super(
          index,
          value,
        ) {}
}
