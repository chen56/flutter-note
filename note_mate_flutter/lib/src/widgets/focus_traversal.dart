// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/focus_traversal.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class NumericFocusOrder extends FocusOrder
class NumericFocusOrder$Mate extends NumericFocusOrder with Mate<NumericFocusOrder$Mate> {
  /// NumericFocusOrder NumericFocusOrder(double order)
  NumericFocusOrder$Mate(

      /// requiredParameters: double order
      double order)
      : super(order) {
    mateParams = Params(
      init: this,
      builder: (p) => NumericFocusOrder$Mate(p.getValue('order')),
    );
    mateParams.set(name: 'order', init: order);
  }
}

/// class LexicalFocusOrder extends FocusOrder
class LexicalFocusOrder$Mate extends LexicalFocusOrder with Mate<LexicalFocusOrder$Mate> {
  /// LexicalFocusOrder LexicalFocusOrder(String order)
  LexicalFocusOrder$Mate(

      /// requiredParameters: String order
      String order)
      : super(order) {
    mateParams = Params(
      init: this,
      builder: (p) => LexicalFocusOrder$Mate(p.getValue('order')),
    );
    mateParams.set(name: 'order', init: order);
  }
}

/// class OrderedTraversalPolicy extends FocusTraversalPolicy with DirectionalFocusTraversalPolicyMixin
class OrderedTraversalPolicy$Mate extends OrderedTraversalPolicy with Mate<OrderedTraversalPolicy$Mate> {
  /// OrderedTraversalPolicy OrderedTraversalPolicy({FocusTraversalPolicy? secondary})
  OrderedTraversalPolicy$Mate(
      {
      /// optionalParameters: {FocusTraversalPolicy? secondary} , hasDefaultValue:false, defaultValueCode:null
      FocusTraversalPolicy? secondary})
      : super(secondary: secondary) {
    mateParams = Params(
      init: this,
      builder: (p) => OrderedTraversalPolicy$Mate(secondary: p.getValue('secondary')),
    );
    mateParams.set(name: 'secondary', init: secondary);
  }
}

/// class FocusTraversalOrder extends InheritedWidget
class FocusTraversalOrder$Mate extends FocusTraversalOrder with WidgetMate<FocusTraversalOrder$Mate> {
  /// FocusTraversalOrder FocusTraversalOrder({Key? key, required FocusOrder order, required Widget child})
  FocusTraversalOrder$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required FocusOrder order} , hasDefaultValue:false, defaultValueCode:null
    required FocusOrder order,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          order: order,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FocusTraversalOrder$Mate(
        key: p.getValue('key'),
        order: p.getValue('order'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'order', init: order);
    mateParams.set(name: 'child', init: child);
  }
}

/// class FocusTraversalGroup extends StatefulWidget
class FocusTraversalGroup$Mate extends FocusTraversalGroup with WidgetMate<FocusTraversalGroup$Mate> {
  /// FocusTraversalGroup FocusTraversalGroup({Key? key, FocusTraversalPolicy? policy, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, required Widget child})
  FocusTraversalGroup$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {FocusTraversalPolicy? policy} , hasDefaultValue:false, defaultValueCode:null
    FocusTraversalPolicy? policy,

    /// optionalParameters: {bool descendantsAreFocusable = true} , hasDefaultValue:true, defaultValueCode:true
    required bool descendantsAreFocusable,

    /// optionalParameters: {bool descendantsAreTraversable = true} , hasDefaultValue:true, defaultValueCode:true
    required bool descendantsAreTraversable,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          policy: policy,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FocusTraversalGroup$Mate(
        key: p.getValue('key'),
        policy: p.getValue('policy'),
        descendantsAreFocusable: p.getValue('descendantsAreFocusable'),
        descendantsAreTraversable: p.getValue('descendantsAreTraversable'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'policy', init: policy);
    mateParams.set(name: 'descendantsAreFocusable', init: descendantsAreFocusable);
    mateParams.set(name: 'descendantsAreTraversable', init: descendantsAreTraversable);
    mateParams.set(name: 'child', init: child);
  }
}

/// class RequestFocusIntent extends Intent
class RequestFocusIntent$Mate extends RequestFocusIntent with Mate<RequestFocusIntent$Mate> {
  /// RequestFocusIntent RequestFocusIntent(FocusNode focusNode)
  RequestFocusIntent$Mate(

      /// requiredParameters: FocusNode focusNode
      FocusNode focusNode)
      : super(focusNode) {
    mateParams = Params(
      init: this,
      builder: (p) => RequestFocusIntent$Mate(p.getValue('focusNode')),
    );
    mateParams.set(name: 'focusNode', init: focusNode);
  }
}

/// class DirectionalFocusIntent extends Intent
class DirectionalFocusIntent$Mate extends DirectionalFocusIntent with Mate<DirectionalFocusIntent$Mate> {
  /// DirectionalFocusIntent DirectionalFocusIntent(TraversalDirection direction, {bool ignoreTextFields = true})
  DirectionalFocusIntent$Mate(
    /// requiredParameters: TraversalDirection direction
    TraversalDirection direction, {
    /// optionalParameters: {bool ignoreTextFields = true} , hasDefaultValue:true, defaultValueCode:true
    required bool ignoreTextFields,
  }) : super(
          direction,
          ignoreTextFields: ignoreTextFields,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DirectionalFocusIntent$Mate(
        p.getValue('direction'),
        ignoreTextFields: p.getValue('ignoreTextFields'),
      ),
    );
    mateParams.set(name: 'direction', init: direction);
    mateParams.set(name: 'ignoreTextFields', init: ignoreTextFields);
  }
}

/// class ExcludeFocusTraversal extends StatelessWidget
class ExcludeFocusTraversal$Mate extends ExcludeFocusTraversal with WidgetMate<ExcludeFocusTraversal$Mate> {
  /// ExcludeFocusTraversal ExcludeFocusTraversal({Key? key, bool excluding = true, required Widget child})
  ExcludeFocusTraversal$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool excluding = true} , hasDefaultValue:true, defaultValueCode:true
    required bool excluding,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          excluding: excluding,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExcludeFocusTraversal$Mate(
        key: p.getValue('key'),
        excluding: p.getValue('excluding'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'excluding', init: excluding);
    mateParams.set(name: 'child', init: child);
  }
}
