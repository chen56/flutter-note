// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/modal_barrier.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/animation/animation.dart';

/// class ModalBarrier extends StatelessWidget
class ModalBarrier$Mate extends ModalBarrier with WidgetMate<ModalBarrier$Mate> {
  /// ModalBarrier ModalBarrier({Key? key, Color? color, bool dismissible = true, void Function()? onDismiss, String? semanticsLabel, bool? barrierSemanticsDismissible = true, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
  ModalBarrier$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Color? color}
    Color? color,

    /// param: {bool dismissible = true}
    required bool dismissible,

    /// param: {void Function()? onDismiss}
    VoidCallback? onDismiss,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {bool? barrierSemanticsDismissible = true}
    bool? barrierSemanticsDismissible,

    /// param: {ValueNotifier<EdgeInsets>? clipDetailsNotifier}
    ValueNotifier<EdgeInsets>? clipDetailsNotifier,

    /// param: {String? semanticsOnTapHint}
    String? semanticsOnTapHint,
  }) : super(
          key: key,
          color: color,
          dismissible: dismissible,
          onDismiss: onDismiss,
          semanticsLabel: semanticsLabel,
          barrierSemanticsDismissible: barrierSemanticsDismissible,
          clipDetailsNotifier: clipDetailsNotifier,
          semanticsOnTapHint: semanticsOnTapHint,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ModalBarrier$Mate(
        key: p.getValue('key'),
        color: p.getValue('color'),
        dismissible: p.getValue('dismissible'),
        onDismiss: p.getValue('onDismiss'),
        semanticsLabel: p.getValue('semanticsLabel'),
        barrierSemanticsDismissible: p.getValue('barrierSemanticsDismissible'),
        clipDetailsNotifier: p.getValue('clipDetailsNotifier'),
        semanticsOnTapHint: p.getValue('semanticsOnTapHint'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'dismissible', init: dismissible);
    mateParams.set(name: 'onDismiss', init: onDismiss);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'barrierSemanticsDismissible', init: barrierSemanticsDismissible);
    mateParams.set(name: 'clipDetailsNotifier', init: clipDetailsNotifier);
    mateParams.set(name: 'semanticsOnTapHint', init: semanticsOnTapHint);
  }
}

/// class AnimatedModalBarrier extends AnimatedWidget
class AnimatedModalBarrier$Mate extends AnimatedModalBarrier with WidgetMate<AnimatedModalBarrier$Mate> {
  /// AnimatedModalBarrier AnimatedModalBarrier({Key? key, required Animation<Color?> color, bool dismissible = true, String? semanticsLabel, bool? barrierSemanticsDismissible, void Function()? onDismiss, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
  AnimatedModalBarrier$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Animation<Color?> color}
    required Animation<Color?> color,

    /// param: {bool dismissible = true}
    required bool dismissible,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {bool? barrierSemanticsDismissible}
    bool? barrierSemanticsDismissible,

    /// param: {void Function()? onDismiss}
    VoidCallback? onDismiss,

    /// param: {ValueNotifier<EdgeInsets>? clipDetailsNotifier}
    ValueNotifier<EdgeInsets>? clipDetailsNotifier,

    /// param: {String? semanticsOnTapHint}
    String? semanticsOnTapHint,
  }) : super(
          key: key,
          color: color,
          dismissible: dismissible,
          semanticsLabel: semanticsLabel,
          barrierSemanticsDismissible: barrierSemanticsDismissible,
          onDismiss: onDismiss,
          clipDetailsNotifier: clipDetailsNotifier,
          semanticsOnTapHint: semanticsOnTapHint,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnimatedModalBarrier$Mate(
        key: p.getValue('key'),
        color: p.getValue('color'),
        dismissible: p.getValue('dismissible'),
        semanticsLabel: p.getValue('semanticsLabel'),
        barrierSemanticsDismissible: p.getValue('barrierSemanticsDismissible'),
        onDismiss: p.getValue('onDismiss'),
        clipDetailsNotifier: p.getValue('clipDetailsNotifier'),
        semanticsOnTapHint: p.getValue('semanticsOnTapHint'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'dismissible', init: dismissible);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'barrierSemanticsDismissible', init: barrierSemanticsDismissible);
    mateParams.set(name: 'onDismiss', init: onDismiss);
    mateParams.set(name: 'clipDetailsNotifier', init: clipDetailsNotifier);
    mateParams.set(name: 'semanticsOnTapHint', init: semanticsOnTapHint);
  }
}
