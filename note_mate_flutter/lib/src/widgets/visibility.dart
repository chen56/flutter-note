// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/visibility.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class Visibility extends StatelessWidget
class Visibility$Mate extends Visibility with WidgetMate<Visibility$Mate> {
  /// Visibility Visibility({Key? key, required Widget child, Widget replacement = const SizedBox.shrink(), bool visible = true, bool maintainState = false, bool maintainAnimation = false, bool maintainSize = false, bool maintainSemantics = false, bool maintainInteractivity = false})
  Visibility$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {Widget replacement = const SizedBox.shrink()}
    required Widget replacement,

    /// param: {bool visible = true}
    required bool visible,

    /// param: {bool maintainState = false}
    required bool maintainState,

    /// param: {bool maintainAnimation = false}
    required bool maintainAnimation,

    /// param: {bool maintainSize = false}
    required bool maintainSize,

    /// param: {bool maintainSemantics = false}
    required bool maintainSemantics,

    /// param: {bool maintainInteractivity = false}
    required bool maintainInteractivity,
  }) : super(
          key: key,
          child: child,
          replacement: replacement,
          visible: visible,
          maintainState: maintainState,
          maintainAnimation: maintainAnimation,
          maintainSize: maintainSize,
          maintainSemantics: maintainSemantics,
          maintainInteractivity: maintainInteractivity,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Visibility$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        replacement: p.getValue('replacement'),
        visible: p.getValue('visible'),
        maintainState: p.getValue('maintainState'),
        maintainAnimation: p.getValue('maintainAnimation'),
        maintainSize: p.getValue('maintainSize'),
        maintainSemantics: p.getValue('maintainSemantics'),
        maintainInteractivity: p.getValue('maintainInteractivity'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'replacement', init: replacement);
    mateParams.set(name: 'visible', init: visible);
    mateParams.set(name: 'maintainState', init: maintainState);
    mateParams.set(name: 'maintainAnimation', init: maintainAnimation);
    mateParams.set(name: 'maintainSize', init: maintainSize);
    mateParams.set(name: 'maintainSemantics', init: maintainSemantics);
    mateParams.set(name: 'maintainInteractivity', init: maintainInteractivity);
  }

  /// Visibility Visibility.maintain({Key? key, required Widget child, Widget replacement = const SizedBox.shrink(), bool visible = true})
  Visibility$Mate.maintain({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {Widget replacement = const SizedBox.shrink()}
    required Widget replacement,

    /// param: {bool visible = true}
    required bool visible,
  }) : super.maintain(
          key: key,
          child: child,
          replacement: replacement,
          visible: visible,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Visibility$Mate.maintain(
        key: p.getValue('key'),
        child: p.getValue('child'),
        replacement: p.getValue('replacement'),
        visible: p.getValue('visible'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'replacement', init: replacement);
    mateParams.set(name: 'visible', init: visible);
  }
}

/// class SliverVisibility extends StatelessWidget
class SliverVisibility$Mate extends SliverVisibility with WidgetMate<SliverVisibility$Mate> {
  /// SliverVisibility SliverVisibility({Key? key, required Widget sliver, Widget replacementSliver = const SliverToBoxAdapter(), bool visible = true, bool maintainState = false, bool maintainAnimation = false, bool maintainSize = false, bool maintainSemantics = false, bool maintainInteractivity = false})
  SliverVisibility$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget sliver}
    required Widget sliver,

    /// param: {Widget replacementSliver = const SliverToBoxAdapter()}
    required Widget replacementSliver,

    /// param: {bool visible = true}
    required bool visible,

    /// param: {bool maintainState = false}
    required bool maintainState,

    /// param: {bool maintainAnimation = false}
    required bool maintainAnimation,

    /// param: {bool maintainSize = false}
    required bool maintainSize,

    /// param: {bool maintainSemantics = false}
    required bool maintainSemantics,

    /// param: {bool maintainInteractivity = false}
    required bool maintainInteractivity,
  }) : super(
          key: key,
          sliver: sliver,
          replacementSliver: replacementSliver,
          visible: visible,
          maintainState: maintainState,
          maintainAnimation: maintainAnimation,
          maintainSize: maintainSize,
          maintainSemantics: maintainSemantics,
          maintainInteractivity: maintainInteractivity,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverVisibility$Mate(
        key: p.getValue('key'),
        sliver: p.getValue('sliver'),
        replacementSliver: p.getValue('replacementSliver'),
        visible: p.getValue('visible'),
        maintainState: p.getValue('maintainState'),
        maintainAnimation: p.getValue('maintainAnimation'),
        maintainSize: p.getValue('maintainSize'),
        maintainSemantics: p.getValue('maintainSemantics'),
        maintainInteractivity: p.getValue('maintainInteractivity'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'sliver', init: sliver);
    mateParams.set(name: 'replacementSliver', init: replacementSliver);
    mateParams.set(name: 'visible', init: visible);
    mateParams.set(name: 'maintainState', init: maintainState);
    mateParams.set(name: 'maintainAnimation', init: maintainAnimation);
    mateParams.set(name: 'maintainSize', init: maintainSize);
    mateParams.set(name: 'maintainSemantics', init: maintainSemantics);
    mateParams.set(name: 'maintainInteractivity', init: maintainInteractivity);
  }

  /// SliverVisibility SliverVisibility.maintain({Key? key, required Widget sliver, Widget replacementSliver = const SliverToBoxAdapter(), bool visible = true})
  SliverVisibility$Mate.maintain({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget sliver}
    required Widget sliver,

    /// param: {Widget replacementSliver = const SliverToBoxAdapter()}
    required Widget replacementSliver,

    /// param: {bool visible = true}
    required bool visible,
  }) : super.maintain(
          key: key,
          sliver: sliver,
          replacementSliver: replacementSliver,
          visible: visible,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverVisibility$Mate.maintain(
        key: p.getValue('key'),
        sliver: p.getValue('sliver'),
        replacementSliver: p.getValue('replacementSliver'),
        visible: p.getValue('visible'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'sliver', init: sliver);
    mateParams.set(name: 'replacementSliver', init: replacementSliver);
    mateParams.set(name: 'visible', init: visible);
  }
}
