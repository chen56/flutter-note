// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/sliver_prototype_extent_list.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';

/// class SliverPrototypeExtentList extends SliverMultiBoxAdaptorWidget
class SliverPrototypeExtentList$Mate extends SliverPrototypeExtentList with WidgetMate<SliverPrototypeExtentList$Mate> {
  /// SliverPrototypeExtentList SliverPrototypeExtentList({Key? key, required SliverChildDelegate delegate, required Widget prototypeItem})
  SliverPrototypeExtentList$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required SliverChildDelegate delegate}
    required SliverChildDelegate delegate,

    /// param: {required Widget prototypeItem}
    required Widget prototypeItem,
  }) : super(
          key: key,
          delegate: delegate,
          prototypeItem: prototypeItem,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverPrototypeExtentList$Mate(
        key: p.getValue('key'),
        delegate: p.getValue('delegate'),
        prototypeItem: p.getValue('prototypeItem'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'delegate', init: delegate);
    mateParams.set(name: 'prototypeItem', init: prototypeItem);
  }

  /// SliverPrototypeExtentList SliverPrototypeExtentList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, required Widget prototypeItem, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverPrototypeExtentList$Mate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {required Widget prototypeItem}
    required Widget prototypeItem,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.builder(
          key: key,
          itemBuilder: itemBuilder,
          prototypeItem: prototypeItem,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverPrototypeExtentList$Mate.builder(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        prototypeItem: p.getValue('prototypeItem'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'prototypeItem', init: prototypeItem);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }

  /// SliverPrototypeExtentList SliverPrototypeExtentList.list({Key? key, required List<Widget> children, required Widget prototypeItem, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverPrototypeExtentList$Mate.list({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<Widget> children}
    required List<Widget> children,

    /// param: {required Widget prototypeItem}
    required Widget prototypeItem,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,
  }) : super.list(
          key: key,
          children: children,
          prototypeItem: prototypeItem,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverPrototypeExtentList$Mate.list(
        key: p.getValue('key'),
        children: p.getValue('children'),
        prototypeItem: p.getValue('prototypeItem'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'prototypeItem', init: prototypeItem);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
  }
}
