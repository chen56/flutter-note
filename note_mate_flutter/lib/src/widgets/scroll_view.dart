// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/rendering/sliver_grid.dart';

/// class CustomScrollView extends ScrollView
class CustomScrollView$Mate extends CustomScrollView with WidgetMate<CustomScrollView$Mate> {
  /// CustomScrollView CustomScrollView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, ScrollBehavior? scrollBehavior, bool shrinkWrap = false, Key? center, double anchor = 0.0, double? cacheExtent, List<Widget> slivers = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  CustomScrollView$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {ScrollBehavior? scrollBehavior}
    ScrollBehavior? scrollBehavior,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {Key? center}
    Key? center,

    /// param: {double anchor = 0.0}
    required double anchor,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {List<Widget> slivers = const <Widget>[]}
    required List<Widget> slivers,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          scrollBehavior: scrollBehavior,
          shrinkWrap: shrinkWrap,
          center: center,
          anchor: anchor,
          cacheExtent: cacheExtent,
          slivers: slivers,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CustomScrollView$Mate(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        scrollBehavior: p.getValue('scrollBehavior'),
        shrinkWrap: p.getValue('shrinkWrap'),
        center: p.getValue('center'),
        anchor: p.getValue('anchor'),
        cacheExtent: p.getValue('cacheExtent'),
        slivers: p.getValue('slivers'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'scrollBehavior', init: scrollBehavior);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'center', init: center);
    mateParams.set(name: 'anchor', init: anchor);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'slivers', init: slivers);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class ListView extends BoxScrollView
class ListView$Mate extends ListView with WidgetMate<ListView$Mate> {
  /// ListView ListView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {double? itemExtent}
    double? itemExtent,

    /// param: {Widget? prototypeItem}
    Widget? prototypeItem,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListView$Mate(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        itemExtent: p.getValue('itemExtent'),
        prototypeItem: p.getValue('prototypeItem'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        children: p.getValue('children'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'prototypeItem', init: prototypeItem);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }

  /// ListView ListView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {double? itemExtent}
    double? itemExtent,

    /// param: {Widget? prototypeItem}
    Widget? prototypeItem,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListView$Mate.builder(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        itemExtent: p.getValue('itemExtent'),
        prototypeItem: p.getValue('prototypeItem'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'prototypeItem', init: prototypeItem);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }

  /// ListView ListView.separated({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, required Widget Function(BuildContext, int) separatorBuilder, required int itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.separated({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {required Widget Function(BuildContext, int) separatorBuilder}
    required IndexedWidgetBuilder separatorBuilder,

    /// param: {required int itemCount}
    required int itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.separated(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          separatorBuilder: separatorBuilder,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListView$Mate.separated(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        separatorBuilder: p.getValue('separatorBuilder'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'separatorBuilder', init: separatorBuilder);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }

  /// ListView ListView.custom({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, required SliverChildDelegate childrenDelegate, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.custom({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {double? itemExtent}
    double? itemExtent,

    /// param: {Widget? prototypeItem}
    Widget? prototypeItem,

    /// param: {required SliverChildDelegate childrenDelegate}
    required SliverChildDelegate childrenDelegate,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          childrenDelegate: childrenDelegate,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListView$Mate.custom(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        itemExtent: p.getValue('itemExtent'),
        prototypeItem: p.getValue('prototypeItem'),
        childrenDelegate: p.getValue('childrenDelegate'),
        cacheExtent: p.getValue('cacheExtent'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'itemExtent', init: itemExtent);
    mateParams.set(name: 'prototypeItem', init: prototypeItem);
    mateParams.set(name: 'childrenDelegate', init: childrenDelegate);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class GridView extends BoxScrollView
class GridView$Mate extends GridView with WidgetMate<GridView$Mate> {
  /// GridView GridView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Clip clipBehavior = Clip.hardEdge, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId})
  GridView$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          clipBehavior: clipBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => GridView$Mate(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        gridDelegate: p.getValue('gridDelegate'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        children: p.getValue('children'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        clipBehavior: p.getValue('clipBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
  }

  /// GridView GridView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.builder({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,

    /// param: {required Widget? Function(BuildContext, int) itemBuilder}
    required NullableIndexedWidgetBuilder itemBuilder,

    /// param: {int? Function(Key)? findChildIndexCallback}
    ChildIndexGetter? findChildIndexCallback,

    /// param: {int? itemCount}
    int? itemCount,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => GridView$Mate.builder(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        gridDelegate: p.getValue('gridDelegate'),
        itemBuilder: p.getValue('itemBuilder'),
        findChildIndexCallback: p.getValue('findChildIndexCallback'),
        itemCount: p.getValue('itemCount'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'findChildIndexCallback', init: findChildIndexCallback);
    mateParams.set(name: 'itemCount', init: itemCount);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }

  /// GridView GridView.custom({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required SliverChildDelegate childrenDelegate, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.custom({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required SliverGridDelegate gridDelegate}
    required SliverGridDelegate gridDelegate,

    /// param: {required SliverChildDelegate childrenDelegate}
    required SliverChildDelegate childrenDelegate,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          childrenDelegate: childrenDelegate,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => GridView$Mate.custom(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        gridDelegate: p.getValue('gridDelegate'),
        childrenDelegate: p.getValue('childrenDelegate'),
        cacheExtent: p.getValue('cacheExtent'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'gridDelegate', init: gridDelegate);
    mateParams.set(name: 'childrenDelegate', init: childrenDelegate);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }

  /// GridView GridView.count({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.count({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required int crossAxisCount}
    required int crossAxisCount,

    /// param: {double mainAxisSpacing = 0.0}
    required double mainAxisSpacing,

    /// param: {double crossAxisSpacing = 0.0}
    required double crossAxisSpacing,

    /// param: {double childAspectRatio = 1.0}
    required double childAspectRatio,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.count(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => GridView$Mate.count(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        crossAxisCount: p.getValue('crossAxisCount'),
        mainAxisSpacing: p.getValue('mainAxisSpacing'),
        crossAxisSpacing: p.getValue('crossAxisSpacing'),
        childAspectRatio: p.getValue('childAspectRatio'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        children: p.getValue('children'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'crossAxisCount', init: crossAxisCount);
    mateParams.set(name: 'mainAxisSpacing', init: mainAxisSpacing);
    mateParams.set(name: 'crossAxisSpacing', init: crossAxisSpacing);
    mateParams.set(name: 'childAspectRatio', init: childAspectRatio);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }

  /// GridView GridView.extent({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.extent({
    /// param: {Key? key}
    Key? key,

    /// param: {Axis scrollDirection = Axis.vertical}
    required Axis scrollDirection,

    /// param: {bool reverse = false}
    required bool reverse,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? primary}
    bool? primary,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {bool shrinkWrap = false}
    required bool shrinkWrap,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required double maxCrossAxisExtent}
    required double maxCrossAxisExtent,

    /// param: {double mainAxisSpacing = 0.0}
    required double mainAxisSpacing,

    /// param: {double crossAxisSpacing = 0.0}
    required double crossAxisSpacing,

    /// param: {double childAspectRatio = 1.0}
    required double childAspectRatio,

    /// param: {bool addAutomaticKeepAlives = true}
    required bool addAutomaticKeepAlives,

    /// param: {bool addRepaintBoundaries = true}
    required bool addRepaintBoundaries,

    /// param: {bool addSemanticIndexes = true}
    required bool addSemanticIndexes,

    /// param: {double? cacheExtent}
    double? cacheExtent,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,

    /// param: {int? semanticChildCount}
    int? semanticChildCount,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual}
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// param: {String? restorationId}
    String? restorationId,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super.extent(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          maxCrossAxisExtent: maxCrossAxisExtent,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => GridView$Mate.extent(
        key: p.getValue('key'),
        scrollDirection: p.getValue('scrollDirection'),
        reverse: p.getValue('reverse'),
        controller: p.getValue('controller'),
        primary: p.getValue('primary'),
        physics: p.getValue('physics'),
        shrinkWrap: p.getValue('shrinkWrap'),
        padding: p.getValue('padding'),
        maxCrossAxisExtent: p.getValue('maxCrossAxisExtent'),
        mainAxisSpacing: p.getValue('mainAxisSpacing'),
        crossAxisSpacing: p.getValue('crossAxisSpacing'),
        childAspectRatio: p.getValue('childAspectRatio'),
        addAutomaticKeepAlives: p.getValue('addAutomaticKeepAlives'),
        addRepaintBoundaries: p.getValue('addRepaintBoundaries'),
        addSemanticIndexes: p.getValue('addSemanticIndexes'),
        cacheExtent: p.getValue('cacheExtent'),
        children: p.getValue('children'),
        semanticChildCount: p.getValue('semanticChildCount'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        keyboardDismissBehavior: p.getValue('keyboardDismissBehavior'),
        restorationId: p.getValue('restorationId'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'scrollDirection', init: scrollDirection);
    mateParams.set(name: 'reverse', init: reverse);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'physics', init: physics);
    mateParams.set(name: 'shrinkWrap', init: shrinkWrap);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'maxCrossAxisExtent', init: maxCrossAxisExtent);
    mateParams.set(name: 'mainAxisSpacing', init: mainAxisSpacing);
    mateParams.set(name: 'crossAxisSpacing', init: crossAxisSpacing);
    mateParams.set(name: 'childAspectRatio', init: childAspectRatio);
    mateParams.set(name: 'addAutomaticKeepAlives', init: addAutomaticKeepAlives);
    mateParams.set(name: 'addRepaintBoundaries', init: addRepaintBoundaries);
    mateParams.set(name: 'addSemanticIndexes', init: addSemanticIndexes);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'semanticChildCount', init: semanticChildCount);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'keyboardDismissBehavior', init: keyboardDismissBehavior);
    mateParams.set(name: 'restorationId', init: restorationId);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}
