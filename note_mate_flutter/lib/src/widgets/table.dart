// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/widgets/table.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/rendering/table.dart';
import 'dart:ui';
import 'package:flutter/src/rendering/table_border.dart';

/// class TableRow
class TableRow$Mate extends TableRow with Mate<TableRow$Mate> {
  /// TableRow TableRow({LocalKey? key, Decoration? decoration, List<Widget> children = const <Widget>[]})
  TableRow$Mate({
    /// param: {LocalKey? key}
    LocalKey? key,

    /// param: {Decoration? decoration}
    Decoration? decoration,

    /// param: {List<Widget> children = const <Widget>[]}
    required List<Widget> children,
  }) : super(
          key: key,
          decoration: decoration,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TableRow$Mate(
        key: p.getValue('key'),
        decoration: p.getValue('decoration'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'children', init: children);
  }
}

/// class Table extends RenderObjectWidget
class Table$Mate extends Table with WidgetMate<Table$Mate> {
  /// Table Table({Key? key, List<TableRow> children = const <TableRow>[], Map<int, TableColumnWidth>? columnWidths, TableColumnWidth defaultColumnWidth = const FlexColumnWidth(), TextDirection? textDirection, TableBorder? border, TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top, TextBaseline? textBaseline})
  Table$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {List<TableRow> children = const <TableRow>[]}
    required List<TableRow> children,

    /// param: {Map<int, TableColumnWidth>? columnWidths}
    Map<int, TableColumnWidth>? columnWidths,

    /// param: {TableColumnWidth defaultColumnWidth = const FlexColumnWidth()}
    required TableColumnWidth defaultColumnWidth,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {TableBorder? border}
    TableBorder? border,

    /// param: {TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top}
    required TableCellVerticalAlignment defaultVerticalAlignment,

    /// param: {TextBaseline? textBaseline}
    TextBaseline? textBaseline,
  }) : super(
          key: key,
          children: children,
          columnWidths: columnWidths,
          defaultColumnWidth: defaultColumnWidth,
          textDirection: textDirection,
          border: border,
          defaultVerticalAlignment: defaultVerticalAlignment,
          textBaseline: textBaseline,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Table$Mate(
        key: p.getValue('key'),
        children: p.getValue('children'),
        columnWidths: p.getValue('columnWidths'),
        defaultColumnWidth: p.getValue('defaultColumnWidth'),
        textDirection: p.getValue('textDirection'),
        border: p.getValue('border'),
        defaultVerticalAlignment: p.getValue('defaultVerticalAlignment'),
        textBaseline: p.getValue('textBaseline'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'columnWidths', init: columnWidths);
    mateParams.set(name: 'defaultColumnWidth', init: defaultColumnWidth);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'defaultVerticalAlignment', init: defaultVerticalAlignment);
    mateParams.set(name: 'textBaseline', init: textBaseline);
  }
}

/// class TableCell extends ParentDataWidget<TableCellParentData>
class TableCell$Mate extends TableCell with WidgetMate<TableCell$Mate> {
  /// TableCell TableCell({Key? key, TableCellVerticalAlignment? verticalAlignment, required Widget child})
  TableCell$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {TableCellVerticalAlignment? verticalAlignment}
    TableCellVerticalAlignment? verticalAlignment,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          verticalAlignment: verticalAlignment,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TableCell$Mate(
        key: p.getValue('key'),
        verticalAlignment: p.getValue('verticalAlignment'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'verticalAlignment', init: verticalAlignment);
    mateParams.set(name: 'child', init: child);
  }
}
