// /// Generated by gen_maters.dart, please don't edit!

import 'dart:core';
import 'package:flutter/src/widgets/annotated_region.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class AnnotatedRegion<T extends Object> extends SingleChildRenderObjectWidget
class AnnotatedRegion$Mate<T extends Object> extends AnnotatedRegion<T> with WidgetMate<AnnotatedRegion$Mate> {
  /// AnnotatedRegion<T> AnnotatedRegion({Key? key, required Widget child, required T value, bool sized = true})
  AnnotatedRegion$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {required T value} , hasDefaultValue:false, defaultValueCode:null
    required T value,

    /// optionalParameters: {bool sized = true} , hasDefaultValue:true, defaultValueCode:true
    required bool sized,
  }) : super(
          key: key,
          child: child,
          value: value,
          sized: sized,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnnotatedRegion$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        value: p.getValue('value'),
        sized: p.getValue('sized'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'sized', init: sized);
  }
}
