// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/physics/spring_simulation.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/physics/tolerance.dart';
export 'tolerance.dart' show Tolerance;

/// class SpringDescription
class SpringDescription$Mate extends SpringDescription with Mate<SpringDescription$Mate> {
  /// SpringDescription SpringDescription({required double mass, required double stiffness, required double damping})
  SpringDescription$Mate({
    /// param: {required double mass}
    required double mass,

    /// param: {required double stiffness}
    required double stiffness,

    /// param: {required double damping}
    required double damping,
  }) : super(
          mass: mass,
          stiffness: stiffness,
          damping: damping,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SpringDescription$Mate(
        mass: p.getValue('mass'),
        stiffness: p.getValue('stiffness'),
        damping: p.getValue('damping'),
      ),
    );
    mateParams.set(name: 'mass', init: mass);
    mateParams.set(name: 'stiffness', init: stiffness);
    mateParams.set(name: 'damping', init: damping);
  }

  /// SpringDescription SpringDescription.withDampingRatio({required double mass, required double stiffness, double ratio = 1.0})
  SpringDescription$Mate.withDampingRatio({
    /// param: {required double mass}
    required double mass,

    /// param: {required double stiffness}
    required double stiffness,

    /// param: {double ratio = 1.0}
    required double ratio,
  }) : super.withDampingRatio(
          mass: mass,
          stiffness: stiffness,
          ratio: ratio,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SpringDescription$Mate.withDampingRatio(
        mass: p.getValue('mass'),
        stiffness: p.getValue('stiffness'),
        ratio: p.getValue('ratio'),
      ),
    );
    mateParams.set(name: 'mass', init: mass);
    mateParams.set(name: 'stiffness', init: stiffness);
    mateParams.set(name: 'ratio', init: ratio);
  }
}

/// class SpringSimulation extends Simulation
class SpringSimulation$Mate extends SpringSimulation with Mate<SpringSimulation$Mate> {
  /// SpringSimulation SpringSimulation(SpringDescription spring, double start, double end, double velocity, {Tolerance tolerance = Tolerance.defaultTolerance})
  SpringSimulation$Mate(
    /// param: SpringDescription spring
    SpringDescription spring,

    /// param: double start
    double start,

    /// param: double end
    double end,

    /// param: double velocity
    double velocity, {
    /// param: {Tolerance tolerance = Tolerance.defaultTolerance}
    required Tolerance tolerance,
  }) : super(
          spring,
          start,
          end,
          velocity,
          tolerance: tolerance,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SpringSimulation$Mate(
        p.getValue('spring'),
        p.getValue('start'),
        p.getValue('end'),
        p.getValue('velocity'),
        tolerance: p.getValue('tolerance'),
      ),
    );
    mateParams.set(name: 'spring', init: spring);
    mateParams.set(name: 'start', init: start);
    mateParams.set(name: 'end', init: end);
    mateParams.set(name: 'velocity', init: velocity);
    mateParams.set(name: 'tolerance', init: tolerance);
  }
}

/// class ScrollSpringSimulation extends SpringSimulation
class ScrollSpringSimulation$Mate extends ScrollSpringSimulation with Mate<ScrollSpringSimulation$Mate> {
  /// ScrollSpringSimulation ScrollSpringSimulation(SpringDescription spring, double start, double end, double velocity, {Tolerance tolerance = Tolerance.defaultTolerance})
  ScrollSpringSimulation$Mate(
    /// param: SpringDescription spring
    SpringDescription spring,

    /// param: double start
    double start,

    /// param: double end
    double end,

    /// param: double velocity
    double velocity, {
    /// param: {Tolerance tolerance = Tolerance.defaultTolerance}
    required Tolerance tolerance,
  }) : super(
          spring,
          start,
          end,
          velocity,
          tolerance: tolerance,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollSpringSimulation$Mate(
        p.getValue('spring'),
        p.getValue('start'),
        p.getValue('end'),
        p.getValue('velocity'),
        tolerance: p.getValue('tolerance'),
      ),
    );
    mateParams.set(name: 'spring', init: spring);
    mateParams.set(name: 'start', init: start);
    mateParams.set(name: 'end', init: end);
    mateParams.set(name: 'velocity', init: velocity);
    mateParams.set(name: 'tolerance', init: tolerance);
  }
}
