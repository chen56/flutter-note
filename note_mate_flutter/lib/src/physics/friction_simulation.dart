// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/physics/friction_simulation.dart';
import 'dart:core';
import 'package:flutter/src/physics/tolerance.dart';
import 'package:note/mate.dart';

/// class FrictionSimulation extends Simulation
class FrictionSimulation$Mate extends FrictionSimulation with Mate<FrictionSimulation$Mate> {
  /// FrictionSimulation FrictionSimulation(double drag, double position, double velocity, {Tolerance tolerance = Tolerance.defaultTolerance, double constantDeceleration = 0})
  FrictionSimulation$Mate(
    /// requiredParameters: double drag
    double drag,

    /// requiredParameters: double position
    double position,

    /// requiredParameters: double velocity
    double velocity, {
    /// optionalParameters: {Tolerance tolerance = Tolerance.defaultTolerance} , hasDefaultValue:true, defaultValueCode:Tolerance.defaultTolerance
    required Tolerance tolerance,

    /// optionalParameters: {double constantDeceleration = 0} , hasDefaultValue:true, defaultValueCode:0
    required double constantDeceleration,
  }) : super(
          drag,
          position,
          velocity,
          tolerance: tolerance,
          constantDeceleration: constantDeceleration,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FrictionSimulation$Mate(
        p.getValue('drag'),
        p.getValue('position'),
        p.getValue('velocity'),
        tolerance: p.getValue('tolerance'),
        constantDeceleration: p.getValue('constantDeceleration'),
      ),
    );
    mateParams.set(name: 'drag', init: drag);
    mateParams.set(name: 'position', init: position);
    mateParams.set(name: 'velocity', init: velocity);
    mateParams.set(name: 'tolerance', init: tolerance);
    mateParams.set(name: 'constantDeceleration', init: constantDeceleration);
  }
}

/// class BoundedFrictionSimulation extends FrictionSimulation
class BoundedFrictionSimulation$Mate extends BoundedFrictionSimulation with Mate<BoundedFrictionSimulation$Mate> {
  /// BoundedFrictionSimulation BoundedFrictionSimulation(double drag, double position, double velocity, double _minX, double _maxX)
  BoundedFrictionSimulation$Mate(
    /// requiredParameters: double drag
    double drag,

    /// requiredParameters: double position
    double position,

    /// requiredParameters: double velocity
    double velocity,

    /// requiredParameters: double _minX
    double _minX,

    /// requiredParameters: double _maxX
    double _maxX,
  ) : super(
          drag,
          position,
          velocity,
          _minX,
          _maxX,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BoundedFrictionSimulation$Mate(
        p.getValue('drag'),
        p.getValue('position'),
        p.getValue('velocity'),
        p.getValue('_minX'),
        p.getValue('_maxX'),
      ),
    );
    mateParams.set(name: 'drag', init: drag);
    mateParams.set(name: 'position', init: position);
    mateParams.set(name: 'velocity', init: velocity);
    mateParams.set(name: '_minX', init: _minX);
    mateParams.set(name: '_maxX', init: _maxX);
  }
}
