// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/rendering/table.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/rendering/table_border.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/rendering/box.dart';

/// class IntrinsicColumnWidth extends TableColumnWidth
class IntrinsicColumnWidth$Mate extends IntrinsicColumnWidth with Mate<IntrinsicColumnWidth$Mate> {
  /// IntrinsicColumnWidth IntrinsicColumnWidth({double? flex})
  IntrinsicColumnWidth$Mate(
      {
      /// param: {double? flex}
      double? flex})
      : super(flex: flex) {
    mateParams = Params(
      init: this,
      builder: (p) => IntrinsicColumnWidth$Mate(flex: p.getValue('flex')),
    );
    mateParams.set(name: 'flex', init: flex);
  }
}

/// class FixedColumnWidth extends TableColumnWidth
class FixedColumnWidth$Mate extends FixedColumnWidth with Mate<FixedColumnWidth$Mate> {
  /// FixedColumnWidth FixedColumnWidth(double value)
  FixedColumnWidth$Mate(

      /// param: double value
      double value)
      : super(value) {
    mateParams = Params(
      init: this,
      builder: (p) => FixedColumnWidth$Mate(p.getValue('value')),
    );
    mateParams.set(name: 'value', init: value);
  }
}

/// class FractionColumnWidth extends TableColumnWidth
class FractionColumnWidth$Mate extends FractionColumnWidth with Mate<FractionColumnWidth$Mate> {
  /// FractionColumnWidth FractionColumnWidth(double value)
  FractionColumnWidth$Mate(

      /// param: double value
      double value)
      : super(value) {
    mateParams = Params(
      init: this,
      builder: (p) => FractionColumnWidth$Mate(p.getValue('value')),
    );
    mateParams.set(name: 'value', init: value);
  }
}

/// class FlexColumnWidth extends TableColumnWidth
class FlexColumnWidth$Mate extends FlexColumnWidth with Mate<FlexColumnWidth$Mate> {
  /// FlexColumnWidth FlexColumnWidth([double value = 1.0])
  FlexColumnWidth$Mate(

      /// param: [double value = 1.0]
      double value)
      : super(value) {
    mateParams = Params(
      init: this,
      builder: (p) => FlexColumnWidth$Mate(p.getValue('value')),
    );
    mateParams.set(name: 'value', init: value);
  }
}

/// class MaxColumnWidth extends TableColumnWidth
class MaxColumnWidth$Mate extends MaxColumnWidth with Mate<MaxColumnWidth$Mate> {
  /// MaxColumnWidth MaxColumnWidth(TableColumnWidth a, TableColumnWidth b)
  MaxColumnWidth$Mate(
    /// param: TableColumnWidth a
    TableColumnWidth a,

    /// param: TableColumnWidth b
    TableColumnWidth b,
  ) : super(
          a,
          b,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MaxColumnWidth$Mate(
        p.getValue('a'),
        p.getValue('b'),
      ),
    );
    mateParams.set(name: 'a', init: a);
    mateParams.set(name: 'b', init: b);
  }
}

/// class MinColumnWidth extends TableColumnWidth
class MinColumnWidth$Mate extends MinColumnWidth with Mate<MinColumnWidth$Mate> {
  /// MinColumnWidth MinColumnWidth(TableColumnWidth a, TableColumnWidth b)
  MinColumnWidth$Mate(
    /// param: TableColumnWidth a
    TableColumnWidth a,

    /// param: TableColumnWidth b
    TableColumnWidth b,
  ) : super(
          a,
          b,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MinColumnWidth$Mate(
        p.getValue('a'),
        p.getValue('b'),
      ),
    );
    mateParams.set(name: 'a', init: a);
    mateParams.set(name: 'b', init: b);
  }
}

/// class RenderTable extends RenderBox
class RenderTable$Mate extends RenderTable with Mate<RenderTable$Mate> {
  /// RenderTable RenderTable({int? columns, int? rows, Map<int, TableColumnWidth>? columnWidths, TableColumnWidth defaultColumnWidth = const FlexColumnWidth(), required TextDirection textDirection, TableBorder? border, List<Decoration?>? rowDecorations, ImageConfiguration configuration = ImageConfiguration.empty, TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top, TextBaseline? textBaseline, List<List<RenderBox>>? children})
  RenderTable$Mate({
    /// param: {int? columns}
    int? columns,

    /// param: {int? rows}
    int? rows,

    /// param: {Map<int, TableColumnWidth>? columnWidths}
    Map<int, TableColumnWidth>? columnWidths,

    /// param: {TableColumnWidth defaultColumnWidth = const FlexColumnWidth()}
    required TableColumnWidth defaultColumnWidth,

    /// param: {required TextDirection textDirection}
    required TextDirection textDirection,

    /// param: {TableBorder? border}
    TableBorder? border,

    /// param: {List<Decoration?>? rowDecorations}
    List<Decoration?>? rowDecorations,

    /// param: {ImageConfiguration configuration = ImageConfiguration.empty}
    required ImageConfiguration configuration,

    /// param: {TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top}
    required TableCellVerticalAlignment defaultVerticalAlignment,

    /// param: {TextBaseline? textBaseline}
    TextBaseline? textBaseline,

    /// param: {List<List<RenderBox>>? children}
    List<List<RenderBox>>? children,
  }) : super(
          columns: columns,
          rows: rows,
          columnWidths: columnWidths,
          defaultColumnWidth: defaultColumnWidth,
          textDirection: textDirection,
          border: border,
          rowDecorations: rowDecorations,
          configuration: configuration,
          defaultVerticalAlignment: defaultVerticalAlignment,
          textBaseline: textBaseline,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderTable$Mate(
        columns: p.getValue('columns'),
        rows: p.getValue('rows'),
        columnWidths: p.getValue('columnWidths'),
        defaultColumnWidth: p.getValue('defaultColumnWidth'),
        textDirection: p.getValue('textDirection'),
        border: p.getValue('border'),
        rowDecorations: p.getValue('rowDecorations'),
        configuration: p.getValue('configuration'),
        defaultVerticalAlignment: p.getValue('defaultVerticalAlignment'),
        textBaseline: p.getValue('textBaseline'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'columns', init: columns);
    mateParams.set(name: 'rows', init: rows);
    mateParams.set(name: 'columnWidths', init: columnWidths);
    mateParams.set(name: 'defaultColumnWidth', init: defaultColumnWidth);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'rowDecorations', init: rowDecorations);
    mateParams.set(name: 'configuration', init: configuration);
    mateParams.set(name: 'defaultVerticalAlignment', init: defaultVerticalAlignment);
    mateParams.set(name: 'textBaseline', init: textBaseline);
    mateParams.set(name: 'children', init: children);
  }
}
