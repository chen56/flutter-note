// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/rendering/platform_view.dart';
import 'package:flutter/src/services/platform_views.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:note/mate.dart';

/// class RenderAndroidView extends PlatformViewRenderBox
class RenderAndroidView$Mate extends RenderAndroidView with Mate<RenderAndroidView$Mate> {
  /// RenderAndroidView RenderAndroidView({required AndroidViewController viewController, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers, Clip clipBehavior = Clip.hardEdge})
  RenderAndroidView$Mate({
    /// param: {required AndroidViewController viewController}
    required AndroidViewController viewController,

    /// param: {required PlatformViewHitTestBehavior hitTestBehavior}
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// param: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers}
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          viewController: viewController,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderAndroidView$Mate(
        viewController: p.getValue('viewController'),
        hitTestBehavior: p.getValue('hitTestBehavior'),
        gestureRecognizers: p.getValue('gestureRecognizers'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'viewController', init: viewController);
    mateParams.set(name: 'hitTestBehavior', init: hitTestBehavior);
    mateParams.set(name: 'gestureRecognizers', init: gestureRecognizers);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class RenderUiKitView extends RenderBox
class RenderUiKitView$Mate extends RenderUiKitView with Mate<RenderUiKitView$Mate> {
  /// RenderUiKitView RenderUiKitView({required UiKitViewController viewController, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  RenderUiKitView$Mate({
    /// param: {required UiKitViewController viewController}
    required UiKitViewController viewController,

    /// param: {required PlatformViewHitTestBehavior hitTestBehavior}
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// param: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers}
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) : super(
          viewController: viewController,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderUiKitView$Mate(
        viewController: p.getValue('viewController'),
        hitTestBehavior: p.getValue('hitTestBehavior'),
        gestureRecognizers: p.getValue('gestureRecognizers'),
      ),
    );
    mateParams.set(name: 'viewController', init: viewController);
    mateParams.set(name: 'hitTestBehavior', init: hitTestBehavior);
    mateParams.set(name: 'gestureRecognizers', init: gestureRecognizers);
  }
}

/// class PlatformViewRenderBox extends RenderBox with _PlatformViewGestureMixin
class PlatformViewRenderBox$Mate extends PlatformViewRenderBox with Mate<PlatformViewRenderBox$Mate> {
  /// PlatformViewRenderBox PlatformViewRenderBox({required PlatformViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  PlatformViewRenderBox$Mate({
    /// param: {required PlatformViewController controller}
    required PlatformViewController controller,

    /// param: {required PlatformViewHitTestBehavior hitTestBehavior}
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// param: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers}
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) : super(
          controller: controller,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => PlatformViewRenderBox$Mate(
        controller: p.getValue('controller'),
        hitTestBehavior: p.getValue('hitTestBehavior'),
        gestureRecognizers: p.getValue('gestureRecognizers'),
      ),
    );
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'hitTestBehavior', init: hitTestBehavior);
    mateParams.set(name: 'gestureRecognizers', init: gestureRecognizers);
  }
}
