// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/rendering/box.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/hit_test.dart';

/// class BoxConstraints extends Constraints
class BoxConstraints$Mate extends BoxConstraints with Mate<BoxConstraints$Mate> {
  /// BoxConstraints BoxConstraints({double minWidth = 0.0, double maxWidth = double.infinity, double minHeight = 0.0, double maxHeight = double.infinity})
  BoxConstraints$Mate({
    /// param: {double minWidth = 0.0}
    required double minWidth,

    /// param: {double maxWidth = double.infinity}
    required double maxWidth,

    /// param: {double minHeight = 0.0}
    required double minHeight,

    /// param: {double maxHeight = double.infinity}
    required double maxHeight,
  }) : super(
          minWidth: minWidth,
          maxWidth: maxWidth,
          minHeight: minHeight,
          maxHeight: maxHeight,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxConstraints$Mate(
        minWidth: p.getValue('minWidth'),
        maxWidth: p.getValue('maxWidth'),
        minHeight: p.getValue('minHeight'),
        maxHeight: p.getValue('maxHeight'),
      ),
    );
    mateParams.set(name: 'minWidth', init: minWidth);
    mateParams.set(name: 'maxWidth', init: maxWidth);
    mateParams.set(name: 'minHeight', init: minHeight);
    mateParams.set(name: 'maxHeight', init: maxHeight);
  }

  /// BoxConstraints BoxConstraints.tight(Size size)
  BoxConstraints$Mate.tight(

      /// param: Size size
      Size size)
      : super.tight(size) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxConstraints$Mate.tight(p.getValue('size')),
    );
    mateParams.set(name: 'size', init: size);
  }

  /// BoxConstraints BoxConstraints.tightFor({double? width, double? height})
  BoxConstraints$Mate.tightFor({
    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,
  }) : super.tightFor(
          width: width,
          height: height,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxConstraints$Mate.tightFor(
        width: p.getValue('width'),
        height: p.getValue('height'),
      ),
    );
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
  }

  /// BoxConstraints BoxConstraints.tightForFinite({double width = double.infinity, double height = double.infinity})
  BoxConstraints$Mate.tightForFinite({
    /// param: {double width = double.infinity}
    required double width,

    /// param: {double height = double.infinity}
    required double height,
  }) : super.tightForFinite(
          width: width,
          height: height,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxConstraints$Mate.tightForFinite(
        width: p.getValue('width'),
        height: p.getValue('height'),
      ),
    );
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
  }

  /// BoxConstraints BoxConstraints.loose(Size size)
  BoxConstraints$Mate.loose(

      /// param: Size size
      Size size)
      : super.loose(size) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxConstraints$Mate.loose(p.getValue('size')),
    );
    mateParams.set(name: 'size', init: size);
  }

  /// BoxConstraints BoxConstraints.expand({double? width, double? height})
  BoxConstraints$Mate.expand({
    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,
  }) : super.expand(
          width: width,
          height: height,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxConstraints$Mate.expand(
        width: p.getValue('width'),
        height: p.getValue('height'),
      ),
    );
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
  }
}

/// class BoxHitTestResult extends HitTestResult
class BoxHitTestResult$Mate extends BoxHitTestResult with Mate<BoxHitTestResult$Mate> {
  /// BoxHitTestResult BoxHitTestResult.wrap(HitTestResult result)
  BoxHitTestResult$Mate.wrap(

      /// param: HitTestResult result
      HitTestResult result)
      : super.wrap(result) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxHitTestResult$Mate.wrap(p.getValue('result')),
    );
    mateParams.set(name: 'result', init: result);
  }
}

/// class BoxHitTestEntry extends HitTestEntry<RenderBox>
class BoxHitTestEntry$Mate extends BoxHitTestEntry with Mate<BoxHitTestEntry$Mate> {
  /// BoxHitTestEntry BoxHitTestEntry(RenderBox target, Offset localPosition)
  BoxHitTestEntry$Mate(
    /// param: RenderBox target
    RenderBox target,

    /// param: Offset localPosition
    Offset localPosition,
  ) : super(
          target,
          localPosition,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BoxHitTestEntry$Mate(
        p.getValue('target'),
        p.getValue('localPosition'),
      ),
    );
    mateParams.set(name: 'target', init: target);
    mateParams.set(name: 'localPosition', init: localPosition);
  }
}
