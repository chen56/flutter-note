// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/src/rendering/box.dart';

/// class SliverConstraints extends Constraints
class SliverConstraints$Mate extends SliverConstraints with Mate<SliverConstraints$Mate> {
  /// SliverConstraints SliverConstraints({required AxisDirection axisDirection, required GrowthDirection growthDirection, required ScrollDirection userScrollDirection, required double scrollOffset, required double precedingScrollExtent, required double overlap, required double remainingPaintExtent, required double crossAxisExtent, required AxisDirection crossAxisDirection, required double viewportMainAxisExtent, required double remainingCacheExtent, required double cacheOrigin})
  SliverConstraints$Mate({
    /// param: {required AxisDirection axisDirection}
    required AxisDirection axisDirection,

    /// param: {required GrowthDirection growthDirection}
    required GrowthDirection growthDirection,

    /// param: {required ScrollDirection userScrollDirection}
    required ScrollDirection userScrollDirection,

    /// param: {required double scrollOffset}
    required double scrollOffset,

    /// param: {required double precedingScrollExtent}
    required double precedingScrollExtent,

    /// param: {required double overlap}
    required double overlap,

    /// param: {required double remainingPaintExtent}
    required double remainingPaintExtent,

    /// param: {required double crossAxisExtent}
    required double crossAxisExtent,

    /// param: {required AxisDirection crossAxisDirection}
    required AxisDirection crossAxisDirection,

    /// param: {required double viewportMainAxisExtent}
    required double viewportMainAxisExtent,

    /// param: {required double remainingCacheExtent}
    required double remainingCacheExtent,

    /// param: {required double cacheOrigin}
    required double cacheOrigin,
  }) : super(
          axisDirection: axisDirection,
          growthDirection: growthDirection,
          userScrollDirection: userScrollDirection,
          scrollOffset: scrollOffset,
          precedingScrollExtent: precedingScrollExtent,
          overlap: overlap,
          remainingPaintExtent: remainingPaintExtent,
          crossAxisExtent: crossAxisExtent,
          crossAxisDirection: crossAxisDirection,
          viewportMainAxisExtent: viewportMainAxisExtent,
          remainingCacheExtent: remainingCacheExtent,
          cacheOrigin: cacheOrigin,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverConstraints$Mate(
        axisDirection: p.getValue('axisDirection'),
        growthDirection: p.getValue('growthDirection'),
        userScrollDirection: p.getValue('userScrollDirection'),
        scrollOffset: p.getValue('scrollOffset'),
        precedingScrollExtent: p.getValue('precedingScrollExtent'),
        overlap: p.getValue('overlap'),
        remainingPaintExtent: p.getValue('remainingPaintExtent'),
        crossAxisExtent: p.getValue('crossAxisExtent'),
        crossAxisDirection: p.getValue('crossAxisDirection'),
        viewportMainAxisExtent: p.getValue('viewportMainAxisExtent'),
        remainingCacheExtent: p.getValue('remainingCacheExtent'),
        cacheOrigin: p.getValue('cacheOrigin'),
      ),
    );
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'growthDirection', init: growthDirection);
    mateParams.set(name: 'userScrollDirection', init: userScrollDirection);
    mateParams.set(name: 'scrollOffset', init: scrollOffset);
    mateParams.set(name: 'precedingScrollExtent', init: precedingScrollExtent);
    mateParams.set(name: 'overlap', init: overlap);
    mateParams.set(name: 'remainingPaintExtent', init: remainingPaintExtent);
    mateParams.set(name: 'crossAxisExtent', init: crossAxisExtent);
    mateParams.set(name: 'crossAxisDirection', init: crossAxisDirection);
    mateParams.set(name: 'viewportMainAxisExtent', init: viewportMainAxisExtent);
    mateParams.set(name: 'remainingCacheExtent', init: remainingCacheExtent);
    mateParams.set(name: 'cacheOrigin', init: cacheOrigin);
  }
}

/// class SliverGeometry with Diagnosticable
class SliverGeometry$Mate extends SliverGeometry with Mate<SliverGeometry$Mate> {
  /// SliverGeometry SliverGeometry({double scrollExtent = 0.0, double paintExtent = 0.0, double paintOrigin = 0.0, double? layoutExtent, double maxPaintExtent = 0.0, double maxScrollObstructionExtent = 0.0, double? hitTestExtent, bool? visible, bool hasVisualOverflow = false, double? scrollOffsetCorrection, double? cacheExtent})
  SliverGeometry$Mate({
    /// param: {double scrollExtent = 0.0}
    required double scrollExtent,

    /// param: {double paintExtent = 0.0}
    required double paintExtent,

    /// param: {double paintOrigin = 0.0}
    required double paintOrigin,

    /// param: {double? layoutExtent}
    double? layoutExtent,

    /// param: {double maxPaintExtent = 0.0}
    required double maxPaintExtent,

    /// param: {double maxScrollObstructionExtent = 0.0}
    required double maxScrollObstructionExtent,

    /// param: {double? hitTestExtent}
    double? hitTestExtent,

    /// param: {bool? visible}
    bool? visible,

    /// param: {bool hasVisualOverflow = false}
    required bool hasVisualOverflow,

    /// param: {double? scrollOffsetCorrection}
    double? scrollOffsetCorrection,

    /// param: {double? cacheExtent}
    double? cacheExtent,
  }) : super(
          scrollExtent: scrollExtent,
          paintExtent: paintExtent,
          paintOrigin: paintOrigin,
          layoutExtent: layoutExtent,
          maxPaintExtent: maxPaintExtent,
          maxScrollObstructionExtent: maxScrollObstructionExtent,
          hitTestExtent: hitTestExtent,
          visible: visible,
          hasVisualOverflow: hasVisualOverflow,
          scrollOffsetCorrection: scrollOffsetCorrection,
          cacheExtent: cacheExtent,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverGeometry$Mate(
        scrollExtent: p.getValue('scrollExtent'),
        paintExtent: p.getValue('paintExtent'),
        paintOrigin: p.getValue('paintOrigin'),
        layoutExtent: p.getValue('layoutExtent'),
        maxPaintExtent: p.getValue('maxPaintExtent'),
        maxScrollObstructionExtent: p.getValue('maxScrollObstructionExtent'),
        hitTestExtent: p.getValue('hitTestExtent'),
        visible: p.getValue('visible'),
        hasVisualOverflow: p.getValue('hasVisualOverflow'),
        scrollOffsetCorrection: p.getValue('scrollOffsetCorrection'),
        cacheExtent: p.getValue('cacheExtent'),
      ),
    );
    mateParams.set(name: 'scrollExtent', init: scrollExtent);
    mateParams.set(name: 'paintExtent', init: paintExtent);
    mateParams.set(name: 'paintOrigin', init: paintOrigin);
    mateParams.set(name: 'layoutExtent', init: layoutExtent);
    mateParams.set(name: 'maxPaintExtent', init: maxPaintExtent);
    mateParams.set(name: 'maxScrollObstructionExtent', init: maxScrollObstructionExtent);
    mateParams.set(name: 'hitTestExtent', init: hitTestExtent);
    mateParams.set(name: 'visible', init: visible);
    mateParams.set(name: 'hasVisualOverflow', init: hasVisualOverflow);
    mateParams.set(name: 'scrollOffsetCorrection', init: scrollOffsetCorrection);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
  }
}

/// class SliverHitTestResult extends HitTestResult
class SliverHitTestResult$Mate extends SliverHitTestResult with Mate<SliverHitTestResult$Mate> {
  /// SliverHitTestResult SliverHitTestResult.wrap(HitTestResult result)
  SliverHitTestResult$Mate.wrap(

      /// param: HitTestResult result
      HitTestResult result)
      : super.wrap(result) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverHitTestResult$Mate.wrap(p.getValue('result')),
    );
    mateParams.set(name: 'result', init: result);
  }
}

/// class SliverHitTestEntry extends HitTestEntry<RenderSliver>
class SliverHitTestEntry$Mate extends SliverHitTestEntry with Mate<SliverHitTestEntry$Mate> {
  /// SliverHitTestEntry SliverHitTestEntry(RenderSliver target, {required double mainAxisPosition, required double crossAxisPosition})
  SliverHitTestEntry$Mate(
    /// param: RenderSliver target
    RenderSliver target, {
    /// param: {required double mainAxisPosition}
    required double mainAxisPosition,

    /// param: {required double crossAxisPosition}
    required double crossAxisPosition,
  }) : super(
          target,
          mainAxisPosition: mainAxisPosition,
          crossAxisPosition: crossAxisPosition,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliverHitTestEntry$Mate(
        p.getValue('target'),
        mainAxisPosition: p.getValue('mainAxisPosition'),
        crossAxisPosition: p.getValue('crossAxisPosition'),
      ),
    );
    mateParams.set(name: 'target', init: target);
    mateParams.set(name: 'mainAxisPosition', init: mainAxisPosition);
    mateParams.set(name: 'crossAxisPosition', init: crossAxisPosition);
  }
}

/// class RenderSliverToBoxAdapter extends RenderSliverSingleBoxAdapter
class RenderSliverToBoxAdapter$Mate extends RenderSliverToBoxAdapter with Mate<RenderSliverToBoxAdapter$Mate> {
  /// RenderSliverToBoxAdapter RenderSliverToBoxAdapter({RenderBox? child})
  RenderSliverToBoxAdapter$Mate(
      {
      /// param: {RenderBox? child}
      RenderBox? child})
      : super(child: child) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderSliverToBoxAdapter$Mate(child: p.getValue('child')),
    );
    mateParams.set(name: 'child', init: child);
  }
}
