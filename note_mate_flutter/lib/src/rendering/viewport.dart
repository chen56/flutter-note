// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/viewport.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'package:flutter/src/rendering/sliver.dart';

/// class RevealedOffset
class RevealedOffset$Mate extends RevealedOffset with Mate<RevealedOffset$Mate> {
  /// RevealedOffset RevealedOffset({required double offset, required Rect rect})
  RevealedOffset$Mate({
    /// optionalParameters: {required double offset} , hasDefaultValue:false, defaultValueCode:null
    required double offset,

    /// optionalParameters: {required Rect rect} , hasDefaultValue:false, defaultValueCode:null
    required Rect rect,
  }) : super(
          offset: offset,
          rect: rect,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RevealedOffset$Mate(
        offset: p.getValue('offset'),
        rect: p.getValue('rect'),
      ),
    );
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'rect', init: rect);
  }
}

/// class RenderViewport extends RenderViewportBase<SliverPhysicalContainerParentData>
class RenderViewport$Mate extends RenderViewport with Mate<RenderViewport$Mate> {
  /// RenderViewport RenderViewport({AxisDirection axisDirection = AxisDirection.down, required AxisDirection crossAxisDirection, required ViewportOffset offset, double anchor = 0.0, List<RenderSliver>? children, RenderSliver? center, double? cacheExtent, CacheExtentStyle cacheExtentStyle = CacheExtentStyle.pixel, Clip clipBehavior = Clip.hardEdge})
  RenderViewport$Mate({
    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , hasDefaultValue:true, defaultValueCode:AxisDirection.down
    required AxisDirection axisDirection,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection crossAxisDirection,

    /// optionalParameters: {required ViewportOffset offset} , hasDefaultValue:false, defaultValueCode:null
    required ViewportOffset offset,

    /// optionalParameters: {double anchor = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double anchor,

    /// optionalParameters: {List<RenderSliver>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderSliver>? children,

    /// optionalParameters: {RenderSliver? center} , hasDefaultValue:false, defaultValueCode:null
    RenderSliver? center,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {CacheExtentStyle cacheExtentStyle = CacheExtentStyle.pixel} , hasDefaultValue:true, defaultValueCode:CacheExtentStyle.pixel
    required CacheExtentStyle cacheExtentStyle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          anchor: anchor,
          children: children,
          center: center,
          cacheExtent: cacheExtent,
          cacheExtentStyle: cacheExtentStyle,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderViewport$Mate(
        axisDirection: p.getValue('axisDirection'),
        crossAxisDirection: p.getValue('crossAxisDirection'),
        offset: p.getValue('offset'),
        anchor: p.getValue('anchor'),
        children: p.getValue('children'),
        center: p.getValue('center'),
        cacheExtent: p.getValue('cacheExtent'),
        cacheExtentStyle: p.getValue('cacheExtentStyle'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'crossAxisDirection', init: crossAxisDirection);
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'anchor', init: anchor);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'center', init: center);
    mateParams.set(name: 'cacheExtent', init: cacheExtent);
    mateParams.set(name: 'cacheExtentStyle', init: cacheExtentStyle);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class RenderShrinkWrappingViewport extends RenderViewportBase<SliverLogicalContainerParentData>
class RenderShrinkWrappingViewport$Mate extends RenderShrinkWrappingViewport
    with Mate<RenderShrinkWrappingViewport$Mate> {
  /// RenderShrinkWrappingViewport RenderShrinkWrappingViewport({AxisDirection axisDirection = AxisDirection.down, required AxisDirection crossAxisDirection, required ViewportOffset offset, Clip clipBehavior = Clip.hardEdge, List<RenderSliver>? children})
  RenderShrinkWrappingViewport$Mate({
    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , hasDefaultValue:true, defaultValueCode:AxisDirection.down
    required AxisDirection axisDirection,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection crossAxisDirection,

    /// optionalParameters: {required ViewportOffset offset} , hasDefaultValue:false, defaultValueCode:null
    required ViewportOffset offset,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {List<RenderSliver>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderSliver>? children,
  }) : super(
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          clipBehavior: clipBehavior,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderShrinkWrappingViewport$Mate(
        axisDirection: p.getValue('axisDirection'),
        crossAxisDirection: p.getValue('crossAxisDirection'),
        offset: p.getValue('offset'),
        clipBehavior: p.getValue('clipBehavior'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'axisDirection', init: axisDirection);
    mateParams.set(name: 'crossAxisDirection', init: crossAxisDirection);
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'children', init: children);
  }
}
