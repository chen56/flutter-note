// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/editable.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'dart:core';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/rendering/box.dart';

/// class TextSelectionPoint
class TextSelectionPoint$Mate extends TextSelectionPoint with Mate<TextSelectionPoint$Mate> {
  /// TextSelectionPoint TextSelectionPoint(Offset point, TextDirection? direction)
  TextSelectionPoint$Mate(
    /// requiredParameters: Offset point
    Offset point,

    /// requiredParameters: TextDirection? direction
    TextDirection? direction,
  ) : super(
          point,
          direction,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextSelectionPoint$Mate(
        p.getValue('point'),
        p.getValue('direction'),
      ),
    );
    mateParams.set(name: 'point', init: point);
    mateParams.set(name: 'direction', init: direction);
  }
}

/// class RenderEditable extends RenderBox with RelayoutWhenSystemFontsChangeMixin, ContainerRenderObjectMixin<RenderBox, TextParentData>, RenderBoxContainerDefaultsMixin<RenderBox, TextParentData> implements TextLayoutMetrics
class RenderEditable$Mate extends RenderEditable with Mate<RenderEditable$Mate> {
  /// RenderEditable RenderEditable({InlineSpan? text, required TextDirection textDirection, TextAlign textAlign = TextAlign.start, Color? cursorColor, Color? backgroundCursorColor, ValueNotifier<bool>? showCursor, bool? hasFocus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, int? maxLines = 1, int? minLines, bool expands = false, StrutStyle? strutStyle, Color? selectionColor, double textScaleFactor = 1.0, TextSelection? selection, required ViewportOffset offset, void Function(Rect)? onCaretChanged, bool ignorePointer = false, bool readOnly = false, bool forceLine = true, TextHeightBehavior? textHeightBehavior, TextWidthBasis textWidthBasis = TextWidthBasis.parent, String obscuringCharacter = '•', bool obscureText = false, Locale? locale, double cursorWidth = 1.0, double? cursorHeight, Radius? cursorRadius, bool paintCursorAboveText = false, Offset cursorOffset = Offset.zero, double devicePixelRatio = 1.0, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, bool? enableInteractiveSelection, EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5), TextRange? promptRectRange, Color? promptRectColor, Clip clipBehavior = Clip.hardEdge, required TextSelectionDelegate textSelectionDelegate, RenderEditablePainter? painter, RenderEditablePainter? foregroundPainter, List<RenderBox>? children})
  RenderEditable$Mate({
    /// optionalParameters: {InlineSpan? text} , hasDefaultValue:false, defaultValueCode:null
    InlineSpan? text,

    /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection textDirection,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , hasDefaultValue:true, defaultValueCode:TextAlign.start
    required TextAlign textAlign,

    /// optionalParameters: {Color? cursorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? cursorColor,

    /// optionalParameters: {Color? backgroundCursorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundCursorColor,

    /// optionalParameters: {ValueNotifier<bool>? showCursor} , hasDefaultValue:false, defaultValueCode:null
    ValueNotifier<bool>? showCursor,

    /// optionalParameters: {bool? hasFocus} , hasDefaultValue:false, defaultValueCode:null
    bool? hasFocus,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink endHandleLayerLink,

    /// optionalParameters: {int? maxLines = 1} , hasDefaultValue:true, defaultValueCode:1
    int? maxLines,

    /// optionalParameters: {int? minLines} , hasDefaultValue:false, defaultValueCode:null
    int? minLines,

    /// optionalParameters: {bool expands = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expands,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {Color? selectionColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectionColor,

    /// optionalParameters: {double textScaleFactor = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double textScaleFactor,

    /// optionalParameters: {TextSelection? selection} , hasDefaultValue:false, defaultValueCode:null
    TextSelection? selection,

    /// optionalParameters: {required ViewportOffset offset} , hasDefaultValue:false, defaultValueCode:null
    required ViewportOffset offset,

    /// optionalParameters: {void Function(Rect)? onCaretChanged} , hasDefaultValue:false, defaultValueCode:null
    CaretChangedHandler? onCaretChanged,

    /// optionalParameters: {bool ignorePointer = false} , hasDefaultValue:true, defaultValueCode:false
    required bool ignorePointer,

    /// optionalParameters: {bool readOnly = false} , hasDefaultValue:true, defaultValueCode:false
    required bool readOnly,

    /// optionalParameters: {bool forceLine = true} , hasDefaultValue:true, defaultValueCode:true
    required bool forceLine,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , hasDefaultValue:true, defaultValueCode:TextWidthBasis.parent
    required TextWidthBasis textWidthBasis,

    /// optionalParameters: {String obscuringCharacter = '•'} , hasDefaultValue:true, defaultValueCode:'•'
    required String obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool obscureText,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {double cursorWidth = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double cursorWidth,

    /// optionalParameters: {double? cursorHeight} , hasDefaultValue:false, defaultValueCode:null
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , hasDefaultValue:false, defaultValueCode:null
    Radius? cursorRadius,

    /// optionalParameters: {bool paintCursorAboveText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool paintCursorAboveText,

    /// optionalParameters: {Offset cursorOffset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset cursorOffset,

    /// optionalParameters: {double devicePixelRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double devicePixelRatio,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxHeightStyle.tight
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxWidthStyle.tight
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {bool? enableInteractiveSelection} , hasDefaultValue:false, defaultValueCode:null
    bool? enableInteractiveSelection,

    /// optionalParameters: {EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.fromLTRB(4, 4, 4, 5)
    required EdgeInsets floatingCursorAddedMargin,

    /// optionalParameters: {TextRange? promptRectRange} , hasDefaultValue:false, defaultValueCode:null
    TextRange? promptRectRange,

    /// optionalParameters: {Color? promptRectColor} , hasDefaultValue:false, defaultValueCode:null
    Color? promptRectColor,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {required TextSelectionDelegate textSelectionDelegate} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionDelegate textSelectionDelegate,

    /// optionalParameters: {RenderEditablePainter? painter} , hasDefaultValue:false, defaultValueCode:null
    RenderEditablePainter? painter,

    /// optionalParameters: {RenderEditablePainter? foregroundPainter} , hasDefaultValue:false, defaultValueCode:null
    RenderEditablePainter? foregroundPainter,

    /// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderBox>? children,
  }) : super(
          text: text,
          textDirection: textDirection,
          textAlign: textAlign,
          cursorColor: cursorColor,
          backgroundCursorColor: backgroundCursorColor,
          showCursor: showCursor,
          hasFocus: hasFocus,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          strutStyle: strutStyle,
          selectionColor: selectionColor,
          textScaleFactor: textScaleFactor,
          selection: selection,
          offset: offset,
          onCaretChanged: onCaretChanged,
          ignorePointer: ignorePointer,
          readOnly: readOnly,
          forceLine: forceLine,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          locale: locale,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          paintCursorAboveText: paintCursorAboveText,
          cursorOffset: cursorOffset,
          devicePixelRatio: devicePixelRatio,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          enableInteractiveSelection: enableInteractiveSelection,
          floatingCursorAddedMargin: floatingCursorAddedMargin,
          promptRectRange: promptRectRange,
          promptRectColor: promptRectColor,
          clipBehavior: clipBehavior,
          textSelectionDelegate: textSelectionDelegate,
          painter: painter,
          foregroundPainter: foregroundPainter,
          children: children,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RenderEditable$Mate(
        text: p.getValue('text'),
        textDirection: p.getValue('textDirection'),
        textAlign: p.getValue('textAlign'),
        cursorColor: p.getValue('cursorColor'),
        backgroundCursorColor: p.getValue('backgroundCursorColor'),
        showCursor: p.getValue('showCursor'),
        hasFocus: p.getValue('hasFocus'),
        startHandleLayerLink: p.getValue('startHandleLayerLink'),
        endHandleLayerLink: p.getValue('endHandleLayerLink'),
        maxLines: p.getValue('maxLines'),
        minLines: p.getValue('minLines'),
        expands: p.getValue('expands'),
        strutStyle: p.getValue('strutStyle'),
        selectionColor: p.getValue('selectionColor'),
        textScaleFactor: p.getValue('textScaleFactor'),
        selection: p.getValue('selection'),
        offset: p.getValue('offset'),
        onCaretChanged: p.getValue('onCaretChanged'),
        ignorePointer: p.getValue('ignorePointer'),
        readOnly: p.getValue('readOnly'),
        forceLine: p.getValue('forceLine'),
        textHeightBehavior: p.getValue('textHeightBehavior'),
        textWidthBasis: p.getValue('textWidthBasis'),
        obscuringCharacter: p.getValue('obscuringCharacter'),
        obscureText: p.getValue('obscureText'),
        locale: p.getValue('locale'),
        cursorWidth: p.getValue('cursorWidth'),
        cursorHeight: p.getValue('cursorHeight'),
        cursorRadius: p.getValue('cursorRadius'),
        paintCursorAboveText: p.getValue('paintCursorAboveText'),
        cursorOffset: p.getValue('cursorOffset'),
        devicePixelRatio: p.getValue('devicePixelRatio'),
        selectionHeightStyle: p.getValue('selectionHeightStyle'),
        selectionWidthStyle: p.getValue('selectionWidthStyle'),
        enableInteractiveSelection: p.getValue('enableInteractiveSelection'),
        floatingCursorAddedMargin: p.getValue('floatingCursorAddedMargin'),
        promptRectRange: p.getValue('promptRectRange'),
        promptRectColor: p.getValue('promptRectColor'),
        clipBehavior: p.getValue('clipBehavior'),
        textSelectionDelegate: p.getValue('textSelectionDelegate'),
        painter: p.getValue('painter'),
        foregroundPainter: p.getValue('foregroundPainter'),
        children: p.getValue('children'),
      ),
    );
    mateParams.set(name: 'text', init: text);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'textAlign', init: textAlign);
    mateParams.set(name: 'cursorColor', init: cursorColor);
    mateParams.set(name: 'backgroundCursorColor', init: backgroundCursorColor);
    mateParams.set(name: 'showCursor', init: showCursor);
    mateParams.set(name: 'hasFocus', init: hasFocus);
    mateParams.set(name: 'startHandleLayerLink', init: startHandleLayerLink);
    mateParams.set(name: 'endHandleLayerLink', init: endHandleLayerLink);
    mateParams.set(name: 'maxLines', init: maxLines);
    mateParams.set(name: 'minLines', init: minLines);
    mateParams.set(name: 'expands', init: expands);
    mateParams.set(name: 'strutStyle', init: strutStyle);
    mateParams.set(name: 'selectionColor', init: selectionColor);
    mateParams.set(name: 'textScaleFactor', init: textScaleFactor);
    mateParams.set(name: 'selection', init: selection);
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'onCaretChanged', init: onCaretChanged);
    mateParams.set(name: 'ignorePointer', init: ignorePointer);
    mateParams.set(name: 'readOnly', init: readOnly);
    mateParams.set(name: 'forceLine', init: forceLine);
    mateParams.set(name: 'textHeightBehavior', init: textHeightBehavior);
    mateParams.set(name: 'textWidthBasis', init: textWidthBasis);
    mateParams.set(name: 'obscuringCharacter', init: obscuringCharacter);
    mateParams.set(name: 'obscureText', init: obscureText);
    mateParams.set(name: 'locale', init: locale);
    mateParams.set(name: 'cursorWidth', init: cursorWidth);
    mateParams.set(name: 'cursorHeight', init: cursorHeight);
    mateParams.set(name: 'cursorRadius', init: cursorRadius);
    mateParams.set(name: 'paintCursorAboveText', init: paintCursorAboveText);
    mateParams.set(name: 'cursorOffset', init: cursorOffset);
    mateParams.set(name: 'devicePixelRatio', init: devicePixelRatio);
    mateParams.set(name: 'selectionHeightStyle', init: selectionHeightStyle);
    mateParams.set(name: 'selectionWidthStyle', init: selectionWidthStyle);
    mateParams.set(name: 'enableInteractiveSelection', init: enableInteractiveSelection);
    mateParams.set(name: 'floatingCursorAddedMargin', init: floatingCursorAddedMargin);
    mateParams.set(name: 'promptRectRange', init: promptRectRange);
    mateParams.set(name: 'promptRectColor', init: promptRectColor);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'textSelectionDelegate', init: textSelectionDelegate);
    mateParams.set(name: 'painter', init: painter);
    mateParams.set(name: 'foregroundPainter', init: foregroundPainter);
    mateParams.set(name: 'children', init: children);
  }
}
