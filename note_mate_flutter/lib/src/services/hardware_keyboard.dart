// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/services/raw_keyboard.dart';

/// class KeyDownEvent extends KeyEvent
class KeyDownEvent$Mate extends KeyDownEvent with Mate<KeyDownEvent$Mate> {
  /// KeyDownEvent KeyDownEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, String? character, required Duration timeStamp, bool synthesized = false})
  KeyDownEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , hasDefaultValue:false, defaultValueCode:null
    required PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , hasDefaultValue:false, defaultValueCode:null
    required LogicalKeyboardKey logicalKey,

    /// optionalParameters: {String? character} , hasDefaultValue:false, defaultValueCode:null
    String? character,

    /// optionalParameters: {required Duration timeStamp} , hasDefaultValue:false, defaultValueCode:null
    required Duration timeStamp,

    /// optionalParameters: {bool synthesized = false} , hasDefaultValue:true, defaultValueCode:false
    required bool synthesized,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          character: character,
          timeStamp: timeStamp,
          synthesized: synthesized,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeyDownEvent$Mate(
        physicalKey: p.getValue('physicalKey'),
        logicalKey: p.getValue('logicalKey'),
        character: p.getValue('character'),
        timeStamp: p.getValue('timeStamp'),
        synthesized: p.getValue('synthesized'),
      ),
    );
    mateParams.set(name: 'physicalKey', init: physicalKey);
    mateParams.set(name: 'logicalKey', init: logicalKey);
    mateParams.set(name: 'character', init: character);
    mateParams.set(name: 'timeStamp', init: timeStamp);
    mateParams.set(name: 'synthesized', init: synthesized);
  }
}

/// class KeyUpEvent extends KeyEvent
class KeyUpEvent$Mate extends KeyUpEvent with Mate<KeyUpEvent$Mate> {
  /// KeyUpEvent KeyUpEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, required Duration timeStamp, bool synthesized = false})
  KeyUpEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , hasDefaultValue:false, defaultValueCode:null
    required PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , hasDefaultValue:false, defaultValueCode:null
    required LogicalKeyboardKey logicalKey,

    /// optionalParameters: {required Duration timeStamp} , hasDefaultValue:false, defaultValueCode:null
    required Duration timeStamp,

    /// optionalParameters: {bool synthesized = false} , hasDefaultValue:true, defaultValueCode:false
    required bool synthesized,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          timeStamp: timeStamp,
          synthesized: synthesized,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeyUpEvent$Mate(
        physicalKey: p.getValue('physicalKey'),
        logicalKey: p.getValue('logicalKey'),
        timeStamp: p.getValue('timeStamp'),
        synthesized: p.getValue('synthesized'),
      ),
    );
    mateParams.set(name: 'physicalKey', init: physicalKey);
    mateParams.set(name: 'logicalKey', init: logicalKey);
    mateParams.set(name: 'timeStamp', init: timeStamp);
    mateParams.set(name: 'synthesized', init: synthesized);
  }
}

/// class KeyRepeatEvent extends KeyEvent
class KeyRepeatEvent$Mate extends KeyRepeatEvent with Mate<KeyRepeatEvent$Mate> {
  /// KeyRepeatEvent KeyRepeatEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, String? character, required Duration timeStamp})
  KeyRepeatEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , hasDefaultValue:false, defaultValueCode:null
    required PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , hasDefaultValue:false, defaultValueCode:null
    required LogicalKeyboardKey logicalKey,

    /// optionalParameters: {String? character} , hasDefaultValue:false, defaultValueCode:null
    String? character,

    /// optionalParameters: {required Duration timeStamp} , hasDefaultValue:false, defaultValueCode:null
    required Duration timeStamp,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          character: character,
          timeStamp: timeStamp,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeyRepeatEvent$Mate(
        physicalKey: p.getValue('physicalKey'),
        logicalKey: p.getValue('logicalKey'),
        character: p.getValue('character'),
        timeStamp: p.getValue('timeStamp'),
      ),
    );
    mateParams.set(name: 'physicalKey', init: physicalKey);
    mateParams.set(name: 'logicalKey', init: logicalKey);
    mateParams.set(name: 'character', init: character);
    mateParams.set(name: 'timeStamp', init: timeStamp);
  }
}

/// class KeyMessage
class KeyMessage$Mate extends KeyMessage with Mate<KeyMessage$Mate> {
  /// KeyMessage KeyMessage(List<KeyEvent> events, RawKeyEvent? rawEvent)
  KeyMessage$Mate(
    /// requiredParameters: List<KeyEvent> events
    List<KeyEvent> events,

    /// requiredParameters: RawKeyEvent? rawEvent
    RawKeyEvent? rawEvent,
  ) : super(
          events,
          rawEvent,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeyMessage$Mate(
        p.getValue('events'),
        p.getValue('rawEvent'),
      ),
    );
    mateParams.set(name: 'events', init: events);
    mateParams.set(name: 'rawEvent', init: rawEvent);
  }
}

/// class KeyEventManager
class KeyEventManager$Mate extends KeyEventManager with Mate<KeyEventManager$Mate> {
  /// KeyEventManager KeyEventManager(HardwareKeyboard _hardwareKeyboard, RawKeyboard _rawKeyboard)
  KeyEventManager$Mate(
    /// requiredParameters: HardwareKeyboard _hardwareKeyboard
    HardwareKeyboard _hardwareKeyboard,

    /// requiredParameters: RawKeyboard _rawKeyboard
    RawKeyboard _rawKeyboard,
  ) : super(
          _hardwareKeyboard,
          _rawKeyboard,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => KeyEventManager$Mate(
        p.getValue('_hardwareKeyboard'),
        p.getValue('_rawKeyboard'),
      ),
    );
    mateParams.set(name: '_hardwareKeyboard', init: _hardwareKeyboard);
    mateParams.set(name: '_rawKeyboard', init: _rawKeyboard);
  }
}
