// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/services/platform_channel.dart';
import 'dart:core';
import 'package:flutter/src/services/message_codec.dart';
import 'package:flutter/src/services/binary_messenger.dart';
import 'package:note/mate.dart';
export '_background_isolate_binary_messenger_io.dart';
export 'binary_messenger.dart' show BinaryMessenger;
export 'binding.dart' show RootIsolateToken;
export 'message_codec.dart' show MessageCodec, MethodCall, MethodCodec;

/// class BasicMessageChannel<T>
class BasicMessageChannel$Mate<T> extends BasicMessageChannel<T> with Mate<BasicMessageChannel$Mate> {
  /// BasicMessageChannel<T> BasicMessageChannel(String name, MessageCodec<T> codec, {BinaryMessenger? binaryMessenger})
  BasicMessageChannel$Mate(
    /// param: String name
    String name,

    /// param: MessageCodec<T> codec
    MessageCodec<T> codec, {
    /// param: {BinaryMessenger? binaryMessenger}
    BinaryMessenger? binaryMessenger,
  }) : super(
          name,
          codec,
          binaryMessenger: binaryMessenger,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BasicMessageChannel$Mate(
        p.getValue('name'),
        p.getValue('codec'),
        binaryMessenger: p.getValue('binaryMessenger'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'codec', init: codec);
    mateParams.set(name: 'binaryMessenger', init: binaryMessenger);
  }
}

/// class MethodChannel
class MethodChannel$Mate extends MethodChannel with Mate<MethodChannel$Mate> {
  /// MethodChannel MethodChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  MethodChannel$Mate(
    /// param: String name
    String name,

    /// param: [MethodCodec codec = const StandardMethodCodec()]
    MethodCodec codec,

    /// param: [BinaryMessenger? binaryMessenger]
    BinaryMessenger? binaryMessenger,
  ) : super(
          name,
          codec,
          binaryMessenger,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MethodChannel$Mate(
        p.getValue('name'),
        p.getValue('codec'),
        p.getValue('binaryMessenger'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'codec', init: codec);
    mateParams.set(name: 'binaryMessenger', init: binaryMessenger);
  }
}

/// class OptionalMethodChannel extends MethodChannel
class OptionalMethodChannel$Mate extends OptionalMethodChannel with Mate<OptionalMethodChannel$Mate> {
  /// OptionalMethodChannel OptionalMethodChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  OptionalMethodChannel$Mate(
    /// param: String name
    String name,

    /// param: [MethodCodec codec = const StandardMethodCodec()]
    MethodCodec codec,

    /// param: [BinaryMessenger? binaryMessenger]
    BinaryMessenger? binaryMessenger,
  ) : super(
          name,
          codec,
          binaryMessenger,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => OptionalMethodChannel$Mate(
        p.getValue('name'),
        p.getValue('codec'),
        p.getValue('binaryMessenger'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'codec', init: codec);
    mateParams.set(name: 'binaryMessenger', init: binaryMessenger);
  }
}

/// class EventChannel
class EventChannel$Mate extends EventChannel with Mate<EventChannel$Mate> {
  /// EventChannel EventChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  EventChannel$Mate(
    /// param: String name
    String name,

    /// param: [MethodCodec codec = const StandardMethodCodec()]
    MethodCodec codec,

    /// param: [BinaryMessenger? binaryMessenger]
    BinaryMessenger? binaryMessenger,
  ) : super(
          name,
          codec,
          binaryMessenger,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => EventChannel$Mate(
        p.getValue('name'),
        p.getValue('codec'),
        p.getValue('binaryMessenger'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'codec', init: codec);
    mateParams.set(name: 'binaryMessenger', init: binaryMessenger);
  }
}
