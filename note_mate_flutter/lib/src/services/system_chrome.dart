// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/system_chrome.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';

/// class ApplicationSwitcherDescription
class ApplicationSwitcherDescription$Mate extends ApplicationSwitcherDescription
    with Mate<ApplicationSwitcherDescription$Mate> {
  /// ApplicationSwitcherDescription ApplicationSwitcherDescription({String? label, int? primaryColor})
  ApplicationSwitcherDescription$Mate({
    /// optionalParameters: {String? label} , hasDefaultValue:false, defaultValueCode:null
    String? label,

    /// optionalParameters: {int? primaryColor} , hasDefaultValue:false, defaultValueCode:null
    int? primaryColor,
  }) : super(
          label: label,
          primaryColor: primaryColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ApplicationSwitcherDescription$Mate(
        label: p.getValue('label'),
        primaryColor: p.getValue('primaryColor'),
      ),
    );
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'primaryColor', init: primaryColor);
  }
}

/// class SystemUiOverlayStyle
class SystemUiOverlayStyle$Mate extends SystemUiOverlayStyle with Mate<SystemUiOverlayStyle$Mate> {
  /// SystemUiOverlayStyle SystemUiOverlayStyle({Color? systemNavigationBarColor, Color? systemNavigationBarDividerColor, Brightness? systemNavigationBarIconBrightness, bool? systemNavigationBarContrastEnforced, Color? statusBarColor, Brightness? statusBarBrightness, Brightness? statusBarIconBrightness, bool? systemStatusBarContrastEnforced})
  SystemUiOverlayStyle$Mate({
    /// optionalParameters: {Color? systemNavigationBarColor} , hasDefaultValue:false, defaultValueCode:null
    Color? systemNavigationBarColor,

    /// optionalParameters: {Color? systemNavigationBarDividerColor} , hasDefaultValue:false, defaultValueCode:null
    Color? systemNavigationBarDividerColor,

    /// optionalParameters: {Brightness? systemNavigationBarIconBrightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? systemNavigationBarIconBrightness,

    /// optionalParameters: {bool? systemNavigationBarContrastEnforced} , hasDefaultValue:false, defaultValueCode:null
    bool? systemNavigationBarContrastEnforced,

    /// optionalParameters: {Color? statusBarColor} , hasDefaultValue:false, defaultValueCode:null
    Color? statusBarColor,

    /// optionalParameters: {Brightness? statusBarBrightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? statusBarBrightness,

    /// optionalParameters: {Brightness? statusBarIconBrightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? statusBarIconBrightness,

    /// optionalParameters: {bool? systemStatusBarContrastEnforced} , hasDefaultValue:false, defaultValueCode:null
    bool? systemStatusBarContrastEnforced,
  }) : super(
          systemNavigationBarColor: systemNavigationBarColor,
          systemNavigationBarDividerColor: systemNavigationBarDividerColor,
          systemNavigationBarIconBrightness: systemNavigationBarIconBrightness,
          systemNavigationBarContrastEnforced: systemNavigationBarContrastEnforced,
          statusBarColor: statusBarColor,
          statusBarBrightness: statusBarBrightness,
          statusBarIconBrightness: statusBarIconBrightness,
          systemStatusBarContrastEnforced: systemStatusBarContrastEnforced,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SystemUiOverlayStyle$Mate(
        systemNavigationBarColor: p.getValue('systemNavigationBarColor'),
        systemNavigationBarDividerColor: p.getValue('systemNavigationBarDividerColor'),
        systemNavigationBarIconBrightness: p.getValue('systemNavigationBarIconBrightness'),
        systemNavigationBarContrastEnforced: p.getValue('systemNavigationBarContrastEnforced'),
        statusBarColor: p.getValue('statusBarColor'),
        statusBarBrightness: p.getValue('statusBarBrightness'),
        statusBarIconBrightness: p.getValue('statusBarIconBrightness'),
        systemStatusBarContrastEnforced: p.getValue('systemStatusBarContrastEnforced'),
      ),
    );
    mateParams.set(name: 'systemNavigationBarColor', init: systemNavigationBarColor);
    mateParams.set(name: 'systemNavigationBarDividerColor', init: systemNavigationBarDividerColor);
    mateParams.set(name: 'systemNavigationBarIconBrightness', init: systemNavigationBarIconBrightness);
    mateParams.set(name: 'systemNavigationBarContrastEnforced', init: systemNavigationBarContrastEnforced);
    mateParams.set(name: 'statusBarColor', init: statusBarColor);
    mateParams.set(name: 'statusBarBrightness', init: statusBarBrightness);
    mateParams.set(name: 'statusBarIconBrightness', init: statusBarIconBrightness);
    mateParams.set(name: 'systemStatusBarContrastEnforced', init: systemStatusBarContrastEnforced);
  }
}
