// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/text_editing.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';

/// class TextSelection extends TextRange
class TextSelection$Mate extends TextSelection with Mate<TextSelection$Mate> {
  /// TextSelection TextSelection({required int baseOffset, required int extentOffset, TextAffinity affinity = TextAffinity.downstream, bool isDirectional = false})
  TextSelection$Mate({
    /// optionalParameters: {required int baseOffset} , hasDefaultValue:false, defaultValueCode:null
    required int baseOffset,

    /// optionalParameters: {required int extentOffset} , hasDefaultValue:false, defaultValueCode:null
    required int extentOffset,

    /// optionalParameters: {TextAffinity affinity = TextAffinity.downstream} , hasDefaultValue:true, defaultValueCode:TextAffinity.downstream
    required TextAffinity affinity,

    /// optionalParameters: {bool isDirectional = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isDirectional,
  }) : super(
          baseOffset: baseOffset,
          extentOffset: extentOffset,
          affinity: affinity,
          isDirectional: isDirectional,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextSelection$Mate(
        baseOffset: p.getValue('baseOffset'),
        extentOffset: p.getValue('extentOffset'),
        affinity: p.getValue('affinity'),
        isDirectional: p.getValue('isDirectional'),
      ),
    );
    mateParams.set(name: 'baseOffset', init: baseOffset);
    mateParams.set(name: 'extentOffset', init: extentOffset);
    mateParams.set(name: 'affinity', init: affinity);
    mateParams.set(name: 'isDirectional', init: isDirectional);
  }

  /// TextSelection TextSelection.collapsed({required int offset, TextAffinity affinity = TextAffinity.downstream})
  TextSelection$Mate.collapsed({
    /// optionalParameters: {required int offset} , hasDefaultValue:false, defaultValueCode:null
    required int offset,

    /// optionalParameters: {TextAffinity affinity = TextAffinity.downstream} , hasDefaultValue:true, defaultValueCode:TextAffinity.downstream
    required TextAffinity affinity,
  }) : super.collapsed(
          offset: offset,
          affinity: affinity,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextSelection$Mate.collapsed(
        offset: p.getValue('offset'),
        affinity: p.getValue('affinity'),
      ),
    );
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'affinity', init: affinity);
  }

  /// TextSelection TextSelection.fromPosition(TextPosition position)
  TextSelection$Mate.fromPosition(

      /// requiredParameters: TextPosition position
      TextPosition position)
      : super.fromPosition(position) {
    mateParams = Params(
      init: this,
      builder: (p) => TextSelection$Mate.fromPosition(p.getValue('position')),
    );
    mateParams.set(name: 'position', init: position);
  }
}
