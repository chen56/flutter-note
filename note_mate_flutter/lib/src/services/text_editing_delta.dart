// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/services/text_editing_delta.dart';
import 'dart:core';
import 'package:flutter/src/services/text_editing.dart';
import 'dart:ui';
import 'package:note/mate.dart';

/// class TextEditingDeltaInsertion extends TextEditingDelta
class TextEditingDeltaInsertion$Mate extends TextEditingDeltaInsertion with Mate<TextEditingDeltaInsertion$Mate> {
  /// TextEditingDeltaInsertion TextEditingDeltaInsertion({required String oldText, required String textInserted, required int insertionOffset, required TextSelection selection, required TextRange composing})
  TextEditingDeltaInsertion$Mate({
    /// param: {required String oldText}
    required String oldText,

    /// param: {required String textInserted}
    required String textInserted,

    /// param: {required int insertionOffset}
    required int insertionOffset,

    /// param: {required TextSelection selection}
    required TextSelection selection,

    /// param: {required TextRange composing}
    required TextRange composing,
  }) : super(
          oldText: oldText,
          textInserted: textInserted,
          insertionOffset: insertionOffset,
          selection: selection,
          composing: composing,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextEditingDeltaInsertion$Mate(
        oldText: p.getValue('oldText'),
        textInserted: p.getValue('textInserted'),
        insertionOffset: p.getValue('insertionOffset'),
        selection: p.getValue('selection'),
        composing: p.getValue('composing'),
      ),
    );
    mateParams.set(name: 'oldText', init: oldText);
    mateParams.set(name: 'textInserted', init: textInserted);
    mateParams.set(name: 'insertionOffset', init: insertionOffset);
    mateParams.set(name: 'selection', init: selection);
    mateParams.set(name: 'composing', init: composing);
  }
}

/// class TextEditingDeltaDeletion extends TextEditingDelta
class TextEditingDeltaDeletion$Mate extends TextEditingDeltaDeletion with Mate<TextEditingDeltaDeletion$Mate> {
  /// TextEditingDeltaDeletion TextEditingDeltaDeletion({required String oldText, required TextRange deletedRange, required TextSelection selection, required TextRange composing})
  TextEditingDeltaDeletion$Mate({
    /// param: {required String oldText}
    required String oldText,

    /// param: {required TextRange deletedRange}
    required TextRange deletedRange,

    /// param: {required TextSelection selection}
    required TextSelection selection,

    /// param: {required TextRange composing}
    required TextRange composing,
  }) : super(
          oldText: oldText,
          deletedRange: deletedRange,
          selection: selection,
          composing: composing,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextEditingDeltaDeletion$Mate(
        oldText: p.getValue('oldText'),
        deletedRange: p.getValue('deletedRange'),
        selection: p.getValue('selection'),
        composing: p.getValue('composing'),
      ),
    );
    mateParams.set(name: 'oldText', init: oldText);
    mateParams.set(name: 'deletedRange', init: deletedRange);
    mateParams.set(name: 'selection', init: selection);
    mateParams.set(name: 'composing', init: composing);
  }
}

/// class TextEditingDeltaReplacement extends TextEditingDelta
class TextEditingDeltaReplacement$Mate extends TextEditingDeltaReplacement with Mate<TextEditingDeltaReplacement$Mate> {
  /// TextEditingDeltaReplacement TextEditingDeltaReplacement({required String oldText, required String replacementText, required TextRange replacedRange, required TextSelection selection, required TextRange composing})
  TextEditingDeltaReplacement$Mate({
    /// param: {required String oldText}
    required String oldText,

    /// param: {required String replacementText}
    required String replacementText,

    /// param: {required TextRange replacedRange}
    required TextRange replacedRange,

    /// param: {required TextSelection selection}
    required TextSelection selection,

    /// param: {required TextRange composing}
    required TextRange composing,
  }) : super(
          oldText: oldText,
          replacementText: replacementText,
          replacedRange: replacedRange,
          selection: selection,
          composing: composing,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextEditingDeltaReplacement$Mate(
        oldText: p.getValue('oldText'),
        replacementText: p.getValue('replacementText'),
        replacedRange: p.getValue('replacedRange'),
        selection: p.getValue('selection'),
        composing: p.getValue('composing'),
      ),
    );
    mateParams.set(name: 'oldText', init: oldText);
    mateParams.set(name: 'replacementText', init: replacementText);
    mateParams.set(name: 'replacedRange', init: replacedRange);
    mateParams.set(name: 'selection', init: selection);
    mateParams.set(name: 'composing', init: composing);
  }
}

/// class TextEditingDeltaNonTextUpdate extends TextEditingDelta
class TextEditingDeltaNonTextUpdate$Mate extends TextEditingDeltaNonTextUpdate
    with Mate<TextEditingDeltaNonTextUpdate$Mate> {
  /// TextEditingDeltaNonTextUpdate TextEditingDeltaNonTextUpdate({required String oldText, required TextSelection selection, required TextRange composing})
  TextEditingDeltaNonTextUpdate$Mate({
    /// param: {required String oldText}
    required String oldText,

    /// param: {required TextSelection selection}
    required TextSelection selection,

    /// param: {required TextRange composing}
    required TextRange composing,
  }) : super(
          oldText: oldText,
          selection: selection,
          composing: composing,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextEditingDeltaNonTextUpdate$Mate(
        oldText: p.getValue('oldText'),
        selection: p.getValue('selection'),
        composing: p.getValue('composing'),
      ),
    );
    mateParams.set(name: 'oldText', init: oldText);
    mateParams.set(name: 'selection', init: selection);
    mateParams.set(name: 'composing', init: composing);
  }
}
