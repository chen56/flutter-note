// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/foundation/diagnostics.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class TextTreeConfiguration
class TextTreeConfiguration$Mate extends TextTreeConfiguration with Mate<TextTreeConfiguration$Mate> {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfiguration$Mate({
    /// param: {required String prefixLineOne}
    required String prefixLineOne,

    /// param: {required String prefixOtherLines}
    required String prefixOtherLines,

    /// param: {required String prefixLastChildLineOne}
    required String prefixLastChildLineOne,

    /// param: {required String prefixOtherLinesRootNode}
    required String prefixOtherLinesRootNode,

    /// param: {required String linkCharacter}
    required String linkCharacter,

    /// param: {required String propertyPrefixIfChildren}
    required String propertyPrefixIfChildren,

    /// param: {required String propertyPrefixNoChildren}
    required String propertyPrefixNoChildren,

    /// param: {String lineBreak = '\n'}
    required String lineBreak,

    /// param: {bool lineBreakProperties = true}
    required bool lineBreakProperties,

    /// param: {String afterName = ':'}
    required String afterName,

    /// param: {String afterDescriptionIfBody = ''}
    required String afterDescriptionIfBody,

    /// param: {String afterDescription = ''}
    required String afterDescription,

    /// param: {String beforeProperties = ''}
    required String beforeProperties,

    /// param: {String afterProperties = ''}
    required String afterProperties,

    /// param: {String mandatoryAfterProperties = ''}
    required String mandatoryAfterProperties,

    /// param: {String propertySeparator = ''}
    required String propertySeparator,

    /// param: {String bodyIndent = ''}
    required String bodyIndent,

    /// param: {String footer = ''}
    required String footer,

    /// param: {bool showChildren = true}
    required bool showChildren,

    /// param: {bool addBlankLineIfNoChildren = true}
    required bool addBlankLineIfNoChildren,

    /// param: {bool isNameOnOwnLine = false}
    required bool isNameOnOwnLine,

    /// param: {bool isBlankLineBetweenPropertiesAndChildren = true}
    required bool isBlankLineBetweenPropertiesAndChildren,

    /// param: {String beforeName = ''}
    required String beforeName,

    /// param: {String suffixLineOne = ''}
    required String suffixLineOne,

    /// param: {String mandatoryFooter = ''}
    required String mandatoryFooter,
  }) : super(
          prefixLineOne: prefixLineOne,
          prefixOtherLines: prefixOtherLines,
          prefixLastChildLineOne: prefixLastChildLineOne,
          prefixOtherLinesRootNode: prefixOtherLinesRootNode,
          linkCharacter: linkCharacter,
          propertyPrefixIfChildren: propertyPrefixIfChildren,
          propertyPrefixNoChildren: propertyPrefixNoChildren,
          lineBreak: lineBreak,
          lineBreakProperties: lineBreakProperties,
          afterName: afterName,
          afterDescriptionIfBody: afterDescriptionIfBody,
          afterDescription: afterDescription,
          beforeProperties: beforeProperties,
          afterProperties: afterProperties,
          mandatoryAfterProperties: mandatoryAfterProperties,
          propertySeparator: propertySeparator,
          bodyIndent: bodyIndent,
          footer: footer,
          showChildren: showChildren,
          addBlankLineIfNoChildren: addBlankLineIfNoChildren,
          isNameOnOwnLine: isNameOnOwnLine,
          isBlankLineBetweenPropertiesAndChildren: isBlankLineBetweenPropertiesAndChildren,
          beforeName: beforeName,
          suffixLineOne: suffixLineOne,
          mandatoryFooter: mandatoryFooter,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextTreeConfiguration$Mate(
        prefixLineOne: p.getValue('prefixLineOne'),
        prefixOtherLines: p.getValue('prefixOtherLines'),
        prefixLastChildLineOne: p.getValue('prefixLastChildLineOne'),
        prefixOtherLinesRootNode: p.getValue('prefixOtherLinesRootNode'),
        linkCharacter: p.getValue('linkCharacter'),
        propertyPrefixIfChildren: p.getValue('propertyPrefixIfChildren'),
        propertyPrefixNoChildren: p.getValue('propertyPrefixNoChildren'),
        lineBreak: p.getValue('lineBreak'),
        lineBreakProperties: p.getValue('lineBreakProperties'),
        afterName: p.getValue('afterName'),
        afterDescriptionIfBody: p.getValue('afterDescriptionIfBody'),
        afterDescription: p.getValue('afterDescription'),
        beforeProperties: p.getValue('beforeProperties'),
        afterProperties: p.getValue('afterProperties'),
        mandatoryAfterProperties: p.getValue('mandatoryAfterProperties'),
        propertySeparator: p.getValue('propertySeparator'),
        bodyIndent: p.getValue('bodyIndent'),
        footer: p.getValue('footer'),
        showChildren: p.getValue('showChildren'),
        addBlankLineIfNoChildren: p.getValue('addBlankLineIfNoChildren'),
        isNameOnOwnLine: p.getValue('isNameOnOwnLine'),
        isBlankLineBetweenPropertiesAndChildren: p.getValue('isBlankLineBetweenPropertiesAndChildren'),
        beforeName: p.getValue('beforeName'),
        suffixLineOne: p.getValue('suffixLineOne'),
        mandatoryFooter: p.getValue('mandatoryFooter'),
      ),
    );
    mateParams.set(name: 'prefixLineOne', init: prefixLineOne);
    mateParams.set(name: 'prefixOtherLines', init: prefixOtherLines);
    mateParams.set(name: 'prefixLastChildLineOne', init: prefixLastChildLineOne);
    mateParams.set(name: 'prefixOtherLinesRootNode', init: prefixOtherLinesRootNode);
    mateParams.set(name: 'linkCharacter', init: linkCharacter);
    mateParams.set(name: 'propertyPrefixIfChildren', init: propertyPrefixIfChildren);
    mateParams.set(name: 'propertyPrefixNoChildren', init: propertyPrefixNoChildren);
    mateParams.set(name: 'lineBreak', init: lineBreak);
    mateParams.set(name: 'lineBreakProperties', init: lineBreakProperties);
    mateParams.set(name: 'afterName', init: afterName);
    mateParams.set(name: 'afterDescriptionIfBody', init: afterDescriptionIfBody);
    mateParams.set(name: 'afterDescription', init: afterDescription);
    mateParams.set(name: 'beforeProperties', init: beforeProperties);
    mateParams.set(name: 'afterProperties', init: afterProperties);
    mateParams.set(name: 'mandatoryAfterProperties', init: mandatoryAfterProperties);
    mateParams.set(name: 'propertySeparator', init: propertySeparator);
    mateParams.set(name: 'bodyIndent', init: bodyIndent);
    mateParams.set(name: 'footer', init: footer);
    mateParams.set(name: 'showChildren', init: showChildren);
    mateParams.set(name: 'addBlankLineIfNoChildren', init: addBlankLineIfNoChildren);
    mateParams.set(name: 'isNameOnOwnLine', init: isNameOnOwnLine);
    mateParams.set(name: 'isBlankLineBetweenPropertiesAndChildren', init: isBlankLineBetweenPropertiesAndChildren);
    mateParams.set(name: 'beforeName', init: beforeName);
    mateParams.set(name: 'suffixLineOne', init: suffixLineOne);
    mateParams.set(name: 'mandatoryFooter', init: mandatoryFooter);
  }
}

/// class TextTreeRenderer
class TextTreeRenderer$Mate extends TextTreeRenderer with Mate<TextTreeRenderer$Mate> {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRenderer$Mate({
    /// param: {DiagnosticLevel minLevel = DiagnosticLevel.debug}
    required DiagnosticLevel minLevel,

    /// param: {int wrapWidth = 100}
    required int wrapWidth,

    /// param: {int wrapWidthProperties = 65}
    required int wrapWidthProperties,

    /// param: {int maxDescendentsTruncatableNode = -1}
    required int maxDescendentsTruncatableNode,
  }) : super(
          minLevel: minLevel,
          wrapWidth: wrapWidth,
          wrapWidthProperties: wrapWidthProperties,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TextTreeRenderer$Mate(
        minLevel: p.getValue('minLevel'),
        wrapWidth: p.getValue('wrapWidth'),
        wrapWidthProperties: p.getValue('wrapWidthProperties'),
        maxDescendentsTruncatableNode: p.getValue('maxDescendentsTruncatableNode'),
      ),
    );
    mateParams.set(name: 'minLevel', init: minLevel);
    mateParams.set(name: 'wrapWidth', init: wrapWidth);
    mateParams.set(name: 'wrapWidthProperties', init: wrapWidthProperties);
    mateParams.set(name: 'maxDescendentsTruncatableNode', init: maxDescendentsTruncatableNode);
  }
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessageProperty$Mate extends MessageProperty with Mate<MessageProperty$Mate> {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessageProperty$Mate(
    /// param: String name
    String name,

    /// param: String message
    String message, {
    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          message,
          style: style,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MessageProperty$Mate(
        p.getValue('name'),
        p.getValue('message'),
        style: p.getValue('style'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'message', init: message);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'level', init: level);
  }
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringProperty$Mate extends StringProperty with Mate<StringProperty$Mate> {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringProperty$Mate(
    /// param: String name
    String name,

    /// param: String? value
    String? value, {
    /// param: {String? description}
    String? description,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {bool quoted = true}
    required bool quoted,

    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          tooltip: tooltip,
          showName: showName,
          defaultValue: defaultValue,
          quoted: quoted,
          ifEmpty: ifEmpty,
          style: style,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => StringProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        description: p.getValue('description'),
        tooltip: p.getValue('tooltip'),
        showName: p.getValue('showName'),
        defaultValue: p.getValue('defaultValue'),
        quoted: p.getValue('quoted'),
        ifEmpty: p.getValue('ifEmpty'),
        style: p.getValue('style'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'description', init: description);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'quoted', init: quoted);
    mateParams.set(name: 'ifEmpty', init: ifEmpty);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'level', init: level);
  }
}

/// class DoubleProperty extends _NumProperty<double>
class DoubleProperty$Mate extends DoubleProperty with Mate<DoubleProperty$Mate> {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate(
    /// param: String name
    String name,

    /// param: double? value
    double? value, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? unit}
    String? unit,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          showName: showName,
          style: style,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DoubleProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        ifNull: p.getValue('ifNull'),
        unit: p.getValue('unit'),
        tooltip: p.getValue('tooltip'),
        defaultValue: p.getValue('defaultValue'),
        showName: p.getValue('showName'),
        style: p.getValue('style'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'unit', init: unit);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'level', init: level);
  }

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate.lazy(
    /// param: String name
    String name,

    /// param: double? Function() computeValue
    ComputePropertyValueCallback<double> computeValue, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {String? unit}
    String? unit,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DoubleProperty$Mate.lazy(
        p.getValue('name'),
        p.getValue('computeValue'),
        ifNull: p.getValue('ifNull'),
        showName: p.getValue('showName'),
        unit: p.getValue('unit'),
        tooltip: p.getValue('tooltip'),
        defaultValue: p.getValue('defaultValue'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'computeValue', init: computeValue);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'unit', init: unit);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'level', init: level);
  }
}

/// class IntProperty extends _NumProperty<int>
class IntProperty$Mate extends IntProperty with Mate<IntProperty$Mate> {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntProperty$Mate(
    /// param: String name
    String name,

    /// param: int? value
    int? value, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {String? unit}
    String? unit,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          defaultValue: defaultValue,
          style: style,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => IntProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        ifNull: p.getValue('ifNull'),
        showName: p.getValue('showName'),
        unit: p.getValue('unit'),
        defaultValue: p.getValue('defaultValue'),
        style: p.getValue('style'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'unit', init: unit);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'level', init: level);
  }
}

/// class PercentProperty extends DoubleProperty
class PercentProperty$Mate extends PercentProperty with Mate<PercentProperty$Mate> {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentProperty$Mate(
    /// param: String name
    String name,

    /// param: double? fraction
    double? fraction, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {String? unit}
    String? unit,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          fraction,
          ifNull: ifNull,
          showName: showName,
          tooltip: tooltip,
          unit: unit,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => PercentProperty$Mate(
        p.getValue('name'),
        p.getValue('fraction'),
        ifNull: p.getValue('ifNull'),
        showName: p.getValue('showName'),
        tooltip: p.getValue('tooltip'),
        unit: p.getValue('unit'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'fraction', init: fraction);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'unit', init: unit);
    mateParams.set(name: 'level', init: level);
  }
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagProperty$Mate extends FlagProperty with Mate<FlagProperty$Mate> {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagProperty$Mate(
    /// param: String name
    String name, {
    /// param: {required bool? value}
    required bool? value,

    /// param: {String? ifTrue}
    String? ifTrue,

    /// param: {String? ifFalse}
    String? ifFalse,

    /// param: {bool showName = false}
    required bool showName,

    /// param: {Object? defaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value: value,
          ifTrue: ifTrue,
          ifFalse: ifFalse,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FlagProperty$Mate(
        p.getValue('name'),
        value: p.getValue('value'),
        ifTrue: p.getValue('ifTrue'),
        ifFalse: p.getValue('ifFalse'),
        showName: p.getValue('showName'),
        defaultValue: p.getValue('defaultValue'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'ifTrue', init: ifTrue);
    mateParams.set(name: 'ifFalse', init: ifFalse);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'level', init: level);
  }
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterableProperty$Mate<T> extends IterableProperty<T> with Mate<IterableProperty$Mate> {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterableProperty$Mate(
    /// param: String name
    String name,

    /// param: Iterable<T>? value
    Iterable<T>? value, {
    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? ifEmpty = '[]'}
    String? ifEmpty,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => IterableProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        defaultValue: p.getValue('defaultValue'),
        ifNull: p.getValue('ifNull'),
        ifEmpty: p.getValue('ifEmpty'),
        style: p.getValue('style'),
        showName: p.getValue('showName'),
        showSeparator: p.getValue('showSeparator'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'ifEmpty', init: ifEmpty);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showSeparator', init: showSeparator);
    mateParams.set(name: 'level', init: level);
  }
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumProperty$Mate<T> extends EnumProperty<T> with Mate<EnumProperty$Mate> {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumProperty$Mate(
    /// param: String name
    String name,

    /// param: T? value
    T? value, {
    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => EnumProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        defaultValue: p.getValue('defaultValue'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'level', init: level);
  }
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagProperty$Mate<T> extends ObjectFlagProperty<T> with Mate<ObjectFlagProperty$Mate> {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate(
    /// param: String name
    String name,

    /// param: T? value
    T? value, {
    /// param: {String? ifPresent}
    String? ifPresent,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = false}
    required bool showName,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifPresent: ifPresent,
          ifNull: ifNull,
          showName: showName,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ObjectFlagProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        ifPresent: p.getValue('ifPresent'),
        ifNull: p.getValue('ifNull'),
        showName: p.getValue('showName'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'ifPresent', init: ifPresent);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'level', init: level);
  }

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate.has(
    /// param: String name
    String name,

    /// param: T? value
    T? value, {
    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super.has(
          name,
          value,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ObjectFlagProperty$Mate.has(
        p.getValue('name'),
        p.getValue('value'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'level', init: level);
  }
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummary$Mate<T> extends FlagsSummary<T> with Mate<FlagsSummary$Mate> {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummary$Mate(
    /// param: String name
    String name,

    /// param: Map<String, T?> value
    Map<String, T?> value, {
    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FlagsSummary$Mate(
        p.getValue('name'),
        p.getValue('value'),
        ifEmpty: p.getValue('ifEmpty'),
        showName: p.getValue('showName'),
        showSeparator: p.getValue('showSeparator'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'ifEmpty', init: ifEmpty);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showSeparator', init: showSeparator);
    mateParams.set(name: 'level', init: level);
  }
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsProperty$Mate<T> extends DiagnosticsProperty<T> with Mate<DiagnosticsProperty$Mate> {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate(
    /// param: String? name
    String? name,

    /// param: T? value
    T? value, {
    /// param: {String? description}
    String? description,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool missingIfNull = false}
    required bool missingIfNull,

    /// param: {String? linePrefix}
    String? linePrefix,

    /// param: {bool expandableValue = false}
    required bool expandableValue,

    /// param: {bool allowWrap = true}
    required bool allowWrap,

    /// param: {bool allowNameWrap = true}
    required bool allowNameWrap,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          linePrefix: linePrefix,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DiagnosticsProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        description: p.getValue('description'),
        ifNull: p.getValue('ifNull'),
        ifEmpty: p.getValue('ifEmpty'),
        showName: p.getValue('showName'),
        showSeparator: p.getValue('showSeparator'),
        defaultValue: p.getValue('defaultValue'),
        tooltip: p.getValue('tooltip'),
        missingIfNull: p.getValue('missingIfNull'),
        linePrefix: p.getValue('linePrefix'),
        expandableValue: p.getValue('expandableValue'),
        allowWrap: p.getValue('allowWrap'),
        allowNameWrap: p.getValue('allowNameWrap'),
        style: p.getValue('style'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'description', init: description);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'ifEmpty', init: ifEmpty);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showSeparator', init: showSeparator);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'missingIfNull', init: missingIfNull);
    mateParams.set(name: 'linePrefix', init: linePrefix);
    mateParams.set(name: 'expandableValue', init: expandableValue);
    mateParams.set(name: 'allowWrap', init: allowWrap);
    mateParams.set(name: 'allowNameWrap', init: allowNameWrap);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'level', init: level);
  }

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate.lazy(
    /// param: String? name
    String? name,

    /// param: T? Function() computeValue
    ComputePropertyValueCallback<T> computeValue, {
    /// param: {String? description}
    String? description,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool missingIfNull = false}
    required bool missingIfNull,

    /// param: {bool expandableValue = false}
    required bool expandableValue,

    /// param: {bool allowWrap = true}
    required bool allowWrap,

    /// param: {bool allowNameWrap = true}
    required bool allowNameWrap,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DiagnosticsProperty$Mate.lazy(
        p.getValue('name'),
        p.getValue('computeValue'),
        description: p.getValue('description'),
        ifNull: p.getValue('ifNull'),
        ifEmpty: p.getValue('ifEmpty'),
        showName: p.getValue('showName'),
        showSeparator: p.getValue('showSeparator'),
        defaultValue: p.getValue('defaultValue'),
        tooltip: p.getValue('tooltip'),
        missingIfNull: p.getValue('missingIfNull'),
        expandableValue: p.getValue('expandableValue'),
        allowWrap: p.getValue('allowWrap'),
        allowNameWrap: p.getValue('allowNameWrap'),
        style: p.getValue('style'),
        level: p.getValue('level'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'computeValue', init: computeValue);
    mateParams.set(name: 'description', init: description);
    mateParams.set(name: 'ifNull', init: ifNull);
    mateParams.set(name: 'ifEmpty', init: ifEmpty);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showSeparator', init: showSeparator);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'missingIfNull', init: missingIfNull);
    mateParams.set(name: 'expandableValue', init: expandableValue);
    mateParams.set(name: 'allowWrap', init: allowWrap);
    mateParams.set(name: 'allowNameWrap', init: allowNameWrap);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'level', init: level);
  }
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNode$Mate<T extends Diagnosticable> extends DiagnosticableNode<T>
    with Mate<DiagnosticableNode$Mate> {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNode$Mate({
    /// param: {String? name}
    String? name,

    /// param: {required T value}
    required T value,

    /// param: {required DiagnosticsTreeStyle? style}
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DiagnosticableNode$Mate(
        name: p.getValue('name'),
        value: p.getValue('value'),
        style: p.getValue('style'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'style', init: style);
  }
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNode$Mate extends DiagnosticableTreeNode with Mate<DiagnosticableTreeNode$Mate> {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNode$Mate({
    /// param: {String? name}
    String? name,

    /// param: {required DiagnosticableTree value}
    required DiagnosticableTree value,

    /// param: {required DiagnosticsTreeStyle? style}
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DiagnosticableTreeNode$Mate(
        name: p.getValue('name'),
        value: p.getValue('value'),
        style: p.getValue('style'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'style', init: style);
  }
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilder$Mate extends DiagnosticPropertiesBuilder with Mate<DiagnosticPropertiesBuilder$Mate> {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilder$Mate.fromProperties(

      /// param: List<DiagnosticsNode> properties
      List<DiagnosticsNode> properties)
      : super.fromProperties(properties) {
    mateParams = Params(
      init: this,
      builder: (p) => DiagnosticPropertiesBuilder$Mate.fromProperties(p.getValue('properties')),
    );
    mateParams.set(name: 'properties', init: properties);
  }
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlock$Mate extends DiagnosticsBlock with Mate<DiagnosticsBlock$Mate> {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlock$Mate({
    /// param: {String? name}
    String? name,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace}
    required DiagnosticsTreeStyle style,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {String? linePrefix}
    String? linePrefix,

    /// param: {Object? value}
    Object? value,

    /// param: {String? description}
    String? description,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,

    /// param: {bool allowTruncate = false}
    required bool allowTruncate,

    /// param: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]}
    required List<DiagnosticsNode> children,

    /// param: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]}
    required List<DiagnosticsNode> properties,
  }) : super(
          name: name,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          linePrefix: linePrefix,
          value: value,
          description: description,
          level: level,
          allowTruncate: allowTruncate,
          children: children,
          properties: properties,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DiagnosticsBlock$Mate(
        name: p.getValue('name'),
        style: p.getValue('style'),
        showName: p.getValue('showName'),
        showSeparator: p.getValue('showSeparator'),
        linePrefix: p.getValue('linePrefix'),
        value: p.getValue('value'),
        description: p.getValue('description'),
        level: p.getValue('level'),
        allowTruncate: p.getValue('allowTruncate'),
        children: p.getValue('children'),
        properties: p.getValue('properties'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showSeparator', init: showSeparator);
    mateParams.set(name: 'linePrefix', init: linePrefix);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'description', init: description);
    mateParams.set(name: 'level', init: level);
    mateParams.set(name: 'allowTruncate', init: allowTruncate);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'properties', init: properties);
  }
}
