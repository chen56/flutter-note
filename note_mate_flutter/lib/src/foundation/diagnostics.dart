// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:25.089895

import 'package:flutter/src/foundation/diagnostics.dart';
import 'dart:core';

/// class TextTreeConfiguration
class TextTreeConfiguration$Mate extends TextTreeConfiguration {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfiguration$Mate({
    /// param: {required String prefixLineOne}
    required String prefixLineOne,

    /// param: {required String prefixOtherLines}
    required String prefixOtherLines,

    /// param: {required String prefixLastChildLineOne}
    required String prefixLastChildLineOne,

    /// param: {required String prefixOtherLinesRootNode}
    required String prefixOtherLinesRootNode,

    /// param: {required String linkCharacter}
    required String linkCharacter,

    /// param: {required String propertyPrefixIfChildren}
    required String propertyPrefixIfChildren,

    /// param: {required String propertyPrefixNoChildren}
    required String propertyPrefixNoChildren,

    /// param: {String lineBreak = '\n'}
    required String lineBreak,

    /// param: {bool lineBreakProperties = true}
    required bool lineBreakProperties,

    /// param: {String afterName = ':'}
    required String afterName,

    /// param: {String afterDescriptionIfBody = ''}
    required String afterDescriptionIfBody,

    /// param: {String afterDescription = ''}
    required String afterDescription,

    /// param: {String beforeProperties = ''}
    required String beforeProperties,

    /// param: {String afterProperties = ''}
    required String afterProperties,

    /// param: {String mandatoryAfterProperties = ''}
    required String mandatoryAfterProperties,

    /// param: {String propertySeparator = ''}
    required String propertySeparator,

    /// param: {String bodyIndent = ''}
    required String bodyIndent,

    /// param: {String footer = ''}
    required String footer,

    /// param: {bool showChildren = true}
    required bool showChildren,

    /// param: {bool addBlankLineIfNoChildren = true}
    required bool addBlankLineIfNoChildren,

    /// param: {bool isNameOnOwnLine = false}
    required bool isNameOnOwnLine,

    /// param: {bool isBlankLineBetweenPropertiesAndChildren = true}
    required bool isBlankLineBetweenPropertiesAndChildren,

    /// param: {String beforeName = ''}
    required String beforeName,

    /// param: {String suffixLineOne = ''}
    required String suffixLineOne,

    /// param: {String mandatoryFooter = ''}
    required String mandatoryFooter,
  }) : super(
          prefixLineOne: prefixLineOne,
          prefixOtherLines: prefixOtherLines,
          prefixLastChildLineOne: prefixLastChildLineOne,
          prefixOtherLinesRootNode: prefixOtherLinesRootNode,
          linkCharacter: linkCharacter,
          propertyPrefixIfChildren: propertyPrefixIfChildren,
          propertyPrefixNoChildren: propertyPrefixNoChildren,
          lineBreak: lineBreak,
          lineBreakProperties: lineBreakProperties,
          afterName: afterName,
          afterDescriptionIfBody: afterDescriptionIfBody,
          afterDescription: afterDescription,
          beforeProperties: beforeProperties,
          afterProperties: afterProperties,
          mandatoryAfterProperties: mandatoryAfterProperties,
          propertySeparator: propertySeparator,
          bodyIndent: bodyIndent,
          footer: footer,
          showChildren: showChildren,
          addBlankLineIfNoChildren: addBlankLineIfNoChildren,
          isNameOnOwnLine: isNameOnOwnLine,
          isBlankLineBetweenPropertiesAndChildren: isBlankLineBetweenPropertiesAndChildren,
          beforeName: beforeName,
          suffixLineOne: suffixLineOne,
          mandatoryFooter: mandatoryFooter,
        ) {}
}

/// class TextTreeRenderer
class TextTreeRenderer$Mate extends TextTreeRenderer {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRenderer$Mate({
    /// param: {DiagnosticLevel minLevel = DiagnosticLevel.debug}
    required DiagnosticLevel minLevel,

    /// param: {int wrapWidth = 100}
    required int wrapWidth,

    /// param: {int wrapWidthProperties = 65}
    required int wrapWidthProperties,

    /// param: {int maxDescendentsTruncatableNode = -1}
    required int maxDescendentsTruncatableNode,
  }) : super(
          minLevel: minLevel,
          wrapWidth: wrapWidth,
          wrapWidthProperties: wrapWidthProperties,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
        ) {}
}

/// abstract class DiagnosticsNode
abstract class DiagnosticsNode$Mate extends DiagnosticsNode {
  /// DiagnosticsNode DiagnosticsNode({required String? name, DiagnosticsTreeStyle? style, bool showName = true, bool showSeparator = true, String? linePrefix})
  DiagnosticsNode$Mate({
    /// param: {required String? name}
    required String? name,

    /// param: {DiagnosticsTreeStyle? style}
    DiagnosticsTreeStyle? style,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {String? linePrefix}
    String? linePrefix,
  }) : super(
          name: name,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          linePrefix: linePrefix,
        ) {}
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessageProperty$Mate extends MessageProperty {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessageProperty$Mate(
    /// param: String name
    String name,

    /// param: String message
    String message, {
    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          message,
          style: style,
          level: level,
        ) {}
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringProperty$Mate extends StringProperty {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringProperty$Mate(
    /// param: String name
    String name,

    /// param: String? value
    String? value, {
    /// param: {String? description}
    String? description,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {bool quoted = true}
    required bool quoted,

    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          tooltip: tooltip,
          showName: showName,
          defaultValue: defaultValue,
          quoted: quoted,
          ifEmpty: ifEmpty,
          style: style,
          level: level,
        ) {}
}

/// class DoubleProperty extends _NumProperty<double>
class DoubleProperty$Mate extends DoubleProperty {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate(
    /// param: String name
    String name,

    /// param: double? value
    double? value, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? unit}
    String? unit,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          showName: showName,
          style: style,
          level: level,
        ) {}

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate.lazy(
    /// param: String name
    String name,

    /// param: double? Function() computeValue
    ComputePropertyValueCallback<double> computeValue, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {String? unit}
    String? unit,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          level: level,
        ) {}
}

/// class IntProperty extends _NumProperty<int>
class IntProperty$Mate extends IntProperty {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntProperty$Mate(
    /// param: String name
    String name,

    /// param: int? value
    int? value, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {String? unit}
    String? unit,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          defaultValue: defaultValue,
          style: style,
          level: level,
        ) {}
}

/// class PercentProperty extends DoubleProperty
class PercentProperty$Mate extends PercentProperty {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentProperty$Mate(
    /// param: String name
    String name,

    /// param: double? fraction
    double? fraction, {
    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {String? unit}
    String? unit,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          fraction,
          ifNull: ifNull,
          showName: showName,
          tooltip: tooltip,
          unit: unit,
          level: level,
        ) {}
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagProperty$Mate extends FlagProperty {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagProperty$Mate(
    /// param: String name
    String name, {
    /// param: {required bool? value}
    required bool? value,

    /// param: {String? ifTrue}
    String? ifTrue,

    /// param: {String? ifFalse}
    String? ifFalse,

    /// param: {bool showName = false}
    required bool showName,

    /// param: {Object? defaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value: value,
          ifTrue: ifTrue,
          ifFalse: ifFalse,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {}
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterableProperty$Mate<T> extends IterableProperty<T> {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterableProperty$Mate(
    /// param: String name
    String name,

    /// param: Iterable<T>? value
    Iterable<T>? value, {
    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? ifEmpty = '[]'}
    String? ifEmpty,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {}
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumProperty$Mate<T> extends EnumProperty<T> {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumProperty$Mate(
    /// param: String name
    String name,

    /// param: T? value
    T? value, {
    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          level: level,
        ) {}
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagProperty$Mate<T> extends ObjectFlagProperty<T> {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate(
    /// param: String name
    String name,

    /// param: T? value
    T? value, {
    /// param: {String? ifPresent}
    String? ifPresent,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {bool showName = false}
    required bool showName,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifPresent: ifPresent,
          ifNull: ifNull,
          showName: showName,
          level: level,
        ) {}

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate.has(
    /// param: String name
    String name,

    /// param: T? value
    T? value, {
    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super.has(
          name,
          value,
          level: level,
        ) {}
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummary$Mate<T> extends FlagsSummary<T> {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummary$Mate(
    /// param: String name
    String name,

    /// param: Map<String, T?> value
    Map<String, T?> value, {
    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {}
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsProperty$Mate<T> extends DiagnosticsProperty<T> {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate(
    /// param: String? name
    String? name,

    /// param: T? value
    T? value, {
    /// param: {String? description}
    String? description,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool missingIfNull = false}
    required bool missingIfNull,

    /// param: {String? linePrefix}
    String? linePrefix,

    /// param: {bool expandableValue = false}
    required bool expandableValue,

    /// param: {bool allowWrap = true}
    required bool allowWrap,

    /// param: {bool allowNameWrap = true}
    required bool allowNameWrap,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          linePrefix: linePrefix,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {}

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate.lazy(
    /// param: String? name
    String? name,

    /// param: T? Function() computeValue
    ComputePropertyValueCallback<T> computeValue, {
    /// param: {String? description}
    String? description,

    /// param: {String? ifNull}
    String? ifNull,

    /// param: {String? ifEmpty}
    String? ifEmpty,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool missingIfNull = false}
    required bool missingIfNull,

    /// param: {bool expandableValue = false}
    required bool expandableValue,

    /// param: {bool allowWrap = true}
    required bool allowWrap,

    /// param: {bool allowNameWrap = true}
    required bool allowNameWrap,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine}
    required DiagnosticsTreeStyle style,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {}
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNode$Mate<T extends Diagnosticable> extends DiagnosticableNode<T> {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNode$Mate({
    /// param: {String? name}
    String? name,

    /// param: {required T value}
    required T value,

    /// param: {required DiagnosticsTreeStyle? style}
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {}
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNode$Mate extends DiagnosticableTreeNode {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNode$Mate({
    /// param: {String? name}
    String? name,

    /// param: {required DiagnosticableTree value}
    required DiagnosticableTree value,

    /// param: {required DiagnosticsTreeStyle? style}
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {}
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilder$Mate extends DiagnosticPropertiesBuilder {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilder$Mate.fromProperties(

      /// param: List<DiagnosticsNode> properties
      List<DiagnosticsNode> properties)
      : super.fromProperties(properties) {}
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlock$Mate extends DiagnosticsBlock {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlock$Mate({
    /// param: {String? name}
    String? name,

    /// param: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace}
    required DiagnosticsTreeStyle style,

    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showSeparator = true}
    required bool showSeparator,

    /// param: {String? linePrefix}
    String? linePrefix,

    /// param: {Object? value}
    Object? value,

    /// param: {String? description}
    String? description,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,

    /// param: {bool allowTruncate = false}
    required bool allowTruncate,

    /// param: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]}
    required List<DiagnosticsNode> children,

    /// param: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]}
    required List<DiagnosticsNode> properties,
  }) : super(
          name: name,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          linePrefix: linePrefix,
          value: value,
          description: description,
          level: level,
          allowTruncate: allowTruncate,
          children: children,
          properties: properties,
        ) {}
}
