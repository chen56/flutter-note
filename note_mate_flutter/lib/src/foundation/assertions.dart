// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:25.068848

import 'package:flutter/src/foundation/assertions.dart';
import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/foundation/basic_types.dart';
export 'basic_types.dart' show IterableFilter;
export 'diagnostics.dart' show DiagnosticLevel, DiagnosticPropertiesBuilder, DiagnosticsNode, DiagnosticsTreeStyle;
export 'stack_frame.dart' show StackFrame;

/// class PartialStackFrame
class PartialStackFrame$Mate extends PartialStackFrame {
  /// PartialStackFrame PartialStackFrame({required Pattern package, required String className, required String method})
  PartialStackFrame$Mate({
    /// param: {required Pattern package}
    required Pattern package,

    /// param: {required String className}
    required String className,

    /// param: {required String method}
    required String method,
  }) : super(
          package: package,
          className: className,
          method: method,
        ) {}
}

/// class RepetitiveStackFrameFilter extends StackFilter
class RepetitiveStackFrameFilter$Mate extends RepetitiveStackFrameFilter {
  /// RepetitiveStackFrameFilter RepetitiveStackFrameFilter({required List<PartialStackFrame> frames, required String replacement})
  RepetitiveStackFrameFilter$Mate({
    /// param: {required List<PartialStackFrame> frames}
    required List<PartialStackFrame> frames,

    /// param: {required String replacement}
    required String replacement,
  }) : super(
          frames: frames,
          replacement: replacement,
        ) {}
}

/// class ErrorDescription extends _ErrorDiagnostic
class ErrorDescription$Mate extends ErrorDescription {
  /// ErrorDescription ErrorDescription(String message)
  ErrorDescription$Mate(

      /// param: String message
      String message)
      : super(message) {}
}

/// class ErrorSummary extends _ErrorDiagnostic
class ErrorSummary$Mate extends ErrorSummary {
  /// ErrorSummary ErrorSummary(String message)
  ErrorSummary$Mate(

      /// param: String message
      String message)
      : super(message) {}
}

/// class ErrorHint extends _ErrorDiagnostic
class ErrorHint$Mate extends ErrorHint {
  /// ErrorHint ErrorHint(String message)
  ErrorHint$Mate(

      /// param: String message
      String message)
      : super(message) {}
}

/// class FlutterErrorDetails with Diagnosticable
class FlutterErrorDetails$Mate extends FlutterErrorDetails {
  /// FlutterErrorDetails FlutterErrorDetails({required Object exception, StackTrace? stack, String? library = 'Flutter framework', DiagnosticsNode? context, Iterable<String> Function(Iterable<String>)? stackFilter, Iterable<DiagnosticsNode> Function()? informationCollector, bool silent = false})
  FlutterErrorDetails$Mate({
    /// param: {required Object exception}
    required Object exception,

    /// param: {StackTrace? stack}
    StackTrace? stack,

    /// param: {String? library = 'Flutter framework'}
    String? library,

    /// param: {DiagnosticsNode? context}
    DiagnosticsNode? context,

    /// param: {Iterable<String> Function(Iterable<String>)? stackFilter}
    IterableFilter<String>? stackFilter,

    /// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    InformationCollector? informationCollector,

    /// param: {bool silent = false}
    required bool silent,
  }) : super(
          exception: exception,
          stack: stack,
          library: library,
          context: context,
          stackFilter: stackFilter,
          informationCollector: informationCollector,
          silent: silent,
        ) {}
}

/// class FlutterError extends Error with DiagnosticableTreeMixin implements AssertionError
class FlutterError$Mate extends FlutterError {
  /// FlutterError FlutterError.fromParts(List<DiagnosticsNode> diagnostics)
  FlutterError$Mate.fromParts(

      /// param: List<DiagnosticsNode> diagnostics
      List<DiagnosticsNode> diagnostics)
      : super.fromParts(diagnostics) {}
}

/// class DiagnosticsStackTrace extends DiagnosticsBlock
class DiagnosticsStackTrace$Mate extends DiagnosticsStackTrace {
  /// DiagnosticsStackTrace DiagnosticsStackTrace(String name, StackTrace? stack, {Iterable<String> Function(Iterable<String>)? stackFilter, bool showSeparator = true})
  DiagnosticsStackTrace$Mate(
    /// param: String name
    String name,

    /// param: StackTrace? stack
    StackTrace? stack, {
    /// param: {Iterable<String> Function(Iterable<String>)? stackFilter}
    IterableFilter<String>? stackFilter,

    /// param: {bool showSeparator = true}
    required bool showSeparator,
  }) : super(
          name,
          stack,
          stackFilter: stackFilter,
          showSeparator: showSeparator,
        ) {}

  /// DiagnosticsStackTrace DiagnosticsStackTrace.singleFrame(String name, {required String frame, bool showSeparator = true})
  DiagnosticsStackTrace$Mate.singleFrame(
    /// param: String name
    String name, {
    /// param: {required String frame}
    required String frame,

    /// param: {bool showSeparator = true}
    required bool showSeparator,
  }) : super.singleFrame(
          name,
          frame: frame,
          showSeparator: showSeparator,
        ) {}
}
