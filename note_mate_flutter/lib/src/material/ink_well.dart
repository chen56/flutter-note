// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.970379

import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/rendering/box.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// abstract class InteractiveInkFeature extends InkFeature
abstract class InteractiveInkFeature$Mate extends InteractiveInkFeature {
  /// InteractiveInkFeature InteractiveInkFeature({required MaterialInkController controller, required RenderBox referenceBox, required Color color, void Function()? onRemoved})
  InteractiveInkFeature$Mate({
    /// param: {required MaterialInkController controller}
    required MaterialInkController controller,

    /// param: {required RenderBox referenceBox}
    required RenderBox referenceBox,

    /// param: {required Color color}
    required Color color,

    /// param: {void Function()? onRemoved}
    VoidCallback? onRemoved,
  }) : super(
          controller: controller,
          referenceBox: referenceBox,
          color: color,
          onRemoved: onRemoved,
        ) {}
}

/// class InkResponse extends StatelessWidget
class InkResponse$Mate extends InkResponse {
  /// InkResponse InkResponse({Key? key, Widget? child, void Function()? onTap, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, bool containedInkWell = false, BoxShape highlightShape = BoxShape.circle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, bool enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkResponse$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {void Function(TapDownDetails)? onTapDown}
    GestureTapDownCallback? onTapDown,

    /// param: {void Function(TapUpDetails)? onTapUp}
    GestureTapUpCallback? onTapUp,

    /// param: {void Function()? onTapCancel}
    GestureTapCallback? onTapCancel,

    /// param: {void Function()? onDoubleTap}
    GestureTapCallback? onDoubleTap,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {void Function(bool)? onHighlightChanged}
    ValueChanged<bool>? onHighlightChanged,

    /// param: {void Function(bool)? onHover}
    ValueChanged<bool>? onHover,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {bool containedInkWell = false}
    required bool containedInkWell,

    /// param: {BoxShape highlightShape = BoxShape.circle}
    required BoxShape highlightShape,

    /// param: {double? radius}
    double? radius,

    /// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,

    /// param: {ShapeBorder? customBorder}
    ShapeBorder? customBorder,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,

    /// param: {bool enableFeedback = true}
    required bool enableFeedback,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool canRequestFocus = true}
    required bool canRequestFocus,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          containedInkWell: containedInkWell,
          highlightShape: highlightShape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {}
}

/// class InkWell extends InkResponse
class InkWell$Mate extends InkWell {
  /// InkWell InkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkWell$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {void Function()? onDoubleTap}
    GestureTapCallback? onDoubleTap,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {void Function(TapDownDetails)? onTapDown}
    GestureTapDownCallback? onTapDown,

    /// param: {void Function(TapUpDetails)? onTapUp}
    GestureTapUpCallback? onTapUp,

    /// param: {void Function()? onTapCancel}
    GestureTapCallback? onTapCancel,

    /// param: {void Function(bool)? onHighlightChanged}
    ValueChanged<bool>? onHighlightChanged,

    /// param: {void Function(bool)? onHover}
    ValueChanged<bool>? onHover,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,

    /// param: {double? radius}
    double? radius,

    /// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,

    /// param: {ShapeBorder? customBorder}
    ShapeBorder? customBorder,

    /// param: {bool? enableFeedback = true}
    bool? enableFeedback,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool canRequestFocus = true}
    required bool canRequestFocus,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {}
}
