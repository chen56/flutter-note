// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class InkResponse extends StatelessWidget
class InkResponse$Mate extends InkResponse with WidgetMate<InkResponse$Mate> {
  /// InkResponse InkResponse({Key? key, Widget? child, void Function()? onTap, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, bool containedInkWell = false, BoxShape highlightShape = BoxShape.circle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, bool enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkResponse$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {void Function(TapDownDetails)? onTapDown}
    GestureTapDownCallback? onTapDown,

    /// param: {void Function(TapUpDetails)? onTapUp}
    GestureTapUpCallback? onTapUp,

    /// param: {void Function()? onTapCancel}
    GestureTapCallback? onTapCancel,

    /// param: {void Function()? onDoubleTap}
    GestureTapCallback? onDoubleTap,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {void Function(bool)? onHighlightChanged}
    ValueChanged<bool>? onHighlightChanged,

    /// param: {void Function(bool)? onHover}
    ValueChanged<bool>? onHover,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {bool containedInkWell = false}
    required bool containedInkWell,

    /// param: {BoxShape highlightShape = BoxShape.circle}
    required BoxShape highlightShape,

    /// param: {double? radius}
    double? radius,

    /// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,

    /// param: {ShapeBorder? customBorder}
    ShapeBorder? customBorder,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,

    /// param: {bool enableFeedback = true}
    required bool enableFeedback,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool canRequestFocus = true}
    required bool canRequestFocus,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          containedInkWell: containedInkWell,
          highlightShape: highlightShape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InkResponse$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        onTap: p.getValue('onTap'),
        onTapDown: p.getValue('onTapDown'),
        onTapUp: p.getValue('onTapUp'),
        onTapCancel: p.getValue('onTapCancel'),
        onDoubleTap: p.getValue('onDoubleTap'),
        onLongPress: p.getValue('onLongPress'),
        onHighlightChanged: p.getValue('onHighlightChanged'),
        onHover: p.getValue('onHover'),
        mouseCursor: p.getValue('mouseCursor'),
        containedInkWell: p.getValue('containedInkWell'),
        highlightShape: p.getValue('highlightShape'),
        radius: p.getValue('radius'),
        borderRadius: p.getValue('borderRadius'),
        customBorder: p.getValue('customBorder'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        highlightColor: p.getValue('highlightColor'),
        overlayColor: p.getValue('overlayColor'),
        splashColor: p.getValue('splashColor'),
        splashFactory: p.getValue('splashFactory'),
        enableFeedback: p.getValue('enableFeedback'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        focusNode: p.getValue('focusNode'),
        canRequestFocus: p.getValue('canRequestFocus'),
        onFocusChange: p.getValue('onFocusChange'),
        autofocus: p.getValue('autofocus'),
        statesController: p.getValue('statesController'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onTapDown', init: onTapDown);
    mateParams.set(name: 'onTapUp', init: onTapUp);
    mateParams.set(name: 'onTapCancel', init: onTapCancel);
    mateParams.set(name: 'onDoubleTap', init: onDoubleTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onHighlightChanged', init: onHighlightChanged);
    mateParams.set(name: 'onHover', init: onHover);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'containedInkWell', init: containedInkWell);
    mateParams.set(name: 'highlightShape', init: highlightShape);
    mateParams.set(name: 'radius', init: radius);
    mateParams.set(name: 'borderRadius', init: borderRadius);
    mateParams.set(name: 'customBorder', init: customBorder);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'highlightColor', init: highlightColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'splashColor', init: splashColor);
    mateParams.set(name: 'splashFactory', init: splashFactory);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'canRequestFocus', init: canRequestFocus);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'statesController', init: statesController);
  }
}

/// class InkWell extends InkResponse
class InkWell$Mate extends InkWell with WidgetMate<InkWell$Mate> {
  /// InkWell InkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkWell$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {void Function()? onDoubleTap}
    GestureTapCallback? onDoubleTap,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {void Function(TapDownDetails)? onTapDown}
    GestureTapDownCallback? onTapDown,

    /// param: {void Function(TapUpDetails)? onTapUp}
    GestureTapUpCallback? onTapUp,

    /// param: {void Function()? onTapCancel}
    GestureTapCallback? onTapCancel,

    /// param: {void Function(bool)? onHighlightChanged}
    ValueChanged<bool>? onHighlightChanged,

    /// param: {void Function(bool)? onHover}
    ValueChanged<bool>? onHover,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,

    /// param: {double? radius}
    double? radius,

    /// param: {BorderRadius? borderRadius}
    BorderRadius? borderRadius,

    /// param: {ShapeBorder? customBorder}
    ShapeBorder? customBorder,

    /// param: {bool? enableFeedback = true}
    bool? enableFeedback,

    /// param: {bool excludeFromSemantics = false}
    required bool excludeFromSemantics,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool canRequestFocus = true}
    required bool canRequestFocus,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {MaterialStatesController? statesController}
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InkWell$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        onTap: p.getValue('onTap'),
        onDoubleTap: p.getValue('onDoubleTap'),
        onLongPress: p.getValue('onLongPress'),
        onTapDown: p.getValue('onTapDown'),
        onTapUp: p.getValue('onTapUp'),
        onTapCancel: p.getValue('onTapCancel'),
        onHighlightChanged: p.getValue('onHighlightChanged'),
        onHover: p.getValue('onHover'),
        mouseCursor: p.getValue('mouseCursor'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        highlightColor: p.getValue('highlightColor'),
        overlayColor: p.getValue('overlayColor'),
        splashColor: p.getValue('splashColor'),
        splashFactory: p.getValue('splashFactory'),
        radius: p.getValue('radius'),
        borderRadius: p.getValue('borderRadius'),
        customBorder: p.getValue('customBorder'),
        enableFeedback: p.getValue('enableFeedback'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        focusNode: p.getValue('focusNode'),
        canRequestFocus: p.getValue('canRequestFocus'),
        onFocusChange: p.getValue('onFocusChange'),
        autofocus: p.getValue('autofocus'),
        statesController: p.getValue('statesController'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onDoubleTap', init: onDoubleTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onTapDown', init: onTapDown);
    mateParams.set(name: 'onTapUp', init: onTapUp);
    mateParams.set(name: 'onTapCancel', init: onTapCancel);
    mateParams.set(name: 'onHighlightChanged', init: onHighlightChanged);
    mateParams.set(name: 'onHover', init: onHover);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'highlightColor', init: highlightColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'splashColor', init: splashColor);
    mateParams.set(name: 'splashFactory', init: splashFactory);
    mateParams.set(name: 'radius', init: radius);
    mateParams.set(name: 'borderRadius', init: borderRadius);
    mateParams.set(name: 'customBorder', init: customBorder);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'canRequestFocus', init: canRequestFocus);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'statesController', init: statesController);
  }
}
