// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/tab_bar_theme.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'dart:ui';
import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:note/mate.dart';

/// class TabBarTheme with Diagnosticable
class TabBarTheme$Mate extends TabBarTheme with Mate<TabBarTheme$Mate> {
  /// TabBarTheme TabBarTheme({Decoration? indicator, Color? indicatorColor, TabBarIndicatorSize? indicatorSize, Color? dividerColor, Color? labelColor, EdgeInsetsGeometry? labelPadding, TextStyle? labelStyle, Color? unselectedLabelColor, TextStyle? unselectedLabelStyle, MaterialStateProperty<Color?>? overlayColor, InteractiveInkFeatureFactory? splashFactory, MaterialStateProperty<MouseCursor?>? mouseCursor})
  TabBarTheme$Mate({
    /// param: {Decoration? indicator}
    Decoration? indicator,

    /// param: {Color? indicatorColor}
    Color? indicatorColor,

    /// param: {TabBarIndicatorSize? indicatorSize}
    TabBarIndicatorSize? indicatorSize,

    /// param: {Color? dividerColor}
    Color? dividerColor,

    /// param: {Color? labelColor}
    Color? labelColor,

    /// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,

    /// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,

    /// param: {Color? unselectedLabelColor}
    Color? unselectedLabelColor,

    /// param: {TextStyle? unselectedLabelStyle}
    TextStyle? unselectedLabelStyle,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,

    /// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          indicator: indicator,
          indicatorColor: indicatorColor,
          indicatorSize: indicatorSize,
          dividerColor: dividerColor,
          labelColor: labelColor,
          labelPadding: labelPadding,
          labelStyle: labelStyle,
          unselectedLabelColor: unselectedLabelColor,
          unselectedLabelStyle: unselectedLabelStyle,
          overlayColor: overlayColor,
          splashFactory: splashFactory,
          mouseCursor: mouseCursor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TabBarTheme$Mate(
        indicator: p.getValue('indicator'),
        indicatorColor: p.getValue('indicatorColor'),
        indicatorSize: p.getValue('indicatorSize'),
        dividerColor: p.getValue('dividerColor'),
        labelColor: p.getValue('labelColor'),
        labelPadding: p.getValue('labelPadding'),
        labelStyle: p.getValue('labelStyle'),
        unselectedLabelColor: p.getValue('unselectedLabelColor'),
        unselectedLabelStyle: p.getValue('unselectedLabelStyle'),
        overlayColor: p.getValue('overlayColor'),
        splashFactory: p.getValue('splashFactory'),
        mouseCursor: p.getValue('mouseCursor'),
      ),
    );
    mateParams.set(name: 'indicator', init: indicator);
    mateParams.set(name: 'indicatorColor', init: indicatorColor);
    mateParams.set(name: 'indicatorSize', init: indicatorSize);
    mateParams.set(name: 'dividerColor', init: dividerColor);
    mateParams.set(name: 'labelColor', init: labelColor);
    mateParams.set(name: 'labelPadding', init: labelPadding);
    mateParams.set(name: 'labelStyle', init: labelStyle);
    mateParams.set(name: 'unselectedLabelColor', init: unselectedLabelColor);
    mateParams.set(name: 'unselectedLabelStyle', init: unselectedLabelStyle);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'splashFactory', init: splashFactory);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
  }
}
