// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class Drawer extends StatelessWidget
class Drawer$Mate extends Drawer with WidgetMate<Drawer$Mate> {
  /// Drawer Drawer({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, double? width, Widget? child, String? semanticLabel})
  Drawer$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {double? width}
    double? width,

    /// param: {Widget? child}
    Widget? child,

    /// param: {String? semanticLabel}
    String? semanticLabel,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          width: width,
          child: child,
          semanticLabel: semanticLabel,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Drawer$Mate(
        key: p.getValue('key'),
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        shape: p.getValue('shape'),
        width: p.getValue('width'),
        child: p.getValue('child'),
        semanticLabel: p.getValue('semanticLabel'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
  }
}

/// class DrawerController extends StatefulWidget
class DrawerController$Mate extends DrawerController with WidgetMate<DrawerController$Mate> {
  /// DrawerController DrawerController({GlobalKey<State<StatefulWidget>>? key, required Widget child, required DrawerAlignment alignment, bool isDrawerOpen = false, void Function(bool)? drawerCallback, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Color? scrimColor, double? edgeDragWidth, bool enableOpenDragGesture = true})
  DrawerController$Mate({
    /// param: {GlobalKey<State<StatefulWidget>>? key}
    GlobalKey<State<StatefulWidget>>? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {required DrawerAlignment alignment}
    required DrawerAlignment alignment,

    /// param: {bool isDrawerOpen = false}
    required bool isDrawerOpen,

    /// param: {void Function(bool)? drawerCallback}
    DrawerCallback? drawerCallback,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {Color? scrimColor}
    Color? scrimColor,

    /// param: {double? edgeDragWidth}
    double? edgeDragWidth,

    /// param: {bool enableOpenDragGesture = true}
    required bool enableOpenDragGesture,
  }) : super(
          key: key,
          child: child,
          alignment: alignment,
          isDrawerOpen: isDrawerOpen,
          drawerCallback: drawerCallback,
          dragStartBehavior: dragStartBehavior,
          scrimColor: scrimColor,
          edgeDragWidth: edgeDragWidth,
          enableOpenDragGesture: enableOpenDragGesture,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DrawerController$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        alignment: p.getValue('alignment'),
        isDrawerOpen: p.getValue('isDrawerOpen'),
        drawerCallback: p.getValue('drawerCallback'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        scrimColor: p.getValue('scrimColor'),
        edgeDragWidth: p.getValue('edgeDragWidth'),
        enableOpenDragGesture: p.getValue('enableOpenDragGesture'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'isDrawerOpen', init: isDrawerOpen);
    mateParams.set(name: 'drawerCallback', init: drawerCallback);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'scrimColor', init: scrimColor);
    mateParams.set(name: 'edgeDragWidth', init: edgeDragWidth);
    mateParams.set(name: 'enableOpenDragGesture', init: enableOpenDragGesture);
  }
}
