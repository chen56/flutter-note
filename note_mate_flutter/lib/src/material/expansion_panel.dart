// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/expansion_panel.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class ExpansionPanel
class ExpansionPanel$Mate extends ExpansionPanel with Mate<ExpansionPanel$Mate> {
  /// ExpansionPanel ExpansionPanel({required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool isExpanded = false, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanel$Mate({
    /// param: {required Widget Function(BuildContext, bool) headerBuilder}
    required ExpansionPanelHeaderBuilder headerBuilder,

    /// param: {required Widget body}
    required Widget body,

    /// param: {bool isExpanded = false}
    required bool isExpanded,

    /// param: {bool canTapOnHeader = false}
    required bool canTapOnHeader,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) : super(
          headerBuilder: headerBuilder,
          body: body,
          isExpanded: isExpanded,
          canTapOnHeader: canTapOnHeader,
          backgroundColor: backgroundColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExpansionPanel$Mate(
        headerBuilder: p.getValue('headerBuilder'),
        body: p.getValue('body'),
        isExpanded: p.getValue('isExpanded'),
        canTapOnHeader: p.getValue('canTapOnHeader'),
        backgroundColor: p.getValue('backgroundColor'),
      ),
    );
    mateParams.set(name: 'headerBuilder', init: headerBuilder);
    mateParams.set(name: 'body', init: body);
    mateParams.set(name: 'isExpanded', init: isExpanded);
    mateParams.set(name: 'canTapOnHeader', init: canTapOnHeader);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
  }
}

/// class ExpansionPanelRadio extends ExpansionPanel
class ExpansionPanelRadio$Mate extends ExpansionPanelRadio with Mate<ExpansionPanelRadio$Mate> {
  /// ExpansionPanelRadio ExpansionPanelRadio({required Object value, required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanelRadio$Mate({
    /// param: {required Object value}
    required Object value,

    /// param: {required Widget Function(BuildContext, bool) headerBuilder}
    required ExpansionPanelHeaderBuilder headerBuilder,

    /// param: {required Widget body}
    required Widget body,

    /// param: {bool canTapOnHeader = false}
    required bool canTapOnHeader,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,
  }) : super(
          value: value,
          headerBuilder: headerBuilder,
          body: body,
          canTapOnHeader: canTapOnHeader,
          backgroundColor: backgroundColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExpansionPanelRadio$Mate(
        value: p.getValue('value'),
        headerBuilder: p.getValue('headerBuilder'),
        body: p.getValue('body'),
        canTapOnHeader: p.getValue('canTapOnHeader'),
        backgroundColor: p.getValue('backgroundColor'),
      ),
    );
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'headerBuilder', init: headerBuilder);
    mateParams.set(name: 'body', init: body);
    mateParams.set(name: 'canTapOnHeader', init: canTapOnHeader);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
  }
}

/// class ExpansionPanelList extends StatefulWidget
class ExpansionPanelList$Mate extends ExpansionPanelList with WidgetMate<ExpansionPanelList$Mate> {
  /// ExpansionPanelList ExpansionPanelList({Key? key, List<ExpansionPanel> children = const <ExpansionPanel>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelList$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {List<ExpansionPanel> children = const <ExpansionPanel>[]}
    required List<ExpansionPanel> children,

    /// param: {void Function(int, bool)? expansionCallback}
    ExpansionPanelCallback? expansionCallback,

    /// param: {Duration animationDuration = kThemeAnimationDuration}
    required Duration animationDuration,

    /// param: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding}
    required EdgeInsets expandedHeaderPadding,

    /// param: {Color? dividerColor}
    Color? dividerColor,

    /// param: {double elevation = 2}
    required double elevation,

    /// param: {Color? expandIconColor}
    Color? expandIconColor,
  }) : super(
          key: key,
          children: children,
          expansionCallback: expansionCallback,
          animationDuration: animationDuration,
          expandedHeaderPadding: expandedHeaderPadding,
          dividerColor: dividerColor,
          elevation: elevation,
          expandIconColor: expandIconColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExpansionPanelList$Mate(
        key: p.getValue('key'),
        children: p.getValue('children'),
        expansionCallback: p.getValue('expansionCallback'),
        animationDuration: p.getValue('animationDuration'),
        expandedHeaderPadding: p.getValue('expandedHeaderPadding'),
        dividerColor: p.getValue('dividerColor'),
        elevation: p.getValue('elevation'),
        expandIconColor: p.getValue('expandIconColor'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'expansionCallback', init: expansionCallback);
    mateParams.set(name: 'animationDuration', init: animationDuration);
    mateParams.set(name: 'expandedHeaderPadding', init: expandedHeaderPadding);
    mateParams.set(name: 'dividerColor', init: dividerColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'expandIconColor', init: expandIconColor);
  }

  /// ExpansionPanelList ExpansionPanelList.radio({Key? key, List<ExpansionPanel> children = const <ExpansionPanelRadio>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, Object? initialOpenPanelValue, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelList$Mate.radio({
    /// param: {Key? key}
    Key? key,

    /// param: {List<ExpansionPanel> children = const <ExpansionPanelRadio>[]}
    required List<ExpansionPanel> children,

    /// param: {void Function(int, bool)? expansionCallback}
    ExpansionPanelCallback? expansionCallback,

    /// param: {Duration animationDuration = kThemeAnimationDuration}
    required Duration animationDuration,

    /// param: {Object? initialOpenPanelValue}
    Object? initialOpenPanelValue,

    /// param: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding}
    required EdgeInsets expandedHeaderPadding,

    /// param: {Color? dividerColor}
    Color? dividerColor,

    /// param: {double elevation = 2}
    required double elevation,

    /// param: {Color? expandIconColor}
    Color? expandIconColor,
  }) : super.radio(
          key: key,
          children: children,
          expansionCallback: expansionCallback,
          animationDuration: animationDuration,
          initialOpenPanelValue: initialOpenPanelValue,
          expandedHeaderPadding: expandedHeaderPadding,
          dividerColor: dividerColor,
          elevation: elevation,
          expandIconColor: expandIconColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExpansionPanelList$Mate.radio(
        key: p.getValue('key'),
        children: p.getValue('children'),
        expansionCallback: p.getValue('expansionCallback'),
        animationDuration: p.getValue('animationDuration'),
        initialOpenPanelValue: p.getValue('initialOpenPanelValue'),
        expandedHeaderPadding: p.getValue('expandedHeaderPadding'),
        dividerColor: p.getValue('dividerColor'),
        elevation: p.getValue('elevation'),
        expandIconColor: p.getValue('expandIconColor'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'expansionCallback', init: expansionCallback);
    mateParams.set(name: 'animationDuration', init: animationDuration);
    mateParams.set(name: 'initialOpenPanelValue', init: initialOpenPanelValue);
    mateParams.set(name: 'expandedHeaderPadding', init: expandedHeaderPadding);
    mateParams.set(name: 'dividerColor', init: dividerColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'expandIconColor', init: expandIconColor);
  }
}
