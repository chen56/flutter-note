// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class SliderTheme extends InheritedTheme
class SliderTheme$Mate extends SliderTheme with WidgetMate<SliderTheme$Mate> {
  /// SliderTheme SliderTheme({Key? key, required SliderThemeData data, required Widget child})
  SliderTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliderThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required SliderThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliderTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}

/// class SliderThemeData with Diagnosticable
class SliderThemeData$Mate extends SliderThemeData with Mate<SliderThemeData$Mate> {
  /// SliderThemeData SliderThemeData({double? trackHeight, Color? activeTrackColor, Color? inactiveTrackColor, Color? secondaryActiveTrackColor, Color? disabledActiveTrackColor, Color? disabledInactiveTrackColor, Color? disabledSecondaryActiveTrackColor, Color? activeTickMarkColor, Color? inactiveTickMarkColor, Color? disabledActiveTickMarkColor, Color? disabledInactiveTickMarkColor, Color? thumbColor, Color? overlappingShapeStrokeColor, Color? disabledThumbColor, Color? overlayColor, Color? valueIndicatorColor, SliderComponentShape? overlayShape, SliderTickMarkShape? tickMarkShape, SliderComponentShape? thumbShape, SliderTrackShape? trackShape, SliderComponentShape? valueIndicatorShape, RangeSliderTickMarkShape? rangeTickMarkShape, RangeSliderThumbShape? rangeThumbShape, RangeSliderTrackShape? rangeTrackShape, RangeSliderValueIndicatorShape? rangeValueIndicatorShape, ShowValueIndicator? showValueIndicator, TextStyle? valueIndicatorTextStyle, double? minThumbSeparation, Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector, MaterialStateProperty<MouseCursor?>? mouseCursor})
  SliderThemeData$Mate({
    /// optionalParameters: {double? trackHeight} , hasDefaultValue:false, defaultValueCode:null
    double? trackHeight,

    /// optionalParameters: {Color? activeTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveTrackColor,

    /// optionalParameters: {Color? secondaryActiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryActiveTrackColor,

    /// optionalParameters: {Color? disabledActiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledActiveTrackColor,

    /// optionalParameters: {Color? disabledInactiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledInactiveTrackColor,

    /// optionalParameters: {Color? disabledSecondaryActiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledSecondaryActiveTrackColor,

    /// optionalParameters: {Color? activeTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeTickMarkColor,

    /// optionalParameters: {Color? inactiveTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveTickMarkColor,

    /// optionalParameters: {Color? disabledActiveTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledActiveTickMarkColor,

    /// optionalParameters: {Color? disabledInactiveTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledInactiveTickMarkColor,

    /// optionalParameters: {Color? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? thumbColor,

    /// optionalParameters: {Color? overlappingShapeStrokeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? overlappingShapeStrokeColor,

    /// optionalParameters: {Color? disabledThumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledThumbColor,

    /// optionalParameters: {Color? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    Color? overlayColor,

    /// optionalParameters: {Color? valueIndicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? valueIndicatorColor,

    /// optionalParameters: {SliderComponentShape? overlayShape} , hasDefaultValue:false, defaultValueCode:null
    SliderComponentShape? overlayShape,

    /// optionalParameters: {SliderTickMarkShape? tickMarkShape} , hasDefaultValue:false, defaultValueCode:null
    SliderTickMarkShape? tickMarkShape,

    /// optionalParameters: {SliderComponentShape? thumbShape} , hasDefaultValue:false, defaultValueCode:null
    SliderComponentShape? thumbShape,

    /// optionalParameters: {SliderTrackShape? trackShape} , hasDefaultValue:false, defaultValueCode:null
    SliderTrackShape? trackShape,

    /// optionalParameters: {SliderComponentShape? valueIndicatorShape} , hasDefaultValue:false, defaultValueCode:null
    SliderComponentShape? valueIndicatorShape,

    /// optionalParameters: {RangeSliderTickMarkShape? rangeTickMarkShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderTickMarkShape? rangeTickMarkShape,

    /// optionalParameters: {RangeSliderThumbShape? rangeThumbShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderThumbShape? rangeThumbShape,

    /// optionalParameters: {RangeSliderTrackShape? rangeTrackShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderTrackShape? rangeTrackShape,

    /// optionalParameters: {RangeSliderValueIndicatorShape? rangeValueIndicatorShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderValueIndicatorShape? rangeValueIndicatorShape,

    /// optionalParameters: {ShowValueIndicator? showValueIndicator} , hasDefaultValue:false, defaultValueCode:null
    ShowValueIndicator? showValueIndicator,

    /// optionalParameters: {TextStyle? valueIndicatorTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? valueIndicatorTextStyle,

    /// optionalParameters: {double? minThumbSeparation} , hasDefaultValue:false, defaultValueCode:null
    double? minThumbSeparation,

    /// optionalParameters: {Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector} , hasDefaultValue:false, defaultValueCode:null
    RangeThumbSelector? thumbSelector,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          trackHeight: trackHeight,
          activeTrackColor: activeTrackColor,
          inactiveTrackColor: inactiveTrackColor,
          secondaryActiveTrackColor: secondaryActiveTrackColor,
          disabledActiveTrackColor: disabledActiveTrackColor,
          disabledInactiveTrackColor: disabledInactiveTrackColor,
          disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
          activeTickMarkColor: activeTickMarkColor,
          inactiveTickMarkColor: inactiveTickMarkColor,
          disabledActiveTickMarkColor: disabledActiveTickMarkColor,
          disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
          thumbColor: thumbColor,
          overlappingShapeStrokeColor: overlappingShapeStrokeColor,
          disabledThumbColor: disabledThumbColor,
          overlayColor: overlayColor,
          valueIndicatorColor: valueIndicatorColor,
          overlayShape: overlayShape,
          tickMarkShape: tickMarkShape,
          thumbShape: thumbShape,
          trackShape: trackShape,
          valueIndicatorShape: valueIndicatorShape,
          rangeTickMarkShape: rangeTickMarkShape,
          rangeThumbShape: rangeThumbShape,
          rangeTrackShape: rangeTrackShape,
          rangeValueIndicatorShape: rangeValueIndicatorShape,
          showValueIndicator: showValueIndicator,
          valueIndicatorTextStyle: valueIndicatorTextStyle,
          minThumbSeparation: minThumbSeparation,
          thumbSelector: thumbSelector,
          mouseCursor: mouseCursor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SliderThemeData$Mate(
        trackHeight: p.getValue('trackHeight'),
        activeTrackColor: p.getValue('activeTrackColor'),
        inactiveTrackColor: p.getValue('inactiveTrackColor'),
        secondaryActiveTrackColor: p.getValue('secondaryActiveTrackColor'),
        disabledActiveTrackColor: p.getValue('disabledActiveTrackColor'),
        disabledInactiveTrackColor: p.getValue('disabledInactiveTrackColor'),
        disabledSecondaryActiveTrackColor: p.getValue('disabledSecondaryActiveTrackColor'),
        activeTickMarkColor: p.getValue('activeTickMarkColor'),
        inactiveTickMarkColor: p.getValue('inactiveTickMarkColor'),
        disabledActiveTickMarkColor: p.getValue('disabledActiveTickMarkColor'),
        disabledInactiveTickMarkColor: p.getValue('disabledInactiveTickMarkColor'),
        thumbColor: p.getValue('thumbColor'),
        overlappingShapeStrokeColor: p.getValue('overlappingShapeStrokeColor'),
        disabledThumbColor: p.getValue('disabledThumbColor'),
        overlayColor: p.getValue('overlayColor'),
        valueIndicatorColor: p.getValue('valueIndicatorColor'),
        overlayShape: p.getValue('overlayShape'),
        tickMarkShape: p.getValue('tickMarkShape'),
        thumbShape: p.getValue('thumbShape'),
        trackShape: p.getValue('trackShape'),
        valueIndicatorShape: p.getValue('valueIndicatorShape'),
        rangeTickMarkShape: p.getValue('rangeTickMarkShape'),
        rangeThumbShape: p.getValue('rangeThumbShape'),
        rangeTrackShape: p.getValue('rangeTrackShape'),
        rangeValueIndicatorShape: p.getValue('rangeValueIndicatorShape'),
        showValueIndicator: p.getValue('showValueIndicator'),
        valueIndicatorTextStyle: p.getValue('valueIndicatorTextStyle'),
        minThumbSeparation: p.getValue('minThumbSeparation'),
        thumbSelector: p.getValue('thumbSelector'),
        mouseCursor: p.getValue('mouseCursor'),
      ),
    );
    mateParams.set(name: 'trackHeight', init: trackHeight);
    mateParams.set(name: 'activeTrackColor', init: activeTrackColor);
    mateParams.set(name: 'inactiveTrackColor', init: inactiveTrackColor);
    mateParams.set(name: 'secondaryActiveTrackColor', init: secondaryActiveTrackColor);
    mateParams.set(name: 'disabledActiveTrackColor', init: disabledActiveTrackColor);
    mateParams.set(name: 'disabledInactiveTrackColor', init: disabledInactiveTrackColor);
    mateParams.set(name: 'disabledSecondaryActiveTrackColor', init: disabledSecondaryActiveTrackColor);
    mateParams.set(name: 'activeTickMarkColor', init: activeTickMarkColor);
    mateParams.set(name: 'inactiveTickMarkColor', init: inactiveTickMarkColor);
    mateParams.set(name: 'disabledActiveTickMarkColor', init: disabledActiveTickMarkColor);
    mateParams.set(name: 'disabledInactiveTickMarkColor', init: disabledInactiveTickMarkColor);
    mateParams.set(name: 'thumbColor', init: thumbColor);
    mateParams.set(name: 'overlappingShapeStrokeColor', init: overlappingShapeStrokeColor);
    mateParams.set(name: 'disabledThumbColor', init: disabledThumbColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'valueIndicatorColor', init: valueIndicatorColor);
    mateParams.set(name: 'overlayShape', init: overlayShape);
    mateParams.set(name: 'tickMarkShape', init: tickMarkShape);
    mateParams.set(name: 'thumbShape', init: thumbShape);
    mateParams.set(name: 'trackShape', init: trackShape);
    mateParams.set(name: 'valueIndicatorShape', init: valueIndicatorShape);
    mateParams.set(name: 'rangeTickMarkShape', init: rangeTickMarkShape);
    mateParams.set(name: 'rangeThumbShape', init: rangeThumbShape);
    mateParams.set(name: 'rangeTrackShape', init: rangeTrackShape);
    mateParams.set(name: 'rangeValueIndicatorShape', init: rangeValueIndicatorShape);
    mateParams.set(name: 'showValueIndicator', init: showValueIndicator);
    mateParams.set(name: 'valueIndicatorTextStyle', init: valueIndicatorTextStyle);
    mateParams.set(name: 'minThumbSeparation', init: minThumbSeparation);
    mateParams.set(name: 'thumbSelector', init: thumbSelector);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
  }
}

/// class RoundSliderTickMarkShape extends SliderTickMarkShape
class RoundSliderTickMarkShape$Mate extends RoundSliderTickMarkShape with Mate<RoundSliderTickMarkShape$Mate> {
  /// RoundSliderTickMarkShape RoundSliderTickMarkShape({double? tickMarkRadius})
  RoundSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , hasDefaultValue:false, defaultValueCode:null
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {
    mateParams = Params(
      init: this,
      builder: (p) => RoundSliderTickMarkShape$Mate(tickMarkRadius: p.getValue('tickMarkRadius')),
    );
    mateParams.set(name: 'tickMarkRadius', init: tickMarkRadius);
  }
}

/// class RoundRangeSliderTickMarkShape extends RangeSliderTickMarkShape
class RoundRangeSliderTickMarkShape$Mate extends RoundRangeSliderTickMarkShape
    with Mate<RoundRangeSliderTickMarkShape$Mate> {
  /// RoundRangeSliderTickMarkShape RoundRangeSliderTickMarkShape({double? tickMarkRadius})
  RoundRangeSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , hasDefaultValue:false, defaultValueCode:null
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {
    mateParams = Params(
      init: this,
      builder: (p) => RoundRangeSliderTickMarkShape$Mate(tickMarkRadius: p.getValue('tickMarkRadius')),
    );
    mateParams.set(name: 'tickMarkRadius', init: tickMarkRadius);
  }
}

/// class RoundSliderThumbShape extends SliderComponentShape
class RoundSliderThumbShape$Mate extends RoundSliderThumbShape with Mate<RoundSliderThumbShape$Mate> {
  /// RoundSliderThumbShape RoundSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , hasDefaultValue:true, defaultValueCode:10.0
    required double enabledThumbRadius,

    /// optionalParameters: {double? disabledThumbRadius} , hasDefaultValue:false, defaultValueCode:null
    double? disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double elevation,

    /// optionalParameters: {double pressedElevation = 6.0} , hasDefaultValue:true, defaultValueCode:6.0
    required double pressedElevation,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RoundSliderThumbShape$Mate(
        enabledThumbRadius: p.getValue('enabledThumbRadius'),
        disabledThumbRadius: p.getValue('disabledThumbRadius'),
        elevation: p.getValue('elevation'),
        pressedElevation: p.getValue('pressedElevation'),
      ),
    );
    mateParams.set(name: 'enabledThumbRadius', init: enabledThumbRadius);
    mateParams.set(name: 'disabledThumbRadius', init: disabledThumbRadius);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'pressedElevation', init: pressedElevation);
  }
}

/// class RoundRangeSliderThumbShape extends RangeSliderThumbShape
class RoundRangeSliderThumbShape$Mate extends RoundRangeSliderThumbShape with Mate<RoundRangeSliderThumbShape$Mate> {
  /// RoundRangeSliderThumbShape RoundRangeSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundRangeSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , hasDefaultValue:true, defaultValueCode:10.0
    required double enabledThumbRadius,

    /// optionalParameters: {double? disabledThumbRadius} , hasDefaultValue:false, defaultValueCode:null
    double? disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double elevation,

    /// optionalParameters: {double pressedElevation = 6.0} , hasDefaultValue:true, defaultValueCode:6.0
    required double pressedElevation,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RoundRangeSliderThumbShape$Mate(
        enabledThumbRadius: p.getValue('enabledThumbRadius'),
        disabledThumbRadius: p.getValue('disabledThumbRadius'),
        elevation: p.getValue('elevation'),
        pressedElevation: p.getValue('pressedElevation'),
      ),
    );
    mateParams.set(name: 'enabledThumbRadius', init: enabledThumbRadius);
    mateParams.set(name: 'disabledThumbRadius', init: disabledThumbRadius);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'pressedElevation', init: pressedElevation);
  }
}

/// class RoundSliderOverlayShape extends SliderComponentShape
class RoundSliderOverlayShape$Mate extends RoundSliderOverlayShape with Mate<RoundSliderOverlayShape$Mate> {
  /// RoundSliderOverlayShape RoundSliderOverlayShape({double overlayRadius = 24.0})
  RoundSliderOverlayShape$Mate(
      {
      /// optionalParameters: {double overlayRadius = 24.0} , hasDefaultValue:true, defaultValueCode:24.0
      required double overlayRadius})
      : super(overlayRadius: overlayRadius) {
    mateParams = Params(
      init: this,
      builder: (p) => RoundSliderOverlayShape$Mate(overlayRadius: p.getValue('overlayRadius')),
    );
    mateParams.set(name: 'overlayRadius', init: overlayRadius);
  }
}

/// class RangeValues
class RangeValues$Mate extends RangeValues with Mate<RangeValues$Mate> {
  /// RangeValues RangeValues(double start, double end)
  RangeValues$Mate(
    /// requiredParameters: double start
    double start,

    /// requiredParameters: double end
    double end,
  ) : super(
          start,
          end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RangeValues$Mate(
        p.getValue('start'),
        p.getValue('end'),
      ),
    );
    mateParams.set(name: 'start', init: start);
    mateParams.set(name: 'end', init: end);
  }
}

/// class RangeLabels
class RangeLabels$Mate extends RangeLabels with Mate<RangeLabels$Mate> {
  /// RangeLabels RangeLabels(String start, String end)
  RangeLabels$Mate(
    /// requiredParameters: String start
    String start,

    /// requiredParameters: String end
    String end,
  ) : super(
          start,
          end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RangeLabels$Mate(
        p.getValue('start'),
        p.getValue('end'),
      ),
    );
    mateParams.set(name: 'start', init: start);
    mateParams.set(name: 'end', init: end);
  }
}
