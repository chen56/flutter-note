// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/list_tile_theme.dart';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ListTileThemeData with Diagnosticable
class ListTileThemeData$Mate extends ListTileThemeData with Mate<ListTileThemeData$Mate> {
  /// ListTileThemeData ListTileThemeData({bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity})
  ListTileThemeData$Mate({
    /// param: {bool? dense}
    bool? dense,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {ListTileStyle? style}
    ListTileStyle? style,

    /// param: {Color? selectedColor}
    Color? selectedColor,

    /// param: {Color? iconColor}
    Color? iconColor,

    /// param: {Color? textColor}
    Color? textColor,

    /// param: {TextStyle? titleTextStyle}
    TextStyle? titleTextStyle,

    /// param: {TextStyle? subtitleTextStyle}
    TextStyle? subtitleTextStyle,

    /// param: {TextStyle? leadingAndTrailingTextStyle}
    TextStyle? leadingAndTrailingTextStyle,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {double? horizontalTitleGap}
    double? horizontalTitleGap,

    /// param: {double? minVerticalPadding}
    double? minVerticalPadding,

    /// param: {double? minLeadingWidth}
    double? minLeadingWidth,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,
  }) : super(
          dense: dense,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          enableFeedback: enableFeedback,
          mouseCursor: mouseCursor,
          visualDensity: visualDensity,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListTileThemeData$Mate(
        dense: p.getValue('dense'),
        shape: p.getValue('shape'),
        style: p.getValue('style'),
        selectedColor: p.getValue('selectedColor'),
        iconColor: p.getValue('iconColor'),
        textColor: p.getValue('textColor'),
        titleTextStyle: p.getValue('titleTextStyle'),
        subtitleTextStyle: p.getValue('subtitleTextStyle'),
        leadingAndTrailingTextStyle: p.getValue('leadingAndTrailingTextStyle'),
        contentPadding: p.getValue('contentPadding'),
        tileColor: p.getValue('tileColor'),
        selectedTileColor: p.getValue('selectedTileColor'),
        horizontalTitleGap: p.getValue('horizontalTitleGap'),
        minVerticalPadding: p.getValue('minVerticalPadding'),
        minLeadingWidth: p.getValue('minLeadingWidth'),
        enableFeedback: p.getValue('enableFeedback'),
        mouseCursor: p.getValue('mouseCursor'),
        visualDensity: p.getValue('visualDensity'),
      ),
    );
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'selectedColor', init: selectedColor);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'textColor', init: textColor);
    mateParams.set(name: 'titleTextStyle', init: titleTextStyle);
    mateParams.set(name: 'subtitleTextStyle', init: subtitleTextStyle);
    mateParams.set(name: 'leadingAndTrailingTextStyle', init: leadingAndTrailingTextStyle);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'horizontalTitleGap', init: horizontalTitleGap);
    mateParams.set(name: 'minVerticalPadding', init: minVerticalPadding);
    mateParams.set(name: 'minLeadingWidth', init: minLeadingWidth);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'visualDensity', init: visualDensity);
  }
}

/// class ListTileTheme extends InheritedTheme
class ListTileTheme$Mate extends ListTileTheme with WidgetMate<ListTileTheme$Mate> {
  /// ListTileTheme ListTileTheme({Key? key, ListTileThemeData? data, bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, required Widget child})
  ListTileTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ListTileThemeData? data}
    ListTileThemeData? data,

    /// param: {bool? dense}
    bool? dense,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {ListTileStyle? style}
    ListTileStyle? style,

    /// param: {Color? selectedColor}
    Color? selectedColor,

    /// param: {Color? iconColor}
    Color? iconColor,

    /// param: {Color? textColor}
    Color? textColor,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// param: {double? horizontalTitleGap}
    double? horizontalTitleGap,

    /// param: {double? minVerticalPadding}
    double? minVerticalPadding,

    /// param: {double? minLeadingWidth}
    double? minLeadingWidth,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          dense: dense,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          contentPadding: contentPadding,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          mouseCursor: mouseCursor,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListTileTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        dense: p.getValue('dense'),
        shape: p.getValue('shape'),
        style: p.getValue('style'),
        selectedColor: p.getValue('selectedColor'),
        iconColor: p.getValue('iconColor'),
        textColor: p.getValue('textColor'),
        contentPadding: p.getValue('contentPadding'),
        tileColor: p.getValue('tileColor'),
        selectedTileColor: p.getValue('selectedTileColor'),
        enableFeedback: p.getValue('enableFeedback'),
        mouseCursor: p.getValue('mouseCursor'),
        horizontalTitleGap: p.getValue('horizontalTitleGap'),
        minVerticalPadding: p.getValue('minVerticalPadding'),
        minLeadingWidth: p.getValue('minLeadingWidth'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'selectedColor', init: selectedColor);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'textColor', init: textColor);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'horizontalTitleGap', init: horizontalTitleGap);
    mateParams.set(name: 'minVerticalPadding', init: minVerticalPadding);
    mateParams.set(name: 'minLeadingWidth', init: minLeadingWidth);
    mateParams.set(name: 'child', init: child);
  }
}
