// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/bottom_navigation_bar_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/bottom_navigation_bar.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class BottomNavigationBarThemeData with Diagnosticable
class BottomNavigationBarThemeData$Mate extends BottomNavigationBarThemeData
    with Mate<BottomNavigationBarThemeData$Mate> {
  /// BottomNavigationBarThemeData BottomNavigationBarThemeData({Color? backgroundColor, double? elevation, IconThemeData? selectedIconTheme, IconThemeData? unselectedIconTheme, Color? selectedItemColor, Color? unselectedItemColor, TextStyle? selectedLabelStyle, TextStyle? unselectedLabelStyle, bool? showSelectedLabels, bool? showUnselectedLabels, BottomNavigationBarType? type, bool? enableFeedback, BottomNavigationBarLandscapeLayout? landscapeLayout, MaterialStateProperty<MouseCursor?>? mouseCursor})
  BottomNavigationBarThemeData$Mate({
    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {IconThemeData? selectedIconTheme}
    IconThemeData? selectedIconTheme,

    /// param: {IconThemeData? unselectedIconTheme}
    IconThemeData? unselectedIconTheme,

    /// param: {Color? selectedItemColor}
    Color? selectedItemColor,

    /// param: {Color? unselectedItemColor}
    Color? unselectedItemColor,

    /// param: {TextStyle? selectedLabelStyle}
    TextStyle? selectedLabelStyle,

    /// param: {TextStyle? unselectedLabelStyle}
    TextStyle? unselectedLabelStyle,

    /// param: {bool? showSelectedLabels}
    bool? showSelectedLabels,

    /// param: {bool? showUnselectedLabels}
    bool? showUnselectedLabels,

    /// param: {BottomNavigationBarType? type}
    BottomNavigationBarType? type,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {BottomNavigationBarLandscapeLayout? landscapeLayout}
    BottomNavigationBarLandscapeLayout? landscapeLayout,

    /// param: {MaterialStateProperty<MouseCursor?>? mouseCursor}
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          selectedIconTheme: selectedIconTheme,
          unselectedIconTheme: unselectedIconTheme,
          selectedItemColor: selectedItemColor,
          unselectedItemColor: unselectedItemColor,
          selectedLabelStyle: selectedLabelStyle,
          unselectedLabelStyle: unselectedLabelStyle,
          showSelectedLabels: showSelectedLabels,
          showUnselectedLabels: showUnselectedLabels,
          type: type,
          enableFeedback: enableFeedback,
          landscapeLayout: landscapeLayout,
          mouseCursor: mouseCursor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BottomNavigationBarThemeData$Mate(
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        selectedIconTheme: p.getValue('selectedIconTheme'),
        unselectedIconTheme: p.getValue('unselectedIconTheme'),
        selectedItemColor: p.getValue('selectedItemColor'),
        unselectedItemColor: p.getValue('unselectedItemColor'),
        selectedLabelStyle: p.getValue('selectedLabelStyle'),
        unselectedLabelStyle: p.getValue('unselectedLabelStyle'),
        showSelectedLabels: p.getValue('showSelectedLabels'),
        showUnselectedLabels: p.getValue('showUnselectedLabels'),
        type: p.getValue('type'),
        enableFeedback: p.getValue('enableFeedback'),
        landscapeLayout: p.getValue('landscapeLayout'),
        mouseCursor: p.getValue('mouseCursor'),
      ),
    );
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'selectedIconTheme', init: selectedIconTheme);
    mateParams.set(name: 'unselectedIconTheme', init: unselectedIconTheme);
    mateParams.set(name: 'selectedItemColor', init: selectedItemColor);
    mateParams.set(name: 'unselectedItemColor', init: unselectedItemColor);
    mateParams.set(name: 'selectedLabelStyle', init: selectedLabelStyle);
    mateParams.set(name: 'unselectedLabelStyle', init: unselectedLabelStyle);
    mateParams.set(name: 'showSelectedLabels', init: showSelectedLabels);
    mateParams.set(name: 'showUnselectedLabels', init: showUnselectedLabels);
    mateParams.set(name: 'type', init: type);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'landscapeLayout', init: landscapeLayout);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
  }
}

/// class BottomNavigationBarTheme extends InheritedWidget
class BottomNavigationBarTheme$Mate extends BottomNavigationBarTheme with WidgetMate<BottomNavigationBarTheme$Mate> {
  /// BottomNavigationBarTheme BottomNavigationBarTheme({Key? key, required BottomNavigationBarThemeData data, required Widget child})
  BottomNavigationBarTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required BottomNavigationBarThemeData data}
    required BottomNavigationBarThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => BottomNavigationBarTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
