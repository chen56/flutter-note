// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/switch_list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:note/mate.dart';

/// class SwitchListTile extends StatelessWidget
class SwitchListTile$Mate extends SwitchListTile with WidgetMate<SwitchListTile$Mate> {
  /// SwitchListTile SwitchListTile({Key? key, required bool value, required void Function(bool)? onChanged, Color? tileColor, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, ImageProvider<Object>? inactiveThumbImage, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, EdgeInsetsGeometry? contentPadding, Widget? secondary, bool selected = false, bool autofocus = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, ShapeBorder? shape, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback, Color? hoverColor, MaterialStateProperty<Color?>? trackOutlineColor})
  SwitchListTile$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool value}
    required bool value,

    /// param: {required void Function(bool)? onChanged}
    required ValueChanged<bool>? onChanged,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,

    /// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? subtitle}
    Widget? subtitle,

    /// param: {bool isThreeLine = false}
    required bool isThreeLine,

    /// param: {bool? dense}
    bool? dense,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {Widget? secondary}
    Widget? secondary,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          tileColor: tileColor,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          inactiveThumbImage: inactiveThumbImage,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          contentPadding: contentPadding,
          secondary: secondary,
          selected: selected,
          autofocus: autofocus,
          controlAffinity: controlAffinity,
          shape: shape,
          selectedTileColor: selectedTileColor,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
          hoverColor: hoverColor,
          trackOutlineColor: trackOutlineColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SwitchListTile$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        onChanged: p.getValue('onChanged'),
        tileColor: p.getValue('tileColor'),
        activeColor: p.getValue('activeColor'),
        activeTrackColor: p.getValue('activeTrackColor'),
        inactiveThumbColor: p.getValue('inactiveThumbColor'),
        inactiveTrackColor: p.getValue('inactiveTrackColor'),
        activeThumbImage: p.getValue('activeThumbImage'),
        inactiveThumbImage: p.getValue('inactiveThumbImage'),
        title: p.getValue('title'),
        subtitle: p.getValue('subtitle'),
        isThreeLine: p.getValue('isThreeLine'),
        dense: p.getValue('dense'),
        contentPadding: p.getValue('contentPadding'),
        secondary: p.getValue('secondary'),
        selected: p.getValue('selected'),
        autofocus: p.getValue('autofocus'),
        controlAffinity: p.getValue('controlAffinity'),
        shape: p.getValue('shape'),
        selectedTileColor: p.getValue('selectedTileColor'),
        visualDensity: p.getValue('visualDensity'),
        focusNode: p.getValue('focusNode'),
        onFocusChange: p.getValue('onFocusChange'),
        enableFeedback: p.getValue('enableFeedback'),
        hoverColor: p.getValue('hoverColor'),
        trackOutlineColor: p.getValue('trackOutlineColor'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'activeTrackColor', init: activeTrackColor);
    mateParams.set(name: 'inactiveThumbColor', init: inactiveThumbColor);
    mateParams.set(name: 'inactiveTrackColor', init: inactiveTrackColor);
    mateParams.set(name: 'activeThumbImage', init: activeThumbImage);
    mateParams.set(name: 'inactiveThumbImage', init: inactiveThumbImage);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'subtitle', init: subtitle);
    mateParams.set(name: 'isThreeLine', init: isThreeLine);
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'secondary', init: secondary);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'controlAffinity', init: controlAffinity);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'trackOutlineColor', init: trackOutlineColor);
  }

  /// SwitchListTile SwitchListTile.adaptive({Key? key, required bool value, required void Function(bool)? onChanged, Color? tileColor, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, ImageProvider<Object>? inactiveThumbImage, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, EdgeInsetsGeometry? contentPadding, Widget? secondary, bool selected = false, bool autofocus = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, ShapeBorder? shape, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback, Color? hoverColor, MaterialStateProperty<Color?>? trackOutlineColor})
  SwitchListTile$Mate.adaptive({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool value}
    required bool value,

    /// param: {required void Function(bool)? onChanged}
    required ValueChanged<bool>? onChanged,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,

    /// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? subtitle}
    Widget? subtitle,

    /// param: {bool isThreeLine = false}
    required bool isThreeLine,

    /// param: {bool? dense}
    bool? dense,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {Widget? secondary}
    Widget? secondary,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,
  }) : super.adaptive(
          key: key,
          value: value,
          onChanged: onChanged,
          tileColor: tileColor,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          inactiveThumbImage: inactiveThumbImage,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          contentPadding: contentPadding,
          secondary: secondary,
          selected: selected,
          autofocus: autofocus,
          controlAffinity: controlAffinity,
          shape: shape,
          selectedTileColor: selectedTileColor,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
          hoverColor: hoverColor,
          trackOutlineColor: trackOutlineColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SwitchListTile$Mate.adaptive(
        key: p.getValue('key'),
        value: p.getValue('value'),
        onChanged: p.getValue('onChanged'),
        tileColor: p.getValue('tileColor'),
        activeColor: p.getValue('activeColor'),
        activeTrackColor: p.getValue('activeTrackColor'),
        inactiveThumbColor: p.getValue('inactiveThumbColor'),
        inactiveTrackColor: p.getValue('inactiveTrackColor'),
        activeThumbImage: p.getValue('activeThumbImage'),
        inactiveThumbImage: p.getValue('inactiveThumbImage'),
        title: p.getValue('title'),
        subtitle: p.getValue('subtitle'),
        isThreeLine: p.getValue('isThreeLine'),
        dense: p.getValue('dense'),
        contentPadding: p.getValue('contentPadding'),
        secondary: p.getValue('secondary'),
        selected: p.getValue('selected'),
        autofocus: p.getValue('autofocus'),
        controlAffinity: p.getValue('controlAffinity'),
        shape: p.getValue('shape'),
        selectedTileColor: p.getValue('selectedTileColor'),
        visualDensity: p.getValue('visualDensity'),
        focusNode: p.getValue('focusNode'),
        onFocusChange: p.getValue('onFocusChange'),
        enableFeedback: p.getValue('enableFeedback'),
        hoverColor: p.getValue('hoverColor'),
        trackOutlineColor: p.getValue('trackOutlineColor'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'activeTrackColor', init: activeTrackColor);
    mateParams.set(name: 'inactiveThumbColor', init: inactiveThumbColor);
    mateParams.set(name: 'inactiveTrackColor', init: inactiveTrackColor);
    mateParams.set(name: 'activeThumbImage', init: activeThumbImage);
    mateParams.set(name: 'inactiveThumbImage', init: inactiveThumbImage);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'subtitle', init: subtitle);
    mateParams.set(name: 'isThreeLine', init: isThreeLine);
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'secondary', init: secondary);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'controlAffinity', init: controlAffinity);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'trackOutlineColor', init: trackOutlineColor);
  }
}
