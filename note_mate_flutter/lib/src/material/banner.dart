// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/banner.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/overflow_bar.dart';
import 'package:flutter/src/animation/animation.dart';
import 'package:note/mate.dart';

/// class MaterialBanner extends StatefulWidget
class MaterialBanner$Mate extends MaterialBanner with WidgetMate<MaterialBanner$Mate> {
  /// MaterialBanner MaterialBanner({Key? key, required Widget content, TextStyle? contentTextStyle, required List<Widget> actions, double? elevation, Widget? leading, Color? backgroundColor, Color? surfaceTintColor, Color? shadowColor, Color? dividerColor, EdgeInsetsGeometry? padding, EdgeInsetsGeometry? margin, EdgeInsetsGeometry? leadingPadding, bool forceActionsBelow = false, OverflowBarAlignment overflowAlignment = OverflowBarAlignment.end, Animation<double>? animation, void Function()? onVisible})
  MaterialBanner$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget content} , hasDefaultValue:false, defaultValueCode:null
    required Widget content,

    /// optionalParameters: {TextStyle? contentTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? contentTextStyle,

    /// optionalParameters: {required List<Widget> actions} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget> actions,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? dividerColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dividerColor,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? margin,

    /// optionalParameters: {EdgeInsetsGeometry? leadingPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? leadingPadding,

    /// optionalParameters: {bool forceActionsBelow = false} , hasDefaultValue:true, defaultValueCode:false
    required bool forceActionsBelow,

    /// optionalParameters: {OverflowBarAlignment overflowAlignment = OverflowBarAlignment.end} , hasDefaultValue:true, defaultValueCode:OverflowBarAlignment.end
    required OverflowBarAlignment overflowAlignment,

    /// optionalParameters: {Animation<double>? animation} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? animation,

    /// optionalParameters: {void Function()? onVisible} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onVisible,
  }) : super(
          key: key,
          content: content,
          contentTextStyle: contentTextStyle,
          actions: actions,
          elevation: elevation,
          leading: leading,
          backgroundColor: backgroundColor,
          surfaceTintColor: surfaceTintColor,
          shadowColor: shadowColor,
          dividerColor: dividerColor,
          padding: padding,
          margin: margin,
          leadingPadding: leadingPadding,
          forceActionsBelow: forceActionsBelow,
          overflowAlignment: overflowAlignment,
          animation: animation,
          onVisible: onVisible,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MaterialBanner$Mate(
        key: p.getValue('key'),
        content: p.getValue('content'),
        contentTextStyle: p.getValue('contentTextStyle'),
        actions: p.getValue('actions'),
        elevation: p.getValue('elevation'),
        leading: p.getValue('leading'),
        backgroundColor: p.getValue('backgroundColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        shadowColor: p.getValue('shadowColor'),
        dividerColor: p.getValue('dividerColor'),
        padding: p.getValue('padding'),
        margin: p.getValue('margin'),
        leadingPadding: p.getValue('leadingPadding'),
        forceActionsBelow: p.getValue('forceActionsBelow'),
        overflowAlignment: p.getValue('overflowAlignment'),
        animation: p.getValue('animation'),
        onVisible: p.getValue('onVisible'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'content', init: content);
    mateParams.set(name: 'contentTextStyle', init: contentTextStyle);
    mateParams.set(name: 'actions', init: actions);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'leading', init: leading);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'dividerColor', init: dividerColor);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'margin', init: margin);
    mateParams.set(name: 'leadingPadding', init: leadingPadding);
    mateParams.set(name: 'forceActionsBelow', init: forceActionsBelow);
    mateParams.set(name: 'overflowAlignment', init: overflowAlignment);
    mateParams.set(name: 'animation', init: animation);
    mateParams.set(name: 'onVisible', init: onVisible);
  }
}
