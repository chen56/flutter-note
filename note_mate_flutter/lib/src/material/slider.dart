// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/slider.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class Slider extends StatefulWidget
class Slider$Mate extends Slider with WidgetMate<Slider$Mate> {
  /// Slider Slider({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  Slider$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required double value}
    required double value,

    /// param: {double? secondaryTrackValue}
    double? secondaryTrackValue,

    /// param: {required void Function(double)? onChanged}
    required ValueChanged<double>? onChanged,

    /// param: {void Function(double)? onChangeStart}
    ValueChanged<double>? onChangeStart,

    /// param: {void Function(double)? onChangeEnd}
    ValueChanged<double>? onChangeEnd,

    /// param: {double min = 0.0}
    required double min,

    /// param: {double max = 1.0}
    required double max,

    /// param: {int? divisions}
    int? divisions,

    /// param: {String? label}
    String? label,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? inactiveColor}
    Color? inactiveColor,

    /// param: {Color? secondaryActiveColor}
    Color? secondaryActiveColor,

    /// param: {Color? thumbColor}
    Color? thumbColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {String Function(double)? semanticFormatterCallback}
    SemanticFormatterCallback? semanticFormatterCallback,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,
  }) : super(
          key: key,
          value: value,
          secondaryTrackValue: secondaryTrackValue,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          label: label,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          secondaryActiveColor: secondaryActiveColor,
          thumbColor: thumbColor,
          overlayColor: overlayColor,
          mouseCursor: mouseCursor,
          semanticFormatterCallback: semanticFormatterCallback,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Slider$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        secondaryTrackValue: p.getValue('secondaryTrackValue'),
        onChanged: p.getValue('onChanged'),
        onChangeStart: p.getValue('onChangeStart'),
        onChangeEnd: p.getValue('onChangeEnd'),
        min: p.getValue('min'),
        max: p.getValue('max'),
        divisions: p.getValue('divisions'),
        label: p.getValue('label'),
        activeColor: p.getValue('activeColor'),
        inactiveColor: p.getValue('inactiveColor'),
        secondaryActiveColor: p.getValue('secondaryActiveColor'),
        thumbColor: p.getValue('thumbColor'),
        overlayColor: p.getValue('overlayColor'),
        mouseCursor: p.getValue('mouseCursor'),
        semanticFormatterCallback: p.getValue('semanticFormatterCallback'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'secondaryTrackValue', init: secondaryTrackValue);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'onChangeStart', init: onChangeStart);
    mateParams.set(name: 'onChangeEnd', init: onChangeEnd);
    mateParams.set(name: 'min', init: min);
    mateParams.set(name: 'max', init: max);
    mateParams.set(name: 'divisions', init: divisions);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'inactiveColor', init: inactiveColor);
    mateParams.set(name: 'secondaryActiveColor', init: secondaryActiveColor);
    mateParams.set(name: 'thumbColor', init: thumbColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'semanticFormatterCallback', init: semanticFormatterCallback);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
  }

  /// Slider Slider.adaptive({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, MouseCursor? mouseCursor, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  Slider$Mate.adaptive({
    /// param: {Key? key}
    Key? key,

    /// param: {required double value}
    required double value,

    /// param: {double? secondaryTrackValue}
    double? secondaryTrackValue,

    /// param: {required void Function(double)? onChanged}
    required ValueChanged<double>? onChanged,

    /// param: {void Function(double)? onChangeStart}
    ValueChanged<double>? onChangeStart,

    /// param: {void Function(double)? onChangeEnd}
    ValueChanged<double>? onChangeEnd,

    /// param: {double min = 0.0}
    required double min,

    /// param: {double max = 1.0}
    required double max,

    /// param: {int? divisions}
    int? divisions,

    /// param: {String? label}
    String? label,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? inactiveColor}
    Color? inactiveColor,

    /// param: {Color? secondaryActiveColor}
    Color? secondaryActiveColor,

    /// param: {Color? thumbColor}
    Color? thumbColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {String Function(double)? semanticFormatterCallback}
    SemanticFormatterCallback? semanticFormatterCallback,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,
  }) : super.adaptive(
          key: key,
          value: value,
          secondaryTrackValue: secondaryTrackValue,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          label: label,
          mouseCursor: mouseCursor,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          secondaryActiveColor: secondaryActiveColor,
          thumbColor: thumbColor,
          overlayColor: overlayColor,
          semanticFormatterCallback: semanticFormatterCallback,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Slider$Mate.adaptive(
        key: p.getValue('key'),
        value: p.getValue('value'),
        secondaryTrackValue: p.getValue('secondaryTrackValue'),
        onChanged: p.getValue('onChanged'),
        onChangeStart: p.getValue('onChangeStart'),
        onChangeEnd: p.getValue('onChangeEnd'),
        min: p.getValue('min'),
        max: p.getValue('max'),
        divisions: p.getValue('divisions'),
        label: p.getValue('label'),
        mouseCursor: p.getValue('mouseCursor'),
        activeColor: p.getValue('activeColor'),
        inactiveColor: p.getValue('inactiveColor'),
        secondaryActiveColor: p.getValue('secondaryActiveColor'),
        thumbColor: p.getValue('thumbColor'),
        overlayColor: p.getValue('overlayColor'),
        semanticFormatterCallback: p.getValue('semanticFormatterCallback'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'secondaryTrackValue', init: secondaryTrackValue);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'onChangeStart', init: onChangeStart);
    mateParams.set(name: 'onChangeEnd', init: onChangeEnd);
    mateParams.set(name: 'min', init: min);
    mateParams.set(name: 'max', init: max);
    mateParams.set(name: 'divisions', init: divisions);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'inactiveColor', init: inactiveColor);
    mateParams.set(name: 'secondaryActiveColor', init: secondaryActiveColor);
    mateParams.set(name: 'thumbColor', init: thumbColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'semanticFormatterCallback', init: semanticFormatterCallback);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
  }
}
