// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class Material extends StatefulWidget
class Material$Mate extends Material with WidgetMate<Material$Mate> {
  /// Material Material({Key? key, MaterialType type = MaterialType.canvas, double elevation = 0.0, Color? color, Color? shadowColor, Color? surfaceTintColor, TextStyle? textStyle, BorderRadiusGeometry? borderRadius, ShapeBorder? shape, bool borderOnForeground = true, Clip clipBehavior = Clip.none, Duration animationDuration = kThemeChangeDuration, Widget? child})
  Material$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {MaterialType type = MaterialType.canvas}
    required MaterialType type,

    /// param: {double elevation = 0.0}
    required double elevation,

    /// param: {Color? color}
    Color? color,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {TextStyle? textStyle}
    TextStyle? textStyle,

    /// param: {BorderRadiusGeometry? borderRadius}
    BorderRadiusGeometry? borderRadius,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {bool borderOnForeground = true}
    required bool borderOnForeground,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {Duration animationDuration = kThemeChangeDuration}
    required Duration animationDuration,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          type: type,
          elevation: elevation,
          color: color,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          textStyle: textStyle,
          borderRadius: borderRadius,
          shape: shape,
          borderOnForeground: borderOnForeground,
          clipBehavior: clipBehavior,
          animationDuration: animationDuration,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Material$Mate(
        key: p.getValue('key'),
        type: p.getValue('type'),
        elevation: p.getValue('elevation'),
        color: p.getValue('color'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        textStyle: p.getValue('textStyle'),
        borderRadius: p.getValue('borderRadius'),
        shape: p.getValue('shape'),
        borderOnForeground: p.getValue('borderOnForeground'),
        clipBehavior: p.getValue('clipBehavior'),
        animationDuration: p.getValue('animationDuration'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'type', init: type);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'textStyle', init: textStyle);
    mateParams.set(name: 'borderRadius', init: borderRadius);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'borderOnForeground', init: borderOnForeground);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'animationDuration', init: animationDuration);
    mateParams.set(name: 'child', init: child);
  }
}

/// class ShapeBorderTween extends Tween<ShapeBorder?>
class ShapeBorderTween$Mate extends ShapeBorderTween with Mate<ShapeBorderTween$Mate> {
  /// ShapeBorderTween ShapeBorderTween({ShapeBorder? begin, ShapeBorder? end})
  ShapeBorderTween$Mate({
    /// param: {ShapeBorder? begin}
    ShapeBorder? begin,

    /// param: {ShapeBorder? end}
    ShapeBorder? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ShapeBorderTween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}
