// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/checkbox.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';

/// class Checkbox extends StatefulWidget
class Checkbox$Mate extends Checkbox with WidgetMate<Checkbox$Mate> {
  /// Checkbox Checkbox({Key? key, required bool? value, bool tristate = false, required void Function(bool?)? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false, OutlinedBorder? shape, BorderSide? side, bool isError = false})
  Checkbox$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool? value}
    required bool? value,

    /// param: {bool tristate = false}
    required bool tristate,

    /// param: {required void Function(bool?)? onChanged}
    required ValueChanged<bool?>? onChanged,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {MaterialStateProperty<Color?>? fillColor}
    MaterialStateProperty<Color?>? fillColor,

    /// param: {Color? checkColor}
    Color? checkColor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {double? splashRadius}
    double? splashRadius,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {BorderSide? side}
    BorderSide? side,

    /// param: {bool isError = false}
    required bool isError,
  }) : super(
          key: key,
          value: value,
          tristate: tristate,
          onChanged: onChanged,
          mouseCursor: mouseCursor,
          activeColor: activeColor,
          fillColor: fillColor,
          checkColor: checkColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
          focusNode: focusNode,
          autofocus: autofocus,
          shape: shape,
          side: side,
          isError: isError,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Checkbox$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        tristate: p.getValue('tristate'),
        onChanged: p.getValue('onChanged'),
        mouseCursor: p.getValue('mouseCursor'),
        activeColor: p.getValue('activeColor'),
        fillColor: p.getValue('fillColor'),
        checkColor: p.getValue('checkColor'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        overlayColor: p.getValue('overlayColor'),
        splashRadius: p.getValue('splashRadius'),
        materialTapTargetSize: p.getValue('materialTapTargetSize'),
        visualDensity: p.getValue('visualDensity'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        shape: p.getValue('shape'),
        side: p.getValue('side'),
        isError: p.getValue('isError'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'tristate', init: tristate);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'fillColor', init: fillColor);
    mateParams.set(name: 'checkColor', init: checkColor);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'splashRadius', init: splashRadius);
    mateParams.set(name: 'materialTapTargetSize', init: materialTapTargetSize);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'side', init: side);
    mateParams.set(name: 'isError', init: isError);
  }
}
