// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/desktop_text_selection_toolbar_button.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';

/// class DesktopTextSelectionToolbarButton extends StatelessWidget
class DesktopTextSelectionToolbarButton$Mate extends DesktopTextSelectionToolbarButton
    with WidgetMate<DesktopTextSelectionToolbarButton$Mate> {
  /// DesktopTextSelectionToolbarButton DesktopTextSelectionToolbarButton({Key? key, required void Function() onPressed, required Widget child})
  DesktopTextSelectionToolbarButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required void Function() onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback onPressed,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          onPressed: onPressed,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DesktopTextSelectionToolbarButton$Mate(
        key: p.getValue('key'),
        onPressed: p.getValue('onPressed'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'onPressed', init: onPressed);
    mateParams.set(name: 'child', init: child);
  }

  /// DesktopTextSelectionToolbarButton DesktopTextSelectionToolbarButton.text({Key? key, required BuildContext context, required void Function() onPressed, required String text})
  DesktopTextSelectionToolbarButton$Mate.text({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
    required BuildContext context,

    /// optionalParameters: {required void Function() onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback onPressed,

    /// optionalParameters: {required String text} , hasDefaultValue:false, defaultValueCode:null
    required String text,
  }) : super.text(
          key: key,
          context: context,
          onPressed: onPressed,
          text: text,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DesktopTextSelectionToolbarButton$Mate.text(
        key: p.getValue('key'),
        context: p.getValue('context'),
        onPressed: p.getValue('onPressed'),
        text: p.getValue('text'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'context', init: context);
    mateParams.set(name: 'onPressed', init: onPressed);
    mateParams.set(name: 'text', init: text);
  }
}
