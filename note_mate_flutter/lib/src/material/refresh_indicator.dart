// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/refresh_indicator.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:note/mate.dart';

/// class RefreshIndicator extends StatefulWidget
class RefreshIndicator$Mate extends RefreshIndicator with WidgetMate<RefreshIndicator$Mate> {
  /// RefreshIndicator RefreshIndicator({Key? key, required Widget child, double displacement = 40.0, double edgeOffset = 0.0, required Future<void> Function() onRefresh, Color? color, Color? backgroundColor, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, String? semanticsLabel, String? semanticsValue, double strokeWidth = RefreshProgressIndicator.defaultStrokeWidth, RefreshIndicatorTriggerMode triggerMode = RefreshIndicatorTriggerMode.onEdge})
  RefreshIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {double displacement = 40.0}
    required double displacement,

    /// param: {double edgeOffset = 0.0}
    required double edgeOffset,

    /// param: {required Future<void> Function() onRefresh}
    required RefreshCallback onRefresh,

    /// param: {Color? color}
    Color? color,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate}
    required ScrollNotificationPredicate notificationPredicate,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,

    /// param: {double strokeWidth = RefreshProgressIndicator.defaultStrokeWidth}
    required double strokeWidth,

    /// param: {RefreshIndicatorTriggerMode triggerMode = RefreshIndicatorTriggerMode.onEdge}
    required RefreshIndicatorTriggerMode triggerMode,
  }) : super(
          key: key,
          child: child,
          displacement: displacement,
          edgeOffset: edgeOffset,
          onRefresh: onRefresh,
          color: color,
          backgroundColor: backgroundColor,
          notificationPredicate: notificationPredicate,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
          strokeWidth: strokeWidth,
          triggerMode: triggerMode,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RefreshIndicator$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        displacement: p.getValue('displacement'),
        edgeOffset: p.getValue('edgeOffset'),
        onRefresh: p.getValue('onRefresh'),
        color: p.getValue('color'),
        backgroundColor: p.getValue('backgroundColor'),
        notificationPredicate: p.getValue('notificationPredicate'),
        semanticsLabel: p.getValue('semanticsLabel'),
        semanticsValue: p.getValue('semanticsValue'),
        strokeWidth: p.getValue('strokeWidth'),
        triggerMode: p.getValue('triggerMode'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'displacement', init: displacement);
    mateParams.set(name: 'edgeOffset', init: edgeOffset);
    mateParams.set(name: 'onRefresh', init: onRefresh);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'notificationPredicate', init: notificationPredicate);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'semanticsValue', init: semanticsValue);
    mateParams.set(name: 'strokeWidth', init: strokeWidth);
    mateParams.set(name: 'triggerMode', init: triggerMode);
  }
}
