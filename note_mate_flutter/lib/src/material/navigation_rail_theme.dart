// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class NavigationRailThemeData with Diagnosticable
class NavigationRailThemeData$Mate extends NavigationRailThemeData with Mate<NavigationRailThemeData$Mate> {
  /// NavigationRailThemeData NavigationRailThemeData({Color? backgroundColor, double? elevation, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? groupAlignment, NavigationRailLabelType? labelType, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape, double? minWidth, double? minExtendedWidth})
  NavigationRailThemeData$Mate({
    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {TextStyle? unselectedLabelTextStyle}
    TextStyle? unselectedLabelTextStyle,

    /// param: {TextStyle? selectedLabelTextStyle}
    TextStyle? selectedLabelTextStyle,

    /// param: {IconThemeData? unselectedIconTheme}
    IconThemeData? unselectedIconTheme,

    /// param: {IconThemeData? selectedIconTheme}
    IconThemeData? selectedIconTheme,

    /// param: {double? groupAlignment}
    double? groupAlignment,

    /// param: {NavigationRailLabelType? labelType}
    NavigationRailLabelType? labelType,

    /// param: {bool? useIndicator}
    bool? useIndicator,

    /// param: {Color? indicatorColor}
    Color? indicatorColor,

    /// param: {ShapeBorder? indicatorShape}
    ShapeBorder? indicatorShape,

    /// param: {double? minWidth}
    double? minWidth,

    /// param: {double? minExtendedWidth}
    double? minExtendedWidth,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          groupAlignment: groupAlignment,
          labelType: labelType,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationRailThemeData$Mate(
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        unselectedLabelTextStyle: p.getValue('unselectedLabelTextStyle'),
        selectedLabelTextStyle: p.getValue('selectedLabelTextStyle'),
        unselectedIconTheme: p.getValue('unselectedIconTheme'),
        selectedIconTheme: p.getValue('selectedIconTheme'),
        groupAlignment: p.getValue('groupAlignment'),
        labelType: p.getValue('labelType'),
        useIndicator: p.getValue('useIndicator'),
        indicatorColor: p.getValue('indicatorColor'),
        indicatorShape: p.getValue('indicatorShape'),
        minWidth: p.getValue('minWidth'),
        minExtendedWidth: p.getValue('minExtendedWidth'),
      ),
    );
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'unselectedLabelTextStyle', init: unselectedLabelTextStyle);
    mateParams.set(name: 'selectedLabelTextStyle', init: selectedLabelTextStyle);
    mateParams.set(name: 'unselectedIconTheme', init: unselectedIconTheme);
    mateParams.set(name: 'selectedIconTheme', init: selectedIconTheme);
    mateParams.set(name: 'groupAlignment', init: groupAlignment);
    mateParams.set(name: 'labelType', init: labelType);
    mateParams.set(name: 'useIndicator', init: useIndicator);
    mateParams.set(name: 'indicatorColor', init: indicatorColor);
    mateParams.set(name: 'indicatorShape', init: indicatorShape);
    mateParams.set(name: 'minWidth', init: minWidth);
    mateParams.set(name: 'minExtendedWidth', init: minExtendedWidth);
  }
}

/// class NavigationRailTheme extends InheritedTheme
class NavigationRailTheme$Mate extends NavigationRailTheme with WidgetMate<NavigationRailTheme$Mate> {
  /// NavigationRailTheme NavigationRailTheme({Key? key, required NavigationRailThemeData data, required Widget child})
  NavigationRailTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required NavigationRailThemeData data}
    required NavigationRailThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationRailTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
