// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/popup_menu.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/material/popup_menu_theme.dart';

/// class PopupMenuDivider extends PopupMenuEntry<Never>
class PopupMenuDivider$Mate extends PopupMenuDivider with WidgetMate<PopupMenuDivider$Mate> {
  /// PopupMenuDivider PopupMenuDivider({Key? key, double height = _kMenuDividerHeight})
  PopupMenuDivider$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double height = _kMenuDividerHeight}
    required double height,
  }) : super(
          key: key,
          height: height,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => PopupMenuDivider$Mate(
        key: p.getValue('key'),
        height: p.getValue('height'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'height', init: height);
  }
}

/// class PopupMenuItem<T> extends PopupMenuEntry<T>
class PopupMenuItem$Mate<T> extends PopupMenuItem<T> with WidgetMate<PopupMenuItem$Mate> {
  /// PopupMenuItem<T> PopupMenuItem({Key? key, T? value, void Function()? onTap, bool enabled = true, double height = kMinInteractiveDimension, EdgeInsets? padding, TextStyle? textStyle, MaterialStateProperty<TextStyle?>? labelTextStyle, MouseCursor? mouseCursor, required Widget? child})
  PopupMenuItem$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {T? value}
    T? value,

    /// param: {void Function()? onTap}
    VoidCallback? onTap,

    /// param: {bool enabled = true}
    required bool enabled,

    /// param: {double height = kMinInteractiveDimension}
    required double height,

    /// param: {EdgeInsets? padding}
    EdgeInsets? padding,

    /// param: {TextStyle? textStyle}
    TextStyle? textStyle,

    /// param: {MaterialStateProperty<TextStyle?>? labelTextStyle}
    MaterialStateProperty<TextStyle?>? labelTextStyle,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {required Widget? child}
    required Widget? child,
  }) : super(
          key: key,
          value: value,
          onTap: onTap,
          enabled: enabled,
          height: height,
          padding: padding,
          textStyle: textStyle,
          labelTextStyle: labelTextStyle,
          mouseCursor: mouseCursor,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => PopupMenuItem$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        onTap: p.getValue('onTap'),
        enabled: p.getValue('enabled'),
        height: p.getValue('height'),
        padding: p.getValue('padding'),
        textStyle: p.getValue('textStyle'),
        labelTextStyle: p.getValue('labelTextStyle'),
        mouseCursor: p.getValue('mouseCursor'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'textStyle', init: textStyle);
    mateParams.set(name: 'labelTextStyle', init: labelTextStyle);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'child', init: child);
  }
}

/// class CheckedPopupMenuItem<T> extends PopupMenuItem<T>
class CheckedPopupMenuItem$Mate<T> extends CheckedPopupMenuItem<T> with WidgetMate<CheckedPopupMenuItem$Mate> {
  /// CheckedPopupMenuItem<T> CheckedPopupMenuItem({Key? key, T? value, bool checked = false, bool enabled = true, EdgeInsets? padding, double height = kMinInteractiveDimension, MouseCursor? mouseCursor, Widget? child})
  CheckedPopupMenuItem$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {T? value}
    T? value,

    /// param: {bool checked = false}
    required bool checked,

    /// param: {bool enabled = true}
    required bool enabled,

    /// param: {EdgeInsets? padding}
    EdgeInsets? padding,

    /// param: {double height = kMinInteractiveDimension}
    required double height,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          value: value,
          checked: checked,
          enabled: enabled,
          padding: padding,
          height: height,
          mouseCursor: mouseCursor,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CheckedPopupMenuItem$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        checked: p.getValue('checked'),
        enabled: p.getValue('enabled'),
        padding: p.getValue('padding'),
        height: p.getValue('height'),
        mouseCursor: p.getValue('mouseCursor'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'checked', init: checked);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'child', init: child);
  }
}

/// class PopupMenuButton<T> extends StatefulWidget
class PopupMenuButton$Mate<T> extends PopupMenuButton<T> with WidgetMate<PopupMenuButton$Mate> {
  /// PopupMenuButton<T> PopupMenuButton({Key? key, required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder, T? initialValue, void Function()? onOpened, void Function(T)? onSelected, void Function()? onCanceled, String? tooltip, double? elevation, Color? shadowColor, Color? surfaceTintColor, EdgeInsetsGeometry padding = const EdgeInsets.all(8.0), Widget? child, double? splashRadius, Widget? icon, double? iconSize, Offset offset = Offset.zero, bool enabled = true, ShapeBorder? shape, Color? color, bool? enableFeedback, BoxConstraints? constraints, PopupMenuPosition? position, Clip clipBehavior = Clip.none})
  PopupMenuButton$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder}
    required PopupMenuItemBuilder<T> itemBuilder,

    /// param: {T? initialValue}
    T? initialValue,

    /// param: {void Function()? onOpened}
    VoidCallback? onOpened,

    /// param: {void Function(T)? onSelected}
    PopupMenuItemSelected<T>? onSelected,

    /// param: {void Function()? onCanceled}
    PopupMenuCanceled? onCanceled,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {EdgeInsetsGeometry padding = const EdgeInsets.all(8.0)}
    required EdgeInsetsGeometry padding,

    /// param: {Widget? child}
    Widget? child,

    /// param: {double? splashRadius}
    double? splashRadius,

    /// param: {Widget? icon}
    Widget? icon,

    /// param: {double? iconSize}
    double? iconSize,

    /// param: {Offset offset = Offset.zero}
    required Offset offset,

    /// param: {bool enabled = true}
    required bool enabled,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? color}
    Color? color,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {BoxConstraints? constraints}
    BoxConstraints? constraints,

    /// param: {PopupMenuPosition? position}
    PopupMenuPosition? position,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          initialValue: initialValue,
          onOpened: onOpened,
          onSelected: onSelected,
          onCanceled: onCanceled,
          tooltip: tooltip,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          padding: padding,
          child: child,
          splashRadius: splashRadius,
          icon: icon,
          iconSize: iconSize,
          offset: offset,
          enabled: enabled,
          shape: shape,
          color: color,
          enableFeedback: enableFeedback,
          constraints: constraints,
          position: position,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => PopupMenuButton$Mate(
        key: p.getValue('key'),
        itemBuilder: p.getValue('itemBuilder'),
        initialValue: p.getValue('initialValue'),
        onOpened: p.getValue('onOpened'),
        onSelected: p.getValue('onSelected'),
        onCanceled: p.getValue('onCanceled'),
        tooltip: p.getValue('tooltip'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        padding: p.getValue('padding'),
        child: p.getValue('child'),
        splashRadius: p.getValue('splashRadius'),
        icon: p.getValue('icon'),
        iconSize: p.getValue('iconSize'),
        offset: p.getValue('offset'),
        enabled: p.getValue('enabled'),
        shape: p.getValue('shape'),
        color: p.getValue('color'),
        enableFeedback: p.getValue('enableFeedback'),
        constraints: p.getValue('constraints'),
        position: p.getValue('position'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'itemBuilder', init: itemBuilder);
    mateParams.set(name: 'initialValue', init: initialValue);
    mateParams.set(name: 'onOpened', init: onOpened);
    mateParams.set(name: 'onSelected', init: onSelected);
    mateParams.set(name: 'onCanceled', init: onCanceled);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'splashRadius', init: splashRadius);
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'iconSize', init: iconSize);
    mateParams.set(name: 'offset', init: offset);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'constraints', init: constraints);
    mateParams.set(name: 'position', init: position);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}
