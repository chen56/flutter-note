// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/date_picker_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class DatePickerThemeData with Diagnosticable
class DatePickerThemeData$Mate extends DatePickerThemeData with Mate<DatePickerThemeData$Mate> {
  /// DatePickerThemeData DatePickerThemeData({Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? headerBackgroundColor, Color? headerForegroundColor, TextStyle? headerHeadlineStyle, TextStyle? headerHelpStyle, TextStyle? weekdayStyle, TextStyle? dayStyle, MaterialStateProperty<Color?>? dayForegroundColor, MaterialStateProperty<Color?>? dayBackgroundColor, MaterialStateProperty<Color?>? dayOverlayColor, MaterialStateProperty<Color?>? todayForegroundColor, MaterialStateProperty<Color?>? todayBackgroundColor, BorderSide? todayBorder, TextStyle? yearStyle, MaterialStateProperty<Color?>? yearForegroundColor, MaterialStateProperty<Color?>? yearBackgroundColor, MaterialStateProperty<Color?>? yearOverlayColor, Color? rangePickerBackgroundColor, double? rangePickerElevation, Color? rangePickerShadowColor, Color? rangePickerSurfaceTintColor, ShapeBorder? rangePickerShape, Color? rangePickerHeaderBackgroundColor, Color? rangePickerHeaderForegroundColor, TextStyle? rangePickerHeaderHeadlineStyle, TextStyle? rangePickerHeaderHelpStyle, Color? rangeSelectionBackgroundColor, MaterialStateProperty<Color?>? rangeSelectionOverlayColor})
  DatePickerThemeData$Mate({
    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? headerBackgroundColor}
    Color? headerBackgroundColor,

    /// param: {Color? headerForegroundColor}
    Color? headerForegroundColor,

    /// param: {TextStyle? headerHeadlineStyle}
    TextStyle? headerHeadlineStyle,

    /// param: {TextStyle? headerHelpStyle}
    TextStyle? headerHelpStyle,

    /// param: {TextStyle? weekdayStyle}
    TextStyle? weekdayStyle,

    /// param: {TextStyle? dayStyle}
    TextStyle? dayStyle,

    /// param: {MaterialStateProperty<Color?>? dayForegroundColor}
    MaterialStateProperty<Color?>? dayForegroundColor,

    /// param: {MaterialStateProperty<Color?>? dayBackgroundColor}
    MaterialStateProperty<Color?>? dayBackgroundColor,

    /// param: {MaterialStateProperty<Color?>? dayOverlayColor}
    MaterialStateProperty<Color?>? dayOverlayColor,

    /// param: {MaterialStateProperty<Color?>? todayForegroundColor}
    MaterialStateProperty<Color?>? todayForegroundColor,

    /// param: {MaterialStateProperty<Color?>? todayBackgroundColor}
    MaterialStateProperty<Color?>? todayBackgroundColor,

    /// param: {BorderSide? todayBorder}
    BorderSide? todayBorder,

    /// param: {TextStyle? yearStyle}
    TextStyle? yearStyle,

    /// param: {MaterialStateProperty<Color?>? yearForegroundColor}
    MaterialStateProperty<Color?>? yearForegroundColor,

    /// param: {MaterialStateProperty<Color?>? yearBackgroundColor}
    MaterialStateProperty<Color?>? yearBackgroundColor,

    /// param: {MaterialStateProperty<Color?>? yearOverlayColor}
    MaterialStateProperty<Color?>? yearOverlayColor,

    /// param: {Color? rangePickerBackgroundColor}
    Color? rangePickerBackgroundColor,

    /// param: {double? rangePickerElevation}
    double? rangePickerElevation,

    /// param: {Color? rangePickerShadowColor}
    Color? rangePickerShadowColor,

    /// param: {Color? rangePickerSurfaceTintColor}
    Color? rangePickerSurfaceTintColor,

    /// param: {ShapeBorder? rangePickerShape}
    ShapeBorder? rangePickerShape,

    /// param: {Color? rangePickerHeaderBackgroundColor}
    Color? rangePickerHeaderBackgroundColor,

    /// param: {Color? rangePickerHeaderForegroundColor}
    Color? rangePickerHeaderForegroundColor,

    /// param: {TextStyle? rangePickerHeaderHeadlineStyle}
    TextStyle? rangePickerHeaderHeadlineStyle,

    /// param: {TextStyle? rangePickerHeaderHelpStyle}
    TextStyle? rangePickerHeaderHelpStyle,

    /// param: {Color? rangeSelectionBackgroundColor}
    Color? rangeSelectionBackgroundColor,

    /// param: {MaterialStateProperty<Color?>? rangeSelectionOverlayColor}
    MaterialStateProperty<Color?>? rangeSelectionOverlayColor,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          headerBackgroundColor: headerBackgroundColor,
          headerForegroundColor: headerForegroundColor,
          headerHeadlineStyle: headerHeadlineStyle,
          headerHelpStyle: headerHelpStyle,
          weekdayStyle: weekdayStyle,
          dayStyle: dayStyle,
          dayForegroundColor: dayForegroundColor,
          dayBackgroundColor: dayBackgroundColor,
          dayOverlayColor: dayOverlayColor,
          todayForegroundColor: todayForegroundColor,
          todayBackgroundColor: todayBackgroundColor,
          todayBorder: todayBorder,
          yearStyle: yearStyle,
          yearForegroundColor: yearForegroundColor,
          yearBackgroundColor: yearBackgroundColor,
          yearOverlayColor: yearOverlayColor,
          rangePickerBackgroundColor: rangePickerBackgroundColor,
          rangePickerElevation: rangePickerElevation,
          rangePickerShadowColor: rangePickerShadowColor,
          rangePickerSurfaceTintColor: rangePickerSurfaceTintColor,
          rangePickerShape: rangePickerShape,
          rangePickerHeaderBackgroundColor: rangePickerHeaderBackgroundColor,
          rangePickerHeaderForegroundColor: rangePickerHeaderForegroundColor,
          rangePickerHeaderHeadlineStyle: rangePickerHeaderHeadlineStyle,
          rangePickerHeaderHelpStyle: rangePickerHeaderHelpStyle,
          rangeSelectionBackgroundColor: rangeSelectionBackgroundColor,
          rangeSelectionOverlayColor: rangeSelectionOverlayColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DatePickerThemeData$Mate(
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        shape: p.getValue('shape'),
        headerBackgroundColor: p.getValue('headerBackgroundColor'),
        headerForegroundColor: p.getValue('headerForegroundColor'),
        headerHeadlineStyle: p.getValue('headerHeadlineStyle'),
        headerHelpStyle: p.getValue('headerHelpStyle'),
        weekdayStyle: p.getValue('weekdayStyle'),
        dayStyle: p.getValue('dayStyle'),
        dayForegroundColor: p.getValue('dayForegroundColor'),
        dayBackgroundColor: p.getValue('dayBackgroundColor'),
        dayOverlayColor: p.getValue('dayOverlayColor'),
        todayForegroundColor: p.getValue('todayForegroundColor'),
        todayBackgroundColor: p.getValue('todayBackgroundColor'),
        todayBorder: p.getValue('todayBorder'),
        yearStyle: p.getValue('yearStyle'),
        yearForegroundColor: p.getValue('yearForegroundColor'),
        yearBackgroundColor: p.getValue('yearBackgroundColor'),
        yearOverlayColor: p.getValue('yearOverlayColor'),
        rangePickerBackgroundColor: p.getValue('rangePickerBackgroundColor'),
        rangePickerElevation: p.getValue('rangePickerElevation'),
        rangePickerShadowColor: p.getValue('rangePickerShadowColor'),
        rangePickerSurfaceTintColor: p.getValue('rangePickerSurfaceTintColor'),
        rangePickerShape: p.getValue('rangePickerShape'),
        rangePickerHeaderBackgroundColor: p.getValue('rangePickerHeaderBackgroundColor'),
        rangePickerHeaderForegroundColor: p.getValue('rangePickerHeaderForegroundColor'),
        rangePickerHeaderHeadlineStyle: p.getValue('rangePickerHeaderHeadlineStyle'),
        rangePickerHeaderHelpStyle: p.getValue('rangePickerHeaderHelpStyle'),
        rangeSelectionBackgroundColor: p.getValue('rangeSelectionBackgroundColor'),
        rangeSelectionOverlayColor: p.getValue('rangeSelectionOverlayColor'),
      ),
    );
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'headerBackgroundColor', init: headerBackgroundColor);
    mateParams.set(name: 'headerForegroundColor', init: headerForegroundColor);
    mateParams.set(name: 'headerHeadlineStyle', init: headerHeadlineStyle);
    mateParams.set(name: 'headerHelpStyle', init: headerHelpStyle);
    mateParams.set(name: 'weekdayStyle', init: weekdayStyle);
    mateParams.set(name: 'dayStyle', init: dayStyle);
    mateParams.set(name: 'dayForegroundColor', init: dayForegroundColor);
    mateParams.set(name: 'dayBackgroundColor', init: dayBackgroundColor);
    mateParams.set(name: 'dayOverlayColor', init: dayOverlayColor);
    mateParams.set(name: 'todayForegroundColor', init: todayForegroundColor);
    mateParams.set(name: 'todayBackgroundColor', init: todayBackgroundColor);
    mateParams.set(name: 'todayBorder', init: todayBorder);
    mateParams.set(name: 'yearStyle', init: yearStyle);
    mateParams.set(name: 'yearForegroundColor', init: yearForegroundColor);
    mateParams.set(name: 'yearBackgroundColor', init: yearBackgroundColor);
    mateParams.set(name: 'yearOverlayColor', init: yearOverlayColor);
    mateParams.set(name: 'rangePickerBackgroundColor', init: rangePickerBackgroundColor);
    mateParams.set(name: 'rangePickerElevation', init: rangePickerElevation);
    mateParams.set(name: 'rangePickerShadowColor', init: rangePickerShadowColor);
    mateParams.set(name: 'rangePickerSurfaceTintColor', init: rangePickerSurfaceTintColor);
    mateParams.set(name: 'rangePickerShape', init: rangePickerShape);
    mateParams.set(name: 'rangePickerHeaderBackgroundColor', init: rangePickerHeaderBackgroundColor);
    mateParams.set(name: 'rangePickerHeaderForegroundColor', init: rangePickerHeaderForegroundColor);
    mateParams.set(name: 'rangePickerHeaderHeadlineStyle', init: rangePickerHeaderHeadlineStyle);
    mateParams.set(name: 'rangePickerHeaderHelpStyle', init: rangePickerHeaderHelpStyle);
    mateParams.set(name: 'rangeSelectionBackgroundColor', init: rangeSelectionBackgroundColor);
    mateParams.set(name: 'rangeSelectionOverlayColor', init: rangeSelectionOverlayColor);
  }
}

/// class DatePickerTheme extends InheritedTheme
class DatePickerTheme$Mate extends DatePickerTheme with WidgetMate<DatePickerTheme$Mate> {
  /// DatePickerTheme DatePickerTheme({Key? key, required DatePickerThemeData data, required Widget child})
  DatePickerTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required DatePickerThemeData data}
    required DatePickerThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DatePickerTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
