// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.840025

import 'package:flutter/src/material/color_scheme.dart';
import 'dart:ui';

/// class ColorScheme with Diagnosticable
class ColorScheme$Mate extends ColorScheme {
  /// ColorScheme ColorScheme({required Brightness brightness, required Color primary, required Color onPrimary, Color? primaryContainer, Color? onPrimaryContainer, required Color secondary, required Color onSecondary, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, required Color error, required Color onError, Color? errorContainer, Color? onErrorContainer, required Color background, required Color onBackground, required Color surface, required Color onSurface, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant, Color? secondaryVariant})
  ColorScheme$Mate({
    /// param: {required Brightness brightness}
    required Brightness brightness,

    /// param: {required Color primary}
    required Color primary,

    /// param: {required Color onPrimary}
    required Color onPrimary,

    /// param: {Color? primaryContainer}
    Color? primaryContainer,

    /// param: {Color? onPrimaryContainer}
    Color? onPrimaryContainer,

    /// param: {required Color secondary}
    required Color secondary,

    /// param: {required Color onSecondary}
    required Color onSecondary,

    /// param: {Color? secondaryContainer}
    Color? secondaryContainer,

    /// param: {Color? onSecondaryContainer}
    Color? onSecondaryContainer,

    /// param: {Color? tertiary}
    Color? tertiary,

    /// param: {Color? onTertiary}
    Color? onTertiary,

    /// param: {Color? tertiaryContainer}
    Color? tertiaryContainer,

    /// param: {Color? onTertiaryContainer}
    Color? onTertiaryContainer,

    /// param: {required Color error}
    required Color error,

    /// param: {required Color onError}
    required Color onError,

    /// param: {Color? errorContainer}
    Color? errorContainer,

    /// param: {Color? onErrorContainer}
    Color? onErrorContainer,

    /// param: {required Color background}
    required Color background,

    /// param: {required Color onBackground}
    required Color onBackground,

    /// param: {required Color surface}
    required Color surface,

    /// param: {required Color onSurface}
    required Color onSurface,

    /// param: {Color? surfaceVariant}
    Color? surfaceVariant,

    /// param: {Color? onSurfaceVariant}
    Color? onSurfaceVariant,

    /// param: {Color? outline}
    Color? outline,

    /// param: {Color? outlineVariant}
    Color? outlineVariant,

    /// param: {Color? shadow}
    Color? shadow,

    /// param: {Color? scrim}
    Color? scrim,

    /// param: {Color? inverseSurface}
    Color? inverseSurface,

    /// param: {Color? onInverseSurface}
    Color? onInverseSurface,

    /// param: {Color? inversePrimary}
    Color? inversePrimary,

    /// param: {Color? surfaceTint}
    Color? surfaceTint,

    /// param: {Color? primaryVariant}
    Color? primaryVariant,

    /// param: {Color? secondaryVariant}
    Color? secondaryVariant,
  }) : super(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
          primaryVariant: primaryVariant,
          secondaryVariant: secondaryVariant,
        ) {}

  /// ColorScheme ColorScheme.light({Brightness brightness = Brightness.light, Color primary = const Color(0xff6200ee), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffb00020), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700b3), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.light({
    /// param: {Brightness brightness = Brightness.light}
    required Brightness brightness,

    /// param: {Color primary = const Color(0xff6200ee)}
    required Color primary,

    /// param: {Color onPrimary = Colors.white}
    required Color onPrimary,

    /// param: {Color? primaryContainer}
    Color? primaryContainer,

    /// param: {Color? onPrimaryContainer}
    Color? onPrimaryContainer,

    /// param: {Color secondary = const Color(0xff03dac6)}
    required Color secondary,

    /// param: {Color onSecondary = Colors.black}
    required Color onSecondary,

    /// param: {Color? secondaryContainer}
    Color? secondaryContainer,

    /// param: {Color? onSecondaryContainer}
    Color? onSecondaryContainer,

    /// param: {Color? tertiary}
    Color? tertiary,

    /// param: {Color? onTertiary}
    Color? onTertiary,

    /// param: {Color? tertiaryContainer}
    Color? tertiaryContainer,

    /// param: {Color? onTertiaryContainer}
    Color? onTertiaryContainer,

    /// param: {Color error = const Color(0xffb00020)}
    required Color error,

    /// param: {Color onError = Colors.white}
    required Color onError,

    /// param: {Color? errorContainer}
    Color? errorContainer,

    /// param: {Color? onErrorContainer}
    Color? onErrorContainer,

    /// param: {Color background = Colors.white}
    required Color background,

    /// param: {Color onBackground = Colors.black}
    required Color onBackground,

    /// param: {Color surface = Colors.white}
    required Color surface,

    /// param: {Color onSurface = Colors.black}
    required Color onSurface,

    /// param: {Color? surfaceVariant}
    Color? surfaceVariant,

    /// param: {Color? onSurfaceVariant}
    Color? onSurfaceVariant,

    /// param: {Color? outline}
    Color? outline,

    /// param: {Color? outlineVariant}
    Color? outlineVariant,

    /// param: {Color? shadow}
    Color? shadow,

    /// param: {Color? scrim}
    Color? scrim,

    /// param: {Color? inverseSurface}
    Color? inverseSurface,

    /// param: {Color? onInverseSurface}
    Color? onInverseSurface,

    /// param: {Color? inversePrimary}
    Color? inversePrimary,

    /// param: {Color? surfaceTint}
    Color? surfaceTint,

    /// param: {Color? primaryVariant = const Color(0xff3700b3)}
    Color? primaryVariant,

    /// param: {Color? secondaryVariant = const Color(0xff018786)}
    Color? secondaryVariant,
  }) : super.light(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
          primaryVariant: primaryVariant,
          secondaryVariant: secondaryVariant,
        ) {}

  /// ColorScheme ColorScheme.dark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffbb86fc), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffcf6679), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700B3), Color? secondaryVariant = const Color(0xff03dac6)})
  ColorScheme$Mate.dark({
    /// param: {Brightness brightness = Brightness.dark}
    required Brightness brightness,

    /// param: {Color primary = const Color(0xffbb86fc)}
    required Color primary,

    /// param: {Color onPrimary = Colors.black}
    required Color onPrimary,

    /// param: {Color? primaryContainer}
    Color? primaryContainer,

    /// param: {Color? onPrimaryContainer}
    Color? onPrimaryContainer,

    /// param: {Color secondary = const Color(0xff03dac6)}
    required Color secondary,

    /// param: {Color onSecondary = Colors.black}
    required Color onSecondary,

    /// param: {Color? secondaryContainer}
    Color? secondaryContainer,

    /// param: {Color? onSecondaryContainer}
    Color? onSecondaryContainer,

    /// param: {Color? tertiary}
    Color? tertiary,

    /// param: {Color? onTertiary}
    Color? onTertiary,

    /// param: {Color? tertiaryContainer}
    Color? tertiaryContainer,

    /// param: {Color? onTertiaryContainer}
    Color? onTertiaryContainer,

    /// param: {Color error = const Color(0xffcf6679)}
    required Color error,

    /// param: {Color onError = Colors.black}
    required Color onError,

    /// param: {Color? errorContainer}
    Color? errorContainer,

    /// param: {Color? onErrorContainer}
    Color? onErrorContainer,

    /// param: {Color background = const Color(0xff121212)}
    required Color background,

    /// param: {Color onBackground = Colors.white}
    required Color onBackground,

    /// param: {Color surface = const Color(0xff121212)}
    required Color surface,

    /// param: {Color onSurface = Colors.white}
    required Color onSurface,

    /// param: {Color? surfaceVariant}
    Color? surfaceVariant,

    /// param: {Color? onSurfaceVariant}
    Color? onSurfaceVariant,

    /// param: {Color? outline}
    Color? outline,

    /// param: {Color? outlineVariant}
    Color? outlineVariant,

    /// param: {Color? shadow}
    Color? shadow,

    /// param: {Color? scrim}
    Color? scrim,

    /// param: {Color? inverseSurface}
    Color? inverseSurface,

    /// param: {Color? onInverseSurface}
    Color? onInverseSurface,

    /// param: {Color? inversePrimary}
    Color? inversePrimary,

    /// param: {Color? surfaceTint}
    Color? surfaceTint,

    /// param: {Color? primaryVariant = const Color(0xff3700B3)}
    Color? primaryVariant,

    /// param: {Color? secondaryVariant = const Color(0xff03dac6)}
    Color? secondaryVariant,
  }) : super.dark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
          primaryVariant: primaryVariant,
          secondaryVariant: secondaryVariant,
        ) {}

  /// ColorScheme ColorScheme.highContrastLight({Brightness brightness = Brightness.light, Color primary = const Color(0xff0000ba), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff790000), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff000088), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.highContrastLight({
    /// param: {Brightness brightness = Brightness.light}
    required Brightness brightness,

    /// param: {Color primary = const Color(0xff0000ba)}
    required Color primary,

    /// param: {Color onPrimary = Colors.white}
    required Color onPrimary,

    /// param: {Color? primaryContainer}
    Color? primaryContainer,

    /// param: {Color? onPrimaryContainer}
    Color? onPrimaryContainer,

    /// param: {Color secondary = const Color(0xff66fff9)}
    required Color secondary,

    /// param: {Color onSecondary = Colors.black}
    required Color onSecondary,

    /// param: {Color? secondaryContainer}
    Color? secondaryContainer,

    /// param: {Color? onSecondaryContainer}
    Color? onSecondaryContainer,

    /// param: {Color? tertiary}
    Color? tertiary,

    /// param: {Color? onTertiary}
    Color? onTertiary,

    /// param: {Color? tertiaryContainer}
    Color? tertiaryContainer,

    /// param: {Color? onTertiaryContainer}
    Color? onTertiaryContainer,

    /// param: {Color error = const Color(0xff790000)}
    required Color error,

    /// param: {Color onError = Colors.white}
    required Color onError,

    /// param: {Color? errorContainer}
    Color? errorContainer,

    /// param: {Color? onErrorContainer}
    Color? onErrorContainer,

    /// param: {Color background = Colors.white}
    required Color background,

    /// param: {Color onBackground = Colors.black}
    required Color onBackground,

    /// param: {Color surface = Colors.white}
    required Color surface,

    /// param: {Color onSurface = Colors.black}
    required Color onSurface,

    /// param: {Color? surfaceVariant}
    Color? surfaceVariant,

    /// param: {Color? onSurfaceVariant}
    Color? onSurfaceVariant,

    /// param: {Color? outline}
    Color? outline,

    /// param: {Color? outlineVariant}
    Color? outlineVariant,

    /// param: {Color? shadow}
    Color? shadow,

    /// param: {Color? scrim}
    Color? scrim,

    /// param: {Color? inverseSurface}
    Color? inverseSurface,

    /// param: {Color? onInverseSurface}
    Color? onInverseSurface,

    /// param: {Color? inversePrimary}
    Color? inversePrimary,

    /// param: {Color? surfaceTint}
    Color? surfaceTint,

    /// param: {Color? primaryVariant = const Color(0xff000088)}
    Color? primaryVariant,

    /// param: {Color? secondaryVariant = const Color(0xff018786)}
    Color? secondaryVariant,
  }) : super.highContrastLight(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
          primaryVariant: primaryVariant,
          secondaryVariant: secondaryVariant,
        ) {}

  /// ColorScheme ColorScheme.highContrastDark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffefb7ff), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff9b374d), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xffbe9eff), Color? secondaryVariant = const Color(0xff66fff9)})
  ColorScheme$Mate.highContrastDark({
    /// param: {Brightness brightness = Brightness.dark}
    required Brightness brightness,

    /// param: {Color primary = const Color(0xffefb7ff)}
    required Color primary,

    /// param: {Color onPrimary = Colors.black}
    required Color onPrimary,

    /// param: {Color? primaryContainer}
    Color? primaryContainer,

    /// param: {Color? onPrimaryContainer}
    Color? onPrimaryContainer,

    /// param: {Color secondary = const Color(0xff66fff9)}
    required Color secondary,

    /// param: {Color onSecondary = Colors.black}
    required Color onSecondary,

    /// param: {Color? secondaryContainer}
    Color? secondaryContainer,

    /// param: {Color? onSecondaryContainer}
    Color? onSecondaryContainer,

    /// param: {Color? tertiary}
    Color? tertiary,

    /// param: {Color? onTertiary}
    Color? onTertiary,

    /// param: {Color? tertiaryContainer}
    Color? tertiaryContainer,

    /// param: {Color? onTertiaryContainer}
    Color? onTertiaryContainer,

    /// param: {Color error = const Color(0xff9b374d)}
    required Color error,

    /// param: {Color onError = Colors.black}
    required Color onError,

    /// param: {Color? errorContainer}
    Color? errorContainer,

    /// param: {Color? onErrorContainer}
    Color? onErrorContainer,

    /// param: {Color background = const Color(0xff121212)}
    required Color background,

    /// param: {Color onBackground = Colors.white}
    required Color onBackground,

    /// param: {Color surface = const Color(0xff121212)}
    required Color surface,

    /// param: {Color onSurface = Colors.white}
    required Color onSurface,

    /// param: {Color? surfaceVariant}
    Color? surfaceVariant,

    /// param: {Color? onSurfaceVariant}
    Color? onSurfaceVariant,

    /// param: {Color? outline}
    Color? outline,

    /// param: {Color? outlineVariant}
    Color? outlineVariant,

    /// param: {Color? shadow}
    Color? shadow,

    /// param: {Color? scrim}
    Color? scrim,

    /// param: {Color? inverseSurface}
    Color? inverseSurface,

    /// param: {Color? onInverseSurface}
    Color? onInverseSurface,

    /// param: {Color? inversePrimary}
    Color? inversePrimary,

    /// param: {Color? surfaceTint}
    Color? surfaceTint,

    /// param: {Color? primaryVariant = const Color(0xffbe9eff)}
    Color? primaryVariant,

    /// param: {Color? secondaryVariant = const Color(0xff66fff9)}
    Color? secondaryVariant,
  }) : super.highContrastDark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
          primaryVariant: primaryVariant,
          secondaryVariant: secondaryVariant,
        ) {}
}
