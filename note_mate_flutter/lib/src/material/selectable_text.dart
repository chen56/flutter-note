// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:27.125403

import 'package:flutter/src/material/selectable_text.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/painting/text_span.dart';

/// class SelectableText extends StatefulWidget
class SelectableText$Mate extends SelectableText {
  /// SelectableText SelectableText(String data, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate(
    /// param: String data
    String data, {
    /// param: {Key? key}
    Key? key,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {TextStyle? style}
    TextStyle? style,

    /// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,

    /// param: {TextAlign? textAlign}
    TextAlign? textAlign,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {double? textScaleFactor}
    double? textScaleFactor,

    /// param: {bool showCursor = false}
    required bool showCursor,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {ToolbarOptions? toolbarOptions}
    ToolbarOptions? toolbarOptions,

    /// param: {int? minLines}
    int? minLines,

    /// param: {int? maxLines}
    int? maxLines,

    /// param: {double cursorWidth = 2.0}
    required double cursorWidth,

    /// param: {double? cursorHeight}
    double? cursorHeight,

    /// param: {Radius? cursorRadius}
    Radius? cursorRadius,

    /// param: {Color? cursorColor}
    Color? cursorColor,

    /// param: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight}
    required BoxHeightStyle selectionHeightStyle,

    /// param: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight}
    required BoxWidthStyle selectionWidthStyle,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {bool enableInteractiveSelection = true}
    required bool enableInteractiveSelection,

    /// param: {TextSelectionControls? selectionControls}
    TextSelectionControls? selectionControls,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {ScrollPhysics? scrollPhysics}
    ScrollPhysics? scrollPhysics,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,

    /// param: {TextWidthBasis? textWidthBasis}
    TextWidthBasis? textWidthBasis,

    /// param: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged}
    SelectionChangedCallback? onSelectionChanged,

    /// param: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder}
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// param: {TextMagnifierConfiguration? magnifierConfiguration}
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super(
          data,
          key: key,
          focusNode: focusNode,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          showCursor: showCursor,
          autofocus: autofocus,
          toolbarOptions: toolbarOptions,
          minLines: minLines,
          maxLines: maxLines,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollPhysics: scrollPhysics,
          semanticsLabel: semanticsLabel,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          onSelectionChanged: onSelectionChanged,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {}

  /// SelectableText SelectableText.rich(TextSpan textSpan, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate.rich(
    /// param: TextSpan textSpan
    TextSpan textSpan, {
    /// param: {Key? key}
    Key? key,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {TextStyle? style}
    TextStyle? style,

    /// param: {StrutStyle? strutStyle}
    StrutStyle? strutStyle,

    /// param: {TextAlign? textAlign}
    TextAlign? textAlign,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {double? textScaleFactor}
    double? textScaleFactor,

    /// param: {bool showCursor = false}
    required bool showCursor,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {ToolbarOptions? toolbarOptions}
    ToolbarOptions? toolbarOptions,

    /// param: {int? minLines}
    int? minLines,

    /// param: {int? maxLines}
    int? maxLines,

    /// param: {double cursorWidth = 2.0}
    required double cursorWidth,

    /// param: {double? cursorHeight}
    double? cursorHeight,

    /// param: {Radius? cursorRadius}
    Radius? cursorRadius,

    /// param: {Color? cursorColor}
    Color? cursorColor,

    /// param: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight}
    required BoxHeightStyle selectionHeightStyle,

    /// param: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight}
    required BoxWidthStyle selectionWidthStyle,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {bool enableInteractiveSelection = true}
    required bool enableInteractiveSelection,

    /// param: {TextSelectionControls? selectionControls}
    TextSelectionControls? selectionControls,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {ScrollPhysics? scrollPhysics}
    ScrollPhysics? scrollPhysics,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {TextHeightBehavior? textHeightBehavior}
    TextHeightBehavior? textHeightBehavior,

    /// param: {TextWidthBasis? textWidthBasis}
    TextWidthBasis? textWidthBasis,

    /// param: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged}
    SelectionChangedCallback? onSelectionChanged,

    /// param: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder}
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// param: {TextMagnifierConfiguration? magnifierConfiguration}
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super.rich(
          textSpan,
          key: key,
          focusNode: focusNode,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          showCursor: showCursor,
          autofocus: autofocus,
          toolbarOptions: toolbarOptions,
          minLines: minLines,
          maxLines: maxLines,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollPhysics: scrollPhysics,
          semanticsLabel: semanticsLabel,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          onSelectionChanged: onSelectionChanged,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {}
}
