// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/data_table.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/rendering/table_border.dart';

/// class DataColumn
class DataColumn$Mate extends DataColumn with Mate<DataColumn$Mate> {
  /// DataColumn DataColumn({required Widget label, String? tooltip, bool numeric = false, void Function(int, bool)? onSort})
  DataColumn$Mate({
    /// param: {required Widget label}
    required Widget label,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {bool numeric = false}
    required bool numeric,

    /// param: {void Function(int, bool)? onSort}
    DataColumnSortCallback? onSort,
  }) : super(
          label: label,
          tooltip: tooltip,
          numeric: numeric,
          onSort: onSort,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataColumn$Mate(
        label: p.getValue('label'),
        tooltip: p.getValue('tooltip'),
        numeric: p.getValue('numeric'),
        onSort: p.getValue('onSort'),
      ),
    );
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'numeric', init: numeric);
    mateParams.set(name: 'onSort', init: onSort);
  }
}

/// class DataRow
class DataRow$Mate extends DataRow with Mate<DataRow$Mate> {
  /// DataRow DataRow({LocalKey? key, bool selected = false, void Function(bool?)? onSelectChanged, void Function()? onLongPress, MaterialStateProperty<Color?>? color, required List<DataCell> cells})
  DataRow$Mate({
    /// param: {LocalKey? key}
    LocalKey? key,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {void Function(bool?)? onSelectChanged}
    ValueChanged<bool?>? onSelectChanged,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {MaterialStateProperty<Color?>? color}
    MaterialStateProperty<Color?>? color,

    /// param: {required List<DataCell> cells}
    required List<DataCell> cells,
  }) : super(
          key: key,
          selected: selected,
          onSelectChanged: onSelectChanged,
          onLongPress: onLongPress,
          color: color,
          cells: cells,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataRow$Mate(
        key: p.getValue('key'),
        selected: p.getValue('selected'),
        onSelectChanged: p.getValue('onSelectChanged'),
        onLongPress: p.getValue('onLongPress'),
        color: p.getValue('color'),
        cells: p.getValue('cells'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'onSelectChanged', init: onSelectChanged);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'cells', init: cells);
  }

  /// DataRow DataRow.byIndex({int? index, bool selected = false, void Function(bool?)? onSelectChanged, void Function()? onLongPress, MaterialStateProperty<Color?>? color, required List<DataCell> cells})
  DataRow$Mate.byIndex({
    /// param: {int? index}
    int? index,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {void Function(bool?)? onSelectChanged}
    ValueChanged<bool?>? onSelectChanged,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {MaterialStateProperty<Color?>? color}
    MaterialStateProperty<Color?>? color,

    /// param: {required List<DataCell> cells}
    required List<DataCell> cells,
  }) : super.byIndex(
          index: index,
          selected: selected,
          onSelectChanged: onSelectChanged,
          onLongPress: onLongPress,
          color: color,
          cells: cells,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataRow$Mate.byIndex(
        index: p.getValue('index'),
        selected: p.getValue('selected'),
        onSelectChanged: p.getValue('onSelectChanged'),
        onLongPress: p.getValue('onLongPress'),
        color: p.getValue('color'),
        cells: p.getValue('cells'),
      ),
    );
    mateParams.set(name: 'index', init: index);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'onSelectChanged', init: onSelectChanged);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'cells', init: cells);
  }
}

/// class DataCell
class DataCell$Mate extends DataCell with Mate<DataCell$Mate> {
  /// DataCell DataCell(Widget child, {bool placeholder = false, bool showEditIcon = false, void Function()? onTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function()? onDoubleTap, void Function()? onTapCancel})
  DataCell$Mate(
    /// param: Widget child
    Widget child, {
    /// param: {bool placeholder = false}
    required bool placeholder,

    /// param: {bool showEditIcon = false}
    required bool showEditIcon,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {void Function(TapDownDetails)? onTapDown}
    GestureTapDownCallback? onTapDown,

    /// param: {void Function()? onDoubleTap}
    GestureTapCallback? onDoubleTap,

    /// param: {void Function()? onTapCancel}
    GestureTapCancelCallback? onTapCancel,
  }) : super(
          child,
          placeholder: placeholder,
          showEditIcon: showEditIcon,
          onTap: onTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onDoubleTap: onDoubleTap,
          onTapCancel: onTapCancel,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataCell$Mate(
        p.getValue('child'),
        placeholder: p.getValue('placeholder'),
        showEditIcon: p.getValue('showEditIcon'),
        onTap: p.getValue('onTap'),
        onLongPress: p.getValue('onLongPress'),
        onTapDown: p.getValue('onTapDown'),
        onDoubleTap: p.getValue('onDoubleTap'),
        onTapCancel: p.getValue('onTapCancel'),
      ),
    );
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'placeholder', init: placeholder);
    mateParams.set(name: 'showEditIcon', init: showEditIcon);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onTapDown', init: onTapDown);
    mateParams.set(name: 'onDoubleTap', init: onDoubleTap);
    mateParams.set(name: 'onTapCancel', init: onTapCancel);
  }
}

/// class DataTable extends StatelessWidget
class DataTable$Mate extends DataTable with WidgetMate<DataTable$Mate> {
  /// DataTable DataTable({Key? key, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending = true, void Function(bool?)? onSelectAll, Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, double? dataRowHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, bool showCheckboxColumn = true, bool showBottomBorder = false, double? dividerThickness, required List<DataRow> rows, double? checkboxHorizontalMargin, TableBorder? border, Clip clipBehavior = Clip.none})
  DataTable$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<DataColumn> columns}
    required List<DataColumn> columns,

    /// param: {int? sortColumnIndex}
    int? sortColumnIndex,

    /// param: {bool sortAscending = true}
    required bool sortAscending,

    /// param: {void Function(bool?)? onSelectAll}
    ValueSetter<bool?>? onSelectAll,

    /// param: {Decoration? decoration}
    Decoration? decoration,

    /// param: {MaterialStateProperty<Color?>? dataRowColor}
    MaterialStateProperty<Color?>? dataRowColor,

    /// param: {double? dataRowHeight}
    double? dataRowHeight,

    /// param: {TextStyle? dataTextStyle}
    TextStyle? dataTextStyle,

    /// param: {MaterialStateProperty<Color?>? headingRowColor}
    MaterialStateProperty<Color?>? headingRowColor,

    /// param: {double? headingRowHeight}
    double? headingRowHeight,

    /// param: {TextStyle? headingTextStyle}
    TextStyle? headingTextStyle,

    /// param: {double? horizontalMargin}
    double? horizontalMargin,

    /// param: {double? columnSpacing}
    double? columnSpacing,

    /// param: {bool showCheckboxColumn = true}
    required bool showCheckboxColumn,

    /// param: {bool showBottomBorder = false}
    required bool showBottomBorder,

    /// param: {double? dividerThickness}
    double? dividerThickness,

    /// param: {required List<DataRow> rows}
    required List<DataRow> rows,

    /// param: {double? checkboxHorizontalMargin}
    double? checkboxHorizontalMargin,

    /// param: {TableBorder? border}
    TableBorder? border,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,
  }) : super(
          key: key,
          columns: columns,
          sortColumnIndex: sortColumnIndex,
          sortAscending: sortAscending,
          onSelectAll: onSelectAll,
          decoration: decoration,
          dataRowColor: dataRowColor,
          dataRowHeight: dataRowHeight,
          dataTextStyle: dataTextStyle,
          headingRowColor: headingRowColor,
          headingRowHeight: headingRowHeight,
          headingTextStyle: headingTextStyle,
          horizontalMargin: horizontalMargin,
          columnSpacing: columnSpacing,
          showCheckboxColumn: showCheckboxColumn,
          showBottomBorder: showBottomBorder,
          dividerThickness: dividerThickness,
          rows: rows,
          checkboxHorizontalMargin: checkboxHorizontalMargin,
          border: border,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataTable$Mate(
        key: p.getValue('key'),
        columns: p.getValue('columns'),
        sortColumnIndex: p.getValue('sortColumnIndex'),
        sortAscending: p.getValue('sortAscending'),
        onSelectAll: p.getValue('onSelectAll'),
        decoration: p.getValue('decoration'),
        dataRowColor: p.getValue('dataRowColor'),
        dataRowHeight: p.getValue('dataRowHeight'),
        dataTextStyle: p.getValue('dataTextStyle'),
        headingRowColor: p.getValue('headingRowColor'),
        headingRowHeight: p.getValue('headingRowHeight'),
        headingTextStyle: p.getValue('headingTextStyle'),
        horizontalMargin: p.getValue('horizontalMargin'),
        columnSpacing: p.getValue('columnSpacing'),
        showCheckboxColumn: p.getValue('showCheckboxColumn'),
        showBottomBorder: p.getValue('showBottomBorder'),
        dividerThickness: p.getValue('dividerThickness'),
        rows: p.getValue('rows'),
        checkboxHorizontalMargin: p.getValue('checkboxHorizontalMargin'),
        border: p.getValue('border'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'columns', init: columns);
    mateParams.set(name: 'sortColumnIndex', init: sortColumnIndex);
    mateParams.set(name: 'sortAscending', init: sortAscending);
    mateParams.set(name: 'onSelectAll', init: onSelectAll);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'dataRowColor', init: dataRowColor);
    mateParams.set(name: 'dataRowHeight', init: dataRowHeight);
    mateParams.set(name: 'dataTextStyle', init: dataTextStyle);
    mateParams.set(name: 'headingRowColor', init: headingRowColor);
    mateParams.set(name: 'headingRowHeight', init: headingRowHeight);
    mateParams.set(name: 'headingTextStyle', init: headingTextStyle);
    mateParams.set(name: 'horizontalMargin', init: horizontalMargin);
    mateParams.set(name: 'columnSpacing', init: columnSpacing);
    mateParams.set(name: 'showCheckboxColumn', init: showCheckboxColumn);
    mateParams.set(name: 'showBottomBorder', init: showBottomBorder);
    mateParams.set(name: 'dividerThickness', init: dividerThickness);
    mateParams.set(name: 'rows', init: rows);
    mateParams.set(name: 'checkboxHorizontalMargin', init: checkboxHorizontalMargin);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class TableRowInkWell extends InkResponse
class TableRowInkWell$Mate extends TableRowInkWell with WidgetMate<TableRowInkWell$Mate> {
  /// TableRowInkWell TableRowInkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, MaterialStateProperty<Color?>? overlayColor})
  TableRowInkWell$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? child}
    Widget? child,

    /// param: {void Function()? onTap}
    GestureTapCallback? onTap,

    /// param: {void Function()? onDoubleTap}
    GestureTapCallback? onDoubleTap,

    /// param: {void Function()? onLongPress}
    GestureLongPressCallback? onLongPress,

    /// param: {void Function(bool)? onHighlightChanged}
    ValueChanged<bool>? onHighlightChanged,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          overlayColor: overlayColor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TableRowInkWell$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        onTap: p.getValue('onTap'),
        onDoubleTap: p.getValue('onDoubleTap'),
        onLongPress: p.getValue('onLongPress'),
        onHighlightChanged: p.getValue('onHighlightChanged'),
        overlayColor: p.getValue('overlayColor'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onDoubleTap', init: onDoubleTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onHighlightChanged', init: onHighlightChanged);
    mateParams.set(name: 'overlayColor', init: overlayColor);
  }
}
