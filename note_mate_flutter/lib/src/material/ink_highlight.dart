// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/ink_highlight.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/rendering/box.dart';
import 'dart:ui';
import 'package:flutter/src/painting/box_border.dart';
import 'dart:core';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';

/// class InkHighlight extends InteractiveInkFeature
class InkHighlight$Mate extends InkHighlight with Mate<InkHighlight$Mate> {
  /// InkHighlight InkHighlight({required MaterialInkController controller, required RenderBox referenceBox, required Color color, required TextDirection textDirection, BoxShape shape = BoxShape.rectangle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Rect Function()? rectCallback, void Function()? onRemoved, Duration fadeDuration = _kDefaultHighlightFadeDuration})
  InkHighlight$Mate({
    /// optionalParameters: {required MaterialInkController controller} , hasDefaultValue:false, defaultValueCode:null
    required MaterialInkController controller,

    /// optionalParameters: {required RenderBox referenceBox} , hasDefaultValue:false, defaultValueCode:null
    required RenderBox referenceBox,

    /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
    required Color color,

    /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection textDirection,

    /// optionalParameters: {BoxShape shape = BoxShape.rectangle} , hasDefaultValue:true, defaultValueCode:BoxShape.rectangle
    required BoxShape shape,

    /// optionalParameters: {double? radius} , hasDefaultValue:false, defaultValueCode:null
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? customBorder,

    /// optionalParameters: {Rect Function()? rectCallback} , hasDefaultValue:false, defaultValueCode:null
    RectCallback? rectCallback,

    /// optionalParameters: {void Function()? onRemoved} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onRemoved,

    /// optionalParameters: {Duration fadeDuration = _kDefaultHighlightFadeDuration} , hasDefaultValue:true, defaultValueCode:_kDefaultHighlightFadeDuration
    required Duration fadeDuration,
  }) : super(
          controller: controller,
          referenceBox: referenceBox,
          color: color,
          textDirection: textDirection,
          shape: shape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          rectCallback: rectCallback,
          onRemoved: onRemoved,
          fadeDuration: fadeDuration,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InkHighlight$Mate(
        controller: p.getValue('controller'),
        referenceBox: p.getValue('referenceBox'),
        color: p.getValue('color'),
        textDirection: p.getValue('textDirection'),
        shape: p.getValue('shape'),
        radius: p.getValue('radius'),
        borderRadius: p.getValue('borderRadius'),
        customBorder: p.getValue('customBorder'),
        rectCallback: p.getValue('rectCallback'),
        onRemoved: p.getValue('onRemoved'),
        fadeDuration: p.getValue('fadeDuration'),
      ),
    );
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'referenceBox', init: referenceBox);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'radius', init: radius);
    mateParams.set(name: 'borderRadius', init: borderRadius);
    mateParams.set(name: 'customBorder', init: customBorder);
    mateParams.set(name: 'rectCallback', init: rectCallback);
    mateParams.set(name: 'onRemoved', init: onRemoved);
    mateParams.set(name: 'fadeDuration', init: fadeDuration);
  }
}
