// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.738939

import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/preferred_size.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/services/system_chrome.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class AppBar extends StatefulWidget implements PreferredSizeWidget
class AppBar$Mate extends AppBar {
  /// AppBar AppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? backgroundColor, Color? foregroundColor, Brightness? brightness, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double toolbarOpacity = 1.0, double bottomOpacity = 1.0, double? toolbarHeight, double? leadingWidth, bool? backwardsCompatibility, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false})
  AppBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? leading}
    Widget? leading,

    /// param: {bool automaticallyImplyLeading = true}
    required bool automaticallyImplyLeading,

    /// param: {Widget? title}
    Widget? title,

    /// param: {List<Widget>? actions}
    List<Widget>? actions,

    /// param: {Widget? flexibleSpace}
    Widget? flexibleSpace,

    /// param: {PreferredSizeWidget? bottom}
    PreferredSizeWidget? bottom,

    /// param: {double? elevation}
    double? elevation,

    /// param: {double? scrolledUnderElevation}
    double? scrolledUnderElevation,

    /// param: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate}
    required ScrollNotificationPredicate notificationPredicate,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? foregroundColor}
    Color? foregroundColor,

    /// param: {Brightness? brightness}
    Brightness? brightness,

    /// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,

    /// param: {IconThemeData? actionsIconTheme}
    IconThemeData? actionsIconTheme,

    /// param: {bool primary = true}
    required bool primary,

    /// param: {bool? centerTitle}
    bool? centerTitle,

    /// param: {bool excludeHeaderSemantics = false}
    required bool excludeHeaderSemantics,

    /// param: {double? titleSpacing}
    double? titleSpacing,

    /// param: {double toolbarOpacity = 1.0}
    required double toolbarOpacity,

    /// param: {double bottomOpacity = 1.0}
    required double bottomOpacity,

    /// param: {double? toolbarHeight}
    double? toolbarHeight,

    /// param: {double? leadingWidth}
    double? leadingWidth,

    /// param: {bool? backwardsCompatibility}
    bool? backwardsCompatibility,

    /// param: {TextStyle? toolbarTextStyle}
    TextStyle? toolbarTextStyle,

    /// param: {TextStyle? titleTextStyle}
    TextStyle? titleTextStyle,

    /// param: {SystemUiOverlayStyle? systemOverlayStyle}
    SystemUiOverlayStyle? systemOverlayStyle,

    /// param: {bool forceMaterialTransparency = false}
    required bool forceMaterialTransparency,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          title: title,
          actions: actions,
          flexibleSpace: flexibleSpace,
          bottom: bottom,
          elevation: elevation,
          scrolledUnderElevation: scrolledUnderElevation,
          notificationPredicate: notificationPredicate,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          brightness: brightness,
          iconTheme: iconTheme,
          actionsIconTheme: actionsIconTheme,
          primary: primary,
          centerTitle: centerTitle,
          excludeHeaderSemantics: excludeHeaderSemantics,
          titleSpacing: titleSpacing,
          toolbarOpacity: toolbarOpacity,
          bottomOpacity: bottomOpacity,
          toolbarHeight: toolbarHeight,
          leadingWidth: leadingWidth,
          backwardsCompatibility: backwardsCompatibility,
          toolbarTextStyle: toolbarTextStyle,
          titleTextStyle: titleTextStyle,
          systemOverlayStyle: systemOverlayStyle,
          forceMaterialTransparency: forceMaterialTransparency,
        ) {}
}

/// class SliverAppBar extends StatefulWidget
class SliverAppBar$Mate extends SliverAppBar {
  /// SliverAppBar SliverAppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, Color? shadowColor, Color? surfaceTintColor, bool forceElevated = false, Color? backgroundColor, Color? foregroundColor, Brightness? brightness, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double? collapsedHeight, double? expandedHeight, bool floating = false, bool pinned = false, bool snap = false, bool stretch = false, double stretchTriggerOffset = 100.0, Future<void> Function()? onStretchTrigger, ShapeBorder? shape, double toolbarHeight = kToolbarHeight, double? leadingWidth, bool? backwardsCompatibility, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false})
  SliverAppBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? leading}
    Widget? leading,

    /// param: {bool automaticallyImplyLeading = true}
    required bool automaticallyImplyLeading,

    /// param: {Widget? title}
    Widget? title,

    /// param: {List<Widget>? actions}
    List<Widget>? actions,

    /// param: {Widget? flexibleSpace}
    Widget? flexibleSpace,

    /// param: {PreferredSizeWidget? bottom}
    PreferredSizeWidget? bottom,

    /// param: {double? elevation}
    double? elevation,

    /// param: {double? scrolledUnderElevation}
    double? scrolledUnderElevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {bool forceElevated = false}
    required bool forceElevated,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? foregroundColor}
    Color? foregroundColor,

    /// param: {Brightness? brightness}
    Brightness? brightness,

    /// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,

    /// param: {IconThemeData? actionsIconTheme}
    IconThemeData? actionsIconTheme,

    /// param: {bool primary = true}
    required bool primary,

    /// param: {bool? centerTitle}
    bool? centerTitle,

    /// param: {bool excludeHeaderSemantics = false}
    required bool excludeHeaderSemantics,

    /// param: {double? titleSpacing}
    double? titleSpacing,

    /// param: {double? collapsedHeight}
    double? collapsedHeight,

    /// param: {double? expandedHeight}
    double? expandedHeight,

    /// param: {bool floating = false}
    required bool floating,

    /// param: {bool pinned = false}
    required bool pinned,

    /// param: {bool snap = false}
    required bool snap,

    /// param: {bool stretch = false}
    required bool stretch,

    /// param: {double stretchTriggerOffset = 100.0}
    required double stretchTriggerOffset,

    /// param: {Future<void> Function()? onStretchTrigger}
    AsyncCallback? onStretchTrigger,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {double toolbarHeight = kToolbarHeight}
    required double toolbarHeight,

    /// param: {double? leadingWidth}
    double? leadingWidth,

    /// param: {bool? backwardsCompatibility}
    bool? backwardsCompatibility,

    /// param: {TextStyle? toolbarTextStyle}
    TextStyle? toolbarTextStyle,

    /// param: {TextStyle? titleTextStyle}
    TextStyle? titleTextStyle,

    /// param: {SystemUiOverlayStyle? systemOverlayStyle}
    SystemUiOverlayStyle? systemOverlayStyle,

    /// param: {bool forceMaterialTransparency = false}
    required bool forceMaterialTransparency,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          title: title,
          actions: actions,
          flexibleSpace: flexibleSpace,
          bottom: bottom,
          elevation: elevation,
          scrolledUnderElevation: scrolledUnderElevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          forceElevated: forceElevated,
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          brightness: brightness,
          iconTheme: iconTheme,
          actionsIconTheme: actionsIconTheme,
          primary: primary,
          centerTitle: centerTitle,
          excludeHeaderSemantics: excludeHeaderSemantics,
          titleSpacing: titleSpacing,
          collapsedHeight: collapsedHeight,
          expandedHeight: expandedHeight,
          floating: floating,
          pinned: pinned,
          snap: snap,
          stretch: stretch,
          stretchTriggerOffset: stretchTriggerOffset,
          onStretchTrigger: onStretchTrigger,
          shape: shape,
          toolbarHeight: toolbarHeight,
          leadingWidth: leadingWidth,
          backwardsCompatibility: backwardsCompatibility,
          toolbarTextStyle: toolbarTextStyle,
          titleTextStyle: titleTextStyle,
          systemOverlayStyle: systemOverlayStyle,
          forceMaterialTransparency: forceMaterialTransparency,
        ) {}
}
