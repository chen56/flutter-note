// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/preferred_size.dart';
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class ScaffoldMessenger extends StatefulWidget
class ScaffoldMessenger$Mate extends ScaffoldMessenger with WidgetMate<ScaffoldMessenger$Mate> {
  /// ScaffoldMessenger ScaffoldMessenger({Key? key, required Widget child})
  ScaffoldMessenger$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaffoldMessenger$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
  }
}

/// class ScaffoldPrelayoutGeometry
class ScaffoldPrelayoutGeometry$Mate extends ScaffoldPrelayoutGeometry with Mate<ScaffoldPrelayoutGeometry$Mate> {
  /// ScaffoldPrelayoutGeometry ScaffoldPrelayoutGeometry({required Size bottomSheetSize, required double contentBottom, required double contentTop, required Size floatingActionButtonSize, required EdgeInsets minInsets, required EdgeInsets minViewPadding, required Size scaffoldSize, required Size snackBarSize, required Size materialBannerSize, required TextDirection textDirection})
  ScaffoldPrelayoutGeometry$Mate({
    /// optionalParameters: {required Size bottomSheetSize} , hasDefaultValue:false, defaultValueCode:null
    required Size bottomSheetSize,

    /// optionalParameters: {required double contentBottom} , hasDefaultValue:false, defaultValueCode:null
    required double contentBottom,

    /// optionalParameters: {required double contentTop} , hasDefaultValue:false, defaultValueCode:null
    required double contentTop,

    /// optionalParameters: {required Size floatingActionButtonSize} , hasDefaultValue:false, defaultValueCode:null
    required Size floatingActionButtonSize,

    /// optionalParameters: {required EdgeInsets minInsets} , hasDefaultValue:false, defaultValueCode:null
    required EdgeInsets minInsets,

    /// optionalParameters: {required EdgeInsets minViewPadding} , hasDefaultValue:false, defaultValueCode:null
    required EdgeInsets minViewPadding,

    /// optionalParameters: {required Size scaffoldSize} , hasDefaultValue:false, defaultValueCode:null
    required Size scaffoldSize,

    /// optionalParameters: {required Size snackBarSize} , hasDefaultValue:false, defaultValueCode:null
    required Size snackBarSize,

    /// optionalParameters: {required Size materialBannerSize} , hasDefaultValue:false, defaultValueCode:null
    required Size materialBannerSize,

    /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection textDirection,
  }) : super(
          bottomSheetSize: bottomSheetSize,
          contentBottom: contentBottom,
          contentTop: contentTop,
          floatingActionButtonSize: floatingActionButtonSize,
          minInsets: minInsets,
          minViewPadding: minViewPadding,
          scaffoldSize: scaffoldSize,
          snackBarSize: snackBarSize,
          materialBannerSize: materialBannerSize,
          textDirection: textDirection,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaffoldPrelayoutGeometry$Mate(
        bottomSheetSize: p.getValue('bottomSheetSize'),
        contentBottom: p.getValue('contentBottom'),
        contentTop: p.getValue('contentTop'),
        floatingActionButtonSize: p.getValue('floatingActionButtonSize'),
        minInsets: p.getValue('minInsets'),
        minViewPadding: p.getValue('minViewPadding'),
        scaffoldSize: p.getValue('scaffoldSize'),
        snackBarSize: p.getValue('snackBarSize'),
        materialBannerSize: p.getValue('materialBannerSize'),
        textDirection: p.getValue('textDirection'),
      ),
    );
    mateParams.set(name: 'bottomSheetSize', init: bottomSheetSize);
    mateParams.set(name: 'contentBottom', init: contentBottom);
    mateParams.set(name: 'contentTop', init: contentTop);
    mateParams.set(name: 'floatingActionButtonSize', init: floatingActionButtonSize);
    mateParams.set(name: 'minInsets', init: minInsets);
    mateParams.set(name: 'minViewPadding', init: minViewPadding);
    mateParams.set(name: 'scaffoldSize', init: scaffoldSize);
    mateParams.set(name: 'snackBarSize', init: snackBarSize);
    mateParams.set(name: 'materialBannerSize', init: materialBannerSize);
    mateParams.set(name: 'textDirection', init: textDirection);
  }
}

/// class ScaffoldGeometry
class ScaffoldGeometry$Mate extends ScaffoldGeometry with Mate<ScaffoldGeometry$Mate> {
  /// ScaffoldGeometry ScaffoldGeometry({double? bottomNavigationBarTop, Rect? floatingActionButtonArea})
  ScaffoldGeometry$Mate({
    /// optionalParameters: {double? bottomNavigationBarTop} , hasDefaultValue:false, defaultValueCode:null
    double? bottomNavigationBarTop,

    /// optionalParameters: {Rect? floatingActionButtonArea} , hasDefaultValue:false, defaultValueCode:null
    Rect? floatingActionButtonArea,
  }) : super(
          bottomNavigationBarTop: bottomNavigationBarTop,
          floatingActionButtonArea: floatingActionButtonArea,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaffoldGeometry$Mate(
        bottomNavigationBarTop: p.getValue('bottomNavigationBarTop'),
        floatingActionButtonArea: p.getValue('floatingActionButtonArea'),
      ),
    );
    mateParams.set(name: 'bottomNavigationBarTop', init: bottomNavigationBarTop);
    mateParams.set(name: 'floatingActionButtonArea', init: floatingActionButtonArea);
  }
}

/// class Scaffold extends StatefulWidget
class Scaffold$Mate extends Scaffold with WidgetMate<Scaffold$Mate> {
  /// Scaffold Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd, Widget? drawer, void Function(bool)? onDrawerChanged, Widget? endDrawer, void Function(bool)? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary = true, DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start, bool extendBody = false, bool extendBodyBehindAppBar = false, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture = true, bool endDrawerEnableOpenDragGesture = true, String? restorationId})
  Scaffold$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {PreferredSizeWidget? appBar} , hasDefaultValue:false, defaultValueCode:null
    PreferredSizeWidget? appBar,

    /// optionalParameters: {Widget? body} , hasDefaultValue:false, defaultValueCode:null
    Widget? body,

    /// optionalParameters: {Widget? floatingActionButton} , hasDefaultValue:false, defaultValueCode:null
    Widget? floatingActionButton,

    /// optionalParameters: {FloatingActionButtonLocation? floatingActionButtonLocation} , hasDefaultValue:false, defaultValueCode:null
    FloatingActionButtonLocation? floatingActionButtonLocation,

    /// optionalParameters: {FloatingActionButtonAnimator? floatingActionButtonAnimator} , hasDefaultValue:false, defaultValueCode:null
    FloatingActionButtonAnimator? floatingActionButtonAnimator,

    /// optionalParameters: {List<Widget>? persistentFooterButtons} , hasDefaultValue:false, defaultValueCode:null
    List<Widget>? persistentFooterButtons,

    /// optionalParameters: {AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.centerEnd
    required AlignmentDirectional persistentFooterAlignment,

    /// optionalParameters: {Widget? drawer} , hasDefaultValue:false, defaultValueCode:null
    Widget? drawer,

    /// optionalParameters: {void Function(bool)? onDrawerChanged} , hasDefaultValue:false, defaultValueCode:null
    DrawerCallback? onDrawerChanged,

    /// optionalParameters: {Widget? endDrawer} , hasDefaultValue:false, defaultValueCode:null
    Widget? endDrawer,

    /// optionalParameters: {void Function(bool)? onEndDrawerChanged} , hasDefaultValue:false, defaultValueCode:null
    DrawerCallback? onEndDrawerChanged,

    /// optionalParameters: {Widget? bottomNavigationBar} , hasDefaultValue:false, defaultValueCode:null
    Widget? bottomNavigationBar,

    /// optionalParameters: {Widget? bottomSheet} , hasDefaultValue:false, defaultValueCode:null
    Widget? bottomSheet,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {bool? resizeToAvoidBottomInset} , hasDefaultValue:false, defaultValueCode:null
    bool? resizeToAvoidBottomInset,

    /// optionalParameters: {bool primary = true} , hasDefaultValue:true, defaultValueCode:true
    required bool primary,

    /// optionalParameters: {DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior drawerDragStartBehavior,

    /// optionalParameters: {bool extendBody = false} , hasDefaultValue:true, defaultValueCode:false
    required bool extendBody,

    /// optionalParameters: {bool extendBodyBehindAppBar = false} , hasDefaultValue:true, defaultValueCode:false
    required bool extendBodyBehindAppBar,

    /// optionalParameters: {Color? drawerScrimColor} , hasDefaultValue:false, defaultValueCode:null
    Color? drawerScrimColor,

    /// optionalParameters: {double? drawerEdgeDragWidth} , hasDefaultValue:false, defaultValueCode:null
    double? drawerEdgeDragWidth,

    /// optionalParameters: {bool drawerEnableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
    required bool drawerEnableOpenDragGesture,

    /// optionalParameters: {bool endDrawerEnableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
    required bool endDrawerEnableOpenDragGesture,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,
  }) : super(
          key: key,
          appBar: appBar,
          body: body,
          floatingActionButton: floatingActionButton,
          floatingActionButtonLocation: floatingActionButtonLocation,
          floatingActionButtonAnimator: floatingActionButtonAnimator,
          persistentFooterButtons: persistentFooterButtons,
          persistentFooterAlignment: persistentFooterAlignment,
          drawer: drawer,
          onDrawerChanged: onDrawerChanged,
          endDrawer: endDrawer,
          onEndDrawerChanged: onEndDrawerChanged,
          bottomNavigationBar: bottomNavigationBar,
          bottomSheet: bottomSheet,
          backgroundColor: backgroundColor,
          resizeToAvoidBottomInset: resizeToAvoidBottomInset,
          primary: primary,
          drawerDragStartBehavior: drawerDragStartBehavior,
          extendBody: extendBody,
          extendBodyBehindAppBar: extendBodyBehindAppBar,
          drawerScrimColor: drawerScrimColor,
          drawerEdgeDragWidth: drawerEdgeDragWidth,
          drawerEnableOpenDragGesture: drawerEnableOpenDragGesture,
          endDrawerEnableOpenDragGesture: endDrawerEnableOpenDragGesture,
          restorationId: restorationId,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Scaffold$Mate(
        key: p.getValue('key'),
        appBar: p.getValue('appBar'),
        body: p.getValue('body'),
        floatingActionButton: p.getValue('floatingActionButton'),
        floatingActionButtonLocation: p.getValue('floatingActionButtonLocation'),
        floatingActionButtonAnimator: p.getValue('floatingActionButtonAnimator'),
        persistentFooterButtons: p.getValue('persistentFooterButtons'),
        persistentFooterAlignment: p.getValue('persistentFooterAlignment'),
        drawer: p.getValue('drawer'),
        onDrawerChanged: p.getValue('onDrawerChanged'),
        endDrawer: p.getValue('endDrawer'),
        onEndDrawerChanged: p.getValue('onEndDrawerChanged'),
        bottomNavigationBar: p.getValue('bottomNavigationBar'),
        bottomSheet: p.getValue('bottomSheet'),
        backgroundColor: p.getValue('backgroundColor'),
        resizeToAvoidBottomInset: p.getValue('resizeToAvoidBottomInset'),
        primary: p.getValue('primary'),
        drawerDragStartBehavior: p.getValue('drawerDragStartBehavior'),
        extendBody: p.getValue('extendBody'),
        extendBodyBehindAppBar: p.getValue('extendBodyBehindAppBar'),
        drawerScrimColor: p.getValue('drawerScrimColor'),
        drawerEdgeDragWidth: p.getValue('drawerEdgeDragWidth'),
        drawerEnableOpenDragGesture: p.getValue('drawerEnableOpenDragGesture'),
        endDrawerEnableOpenDragGesture: p.getValue('endDrawerEnableOpenDragGesture'),
        restorationId: p.getValue('restorationId'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'appBar', init: appBar);
    mateParams.set(name: 'body', init: body);
    mateParams.set(name: 'floatingActionButton', init: floatingActionButton);
    mateParams.set(name: 'floatingActionButtonLocation', init: floatingActionButtonLocation);
    mateParams.set(name: 'floatingActionButtonAnimator', init: floatingActionButtonAnimator);
    mateParams.set(name: 'persistentFooterButtons', init: persistentFooterButtons);
    mateParams.set(name: 'persistentFooterAlignment', init: persistentFooterAlignment);
    mateParams.set(name: 'drawer', init: drawer);
    mateParams.set(name: 'onDrawerChanged', init: onDrawerChanged);
    mateParams.set(name: 'endDrawer', init: endDrawer);
    mateParams.set(name: 'onEndDrawerChanged', init: onEndDrawerChanged);
    mateParams.set(name: 'bottomNavigationBar', init: bottomNavigationBar);
    mateParams.set(name: 'bottomSheet', init: bottomSheet);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'resizeToAvoidBottomInset', init: resizeToAvoidBottomInset);
    mateParams.set(name: 'primary', init: primary);
    mateParams.set(name: 'drawerDragStartBehavior', init: drawerDragStartBehavior);
    mateParams.set(name: 'extendBody', init: extendBody);
    mateParams.set(name: 'extendBodyBehindAppBar', init: extendBodyBehindAppBar);
    mateParams.set(name: 'drawerScrimColor', init: drawerScrimColor);
    mateParams.set(name: 'drawerEdgeDragWidth', init: drawerEdgeDragWidth);
    mateParams.set(name: 'drawerEnableOpenDragGesture', init: drawerEnableOpenDragGesture);
    mateParams.set(name: 'endDrawerEnableOpenDragGesture', init: endDrawerEnableOpenDragGesture);
    mateParams.set(name: 'restorationId', init: restorationId);
  }
}
