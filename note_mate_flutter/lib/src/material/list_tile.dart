// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class ListTile extends StatelessWidget
class ListTile$Mate extends ListTile with WidgetMate<ListTile$Mate> {
  /// ListTile ListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine = false, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, bool enabled = true, void Function()? onTap, void Function()? onLongPress, void Function(bool)? onFocusChange, MouseCursor? mouseCursor, bool selected = false, Color? focusColor, Color? hoverColor, Color? splashColor, FocusNode? focusNode, bool autofocus = false, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth})
  ListTile$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? title} , hasDefaultValue:false, defaultValueCode:null
    Widget? title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {bool isThreeLine = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isThreeLine,

    /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
    bool? dense,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , hasDefaultValue:false, defaultValueCode:null
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
    required bool selected,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {double? horizontalTitleGap} , hasDefaultValue:false, defaultValueCode:null
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , hasDefaultValue:false, defaultValueCode:null
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minLeadingWidth,
  }) : super(
          key: key,
          leading: leading,
          title: title,
          subtitle: subtitle,
          trailing: trailing,
          isThreeLine: isThreeLine,
          dense: dense,
          visualDensity: visualDensity,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          enabled: enabled,
          onTap: onTap,
          onLongPress: onLongPress,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          selected: selected,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          focusNode: focusNode,
          autofocus: autofocus,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ListTile$Mate(
        key: p.getValue('key'),
        leading: p.getValue('leading'),
        title: p.getValue('title'),
        subtitle: p.getValue('subtitle'),
        trailing: p.getValue('trailing'),
        isThreeLine: p.getValue('isThreeLine'),
        dense: p.getValue('dense'),
        visualDensity: p.getValue('visualDensity'),
        shape: p.getValue('shape'),
        style: p.getValue('style'),
        selectedColor: p.getValue('selectedColor'),
        iconColor: p.getValue('iconColor'),
        textColor: p.getValue('textColor'),
        titleTextStyle: p.getValue('titleTextStyle'),
        subtitleTextStyle: p.getValue('subtitleTextStyle'),
        leadingAndTrailingTextStyle: p.getValue('leadingAndTrailingTextStyle'),
        contentPadding: p.getValue('contentPadding'),
        enabled: p.getValue('enabled'),
        onTap: p.getValue('onTap'),
        onLongPress: p.getValue('onLongPress'),
        onFocusChange: p.getValue('onFocusChange'),
        mouseCursor: p.getValue('mouseCursor'),
        selected: p.getValue('selected'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        splashColor: p.getValue('splashColor'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        tileColor: p.getValue('tileColor'),
        selectedTileColor: p.getValue('selectedTileColor'),
        enableFeedback: p.getValue('enableFeedback'),
        horizontalTitleGap: p.getValue('horizontalTitleGap'),
        minVerticalPadding: p.getValue('minVerticalPadding'),
        minLeadingWidth: p.getValue('minLeadingWidth'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'leading', init: leading);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'subtitle', init: subtitle);
    mateParams.set(name: 'trailing', init: trailing);
    mateParams.set(name: 'isThreeLine', init: isThreeLine);
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'selectedColor', init: selectedColor);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'textColor', init: textColor);
    mateParams.set(name: 'titleTextStyle', init: titleTextStyle);
    mateParams.set(name: 'subtitleTextStyle', init: subtitleTextStyle);
    mateParams.set(name: 'leadingAndTrailingTextStyle', init: leadingAndTrailingTextStyle);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'splashColor', init: splashColor);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'horizontalTitleGap', init: horizontalTitleGap);
    mateParams.set(name: 'minVerticalPadding', init: minVerticalPadding);
    mateParams.set(name: 'minLeadingWidth', init: minLeadingWidth);
  }
}
