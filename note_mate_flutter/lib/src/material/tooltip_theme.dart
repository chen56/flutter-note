// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/tooltip_theme.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class TooltipThemeData with Diagnosticable
class TooltipThemeData$Mate extends TooltipThemeData with Mate<TooltipThemeData$Mate> {
  /// TooltipThemeData TooltipThemeData({double? height, EdgeInsetsGeometry? padding, EdgeInsetsGeometry? margin, double? verticalOffset, bool? preferBelow, bool? excludeFromSemantics, Decoration? decoration, TextStyle? textStyle, TextAlign? textAlign, Duration? waitDuration, Duration? showDuration, TooltipTriggerMode? triggerMode, bool? enableFeedback})
  TooltipThemeData$Mate({
    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? margin,

    /// optionalParameters: {double? verticalOffset} , hasDefaultValue:false, defaultValueCode:null
    double? verticalOffset,

    /// optionalParameters: {bool? preferBelow} , hasDefaultValue:false, defaultValueCode:null
    bool? preferBelow,

    /// optionalParameters: {bool? excludeFromSemantics} , hasDefaultValue:false, defaultValueCode:null
    bool? excludeFromSemantics,

    /// optionalParameters: {Decoration? decoration} , hasDefaultValue:false, defaultValueCode:null
    Decoration? decoration,

    /// optionalParameters: {TextStyle? textStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? textStyle,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {Duration? waitDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? waitDuration,

    /// optionalParameters: {Duration? showDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? showDuration,

    /// optionalParameters: {TooltipTriggerMode? triggerMode} , hasDefaultValue:false, defaultValueCode:null
    TooltipTriggerMode? triggerMode,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,
  }) : super(
          height: height,
          padding: padding,
          margin: margin,
          verticalOffset: verticalOffset,
          preferBelow: preferBelow,
          excludeFromSemantics: excludeFromSemantics,
          decoration: decoration,
          textStyle: textStyle,
          textAlign: textAlign,
          waitDuration: waitDuration,
          showDuration: showDuration,
          triggerMode: triggerMode,
          enableFeedback: enableFeedback,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TooltipThemeData$Mate(
        height: p.getValue('height'),
        padding: p.getValue('padding'),
        margin: p.getValue('margin'),
        verticalOffset: p.getValue('verticalOffset'),
        preferBelow: p.getValue('preferBelow'),
        excludeFromSemantics: p.getValue('excludeFromSemantics'),
        decoration: p.getValue('decoration'),
        textStyle: p.getValue('textStyle'),
        textAlign: p.getValue('textAlign'),
        waitDuration: p.getValue('waitDuration'),
        showDuration: p.getValue('showDuration'),
        triggerMode: p.getValue('triggerMode'),
        enableFeedback: p.getValue('enableFeedback'),
      ),
    );
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'margin', init: margin);
    mateParams.set(name: 'verticalOffset', init: verticalOffset);
    mateParams.set(name: 'preferBelow', init: preferBelow);
    mateParams.set(name: 'excludeFromSemantics', init: excludeFromSemantics);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'textStyle', init: textStyle);
    mateParams.set(name: 'textAlign', init: textAlign);
    mateParams.set(name: 'waitDuration', init: waitDuration);
    mateParams.set(name: 'showDuration', init: showDuration);
    mateParams.set(name: 'triggerMode', init: triggerMode);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
  }
}

/// class TooltipTheme extends InheritedTheme
class TooltipTheme$Mate extends TooltipTheme with WidgetMate<TooltipTheme$Mate> {
  /// TooltipTheme TooltipTheme({Key? key, required TooltipThemeData data, required Widget child})
  TooltipTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TooltipThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required TooltipThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TooltipTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
