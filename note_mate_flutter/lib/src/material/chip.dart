// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class Chip extends StatelessWidget implements ChipAttributes, DeletableChipAttributes
class Chip$Mate extends Chip with WidgetMate<Chip$Mate> {
  /// Chip Chip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, bool useDeleteButtonTooltip = true})
  Chip$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? avatar}
    Widget? avatar,

    /// param: {required Widget label}
    required Widget label,

    /// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,

    /// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,

    /// param: {Widget? deleteIcon}
    Widget? deleteIcon,

    /// param: {void Function()? onDeleted}
    VoidCallback? onDeleted,

    /// param: {Color? deleteIconColor}
    Color? deleteIconColor,

    /// param: {String? deleteButtonTooltipMessage}
    String? deleteButtonTooltipMessage,

    /// param: {BorderSide? side}
    BorderSide? side,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,

    /// param: {bool useDeleteButtonTooltip = true}
    required bool useDeleteButtonTooltip,
  }) : super(
          key: key,
          avatar: avatar,
          label: label,
          labelStyle: labelStyle,
          labelPadding: labelPadding,
          deleteIcon: deleteIcon,
          onDeleted: onDeleted,
          deleteIconColor: deleteIconColor,
          deleteButtonTooltipMessage: deleteButtonTooltipMessage,
          side: side,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          backgroundColor: backgroundColor,
          padding: padding,
          visualDensity: visualDensity,
          materialTapTargetSize: materialTapTargetSize,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          iconTheme: iconTheme,
          useDeleteButtonTooltip: useDeleteButtonTooltip,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Chip$Mate(
        key: p.getValue('key'),
        avatar: p.getValue('avatar'),
        label: p.getValue('label'),
        labelStyle: p.getValue('labelStyle'),
        labelPadding: p.getValue('labelPadding'),
        deleteIcon: p.getValue('deleteIcon'),
        onDeleted: p.getValue('onDeleted'),
        deleteIconColor: p.getValue('deleteIconColor'),
        deleteButtonTooltipMessage: p.getValue('deleteButtonTooltipMessage'),
        side: p.getValue('side'),
        shape: p.getValue('shape'),
        clipBehavior: p.getValue('clipBehavior'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        backgroundColor: p.getValue('backgroundColor'),
        padding: p.getValue('padding'),
        visualDensity: p.getValue('visualDensity'),
        materialTapTargetSize: p.getValue('materialTapTargetSize'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        iconTheme: p.getValue('iconTheme'),
        useDeleteButtonTooltip: p.getValue('useDeleteButtonTooltip'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'avatar', init: avatar);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'labelStyle', init: labelStyle);
    mateParams.set(name: 'labelPadding', init: labelPadding);
    mateParams.set(name: 'deleteIcon', init: deleteIcon);
    mateParams.set(name: 'onDeleted', init: onDeleted);
    mateParams.set(name: 'deleteIconColor', init: deleteIconColor);
    mateParams.set(name: 'deleteButtonTooltipMessage', init: deleteButtonTooltipMessage);
    mateParams.set(name: 'side', init: side);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'materialTapTargetSize', init: materialTapTargetSize);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'iconTheme', init: iconTheme);
    mateParams.set(name: 'useDeleteButtonTooltip', init: useDeleteButtonTooltip);
  }
}

/// class RawChip extends StatefulWidget implements ChipAttributes, DeletableChipAttributes, SelectableChipAttributes, CheckmarkableChipAttributes, DisabledChipAttributes, TappableChipAttributes
class RawChip$Mate extends RawChip with WidgetMate<RawChip$Mate> {
  /// RawChip RawChip({Key? key, ChipThemeData? defaultProperties, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, void Function()? onPressed, void Function(bool)? onSelected, double? pressElevation, bool tapEnabled = true, bool selected = false, bool isEnabled = true, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark = true, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder(), bool useDeleteButtonTooltip = true})
  RawChip$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ChipThemeData? defaultProperties}
    ChipThemeData? defaultProperties,

    /// param: {Widget? avatar}
    Widget? avatar,

    /// param: {required Widget label}
    required Widget label,

    /// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,

    /// param: {Widget? deleteIcon}
    Widget? deleteIcon,

    /// param: {void Function()? onDeleted}
    VoidCallback? onDeleted,

    /// param: {Color? deleteIconColor}
    Color? deleteIconColor,

    /// param: {String? deleteButtonTooltipMessage}
    String? deleteButtonTooltipMessage,

    /// param: {void Function()? onPressed}
    VoidCallback? onPressed,

    /// param: {void Function(bool)? onSelected}
    ValueChanged<bool>? onSelected,

    /// param: {double? pressElevation}
    double? pressElevation,

    /// param: {bool tapEnabled = true}
    required bool tapEnabled,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {bool isEnabled = true}
    required bool isEnabled,

    /// param: {Color? disabledColor}
    Color? disabledColor,

    /// param: {Color? selectedColor}
    Color? selectedColor,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {BorderSide? side}
    BorderSide? side,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,

    /// param: {Color? selectedShadowColor}
    Color? selectedShadowColor,

    /// param: {bool? showCheckmark = true}
    bool? showCheckmark,

    /// param: {Color? checkmarkColor}
    Color? checkmarkColor,

    /// param: {ShapeBorder avatarBorder = const CircleBorder()}
    required ShapeBorder avatarBorder,

    /// param: {bool useDeleteButtonTooltip = true}
    required bool useDeleteButtonTooltip,
  }) : super(
          key: key,
          defaultProperties: defaultProperties,
          avatar: avatar,
          label: label,
          labelStyle: labelStyle,
          padding: padding,
          visualDensity: visualDensity,
          labelPadding: labelPadding,
          deleteIcon: deleteIcon,
          onDeleted: onDeleted,
          deleteIconColor: deleteIconColor,
          deleteButtonTooltipMessage: deleteButtonTooltipMessage,
          onPressed: onPressed,
          onSelected: onSelected,
          pressElevation: pressElevation,
          tapEnabled: tapEnabled,
          selected: selected,
          isEnabled: isEnabled,
          disabledColor: disabledColor,
          selectedColor: selectedColor,
          tooltip: tooltip,
          side: side,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          backgroundColor: backgroundColor,
          materialTapTargetSize: materialTapTargetSize,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          iconTheme: iconTheme,
          selectedShadowColor: selectedShadowColor,
          showCheckmark: showCheckmark,
          checkmarkColor: checkmarkColor,
          avatarBorder: avatarBorder,
          useDeleteButtonTooltip: useDeleteButtonTooltip,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RawChip$Mate(
        key: p.getValue('key'),
        defaultProperties: p.getValue('defaultProperties'),
        avatar: p.getValue('avatar'),
        label: p.getValue('label'),
        labelStyle: p.getValue('labelStyle'),
        padding: p.getValue('padding'),
        visualDensity: p.getValue('visualDensity'),
        labelPadding: p.getValue('labelPadding'),
        deleteIcon: p.getValue('deleteIcon'),
        onDeleted: p.getValue('onDeleted'),
        deleteIconColor: p.getValue('deleteIconColor'),
        deleteButtonTooltipMessage: p.getValue('deleteButtonTooltipMessage'),
        onPressed: p.getValue('onPressed'),
        onSelected: p.getValue('onSelected'),
        pressElevation: p.getValue('pressElevation'),
        tapEnabled: p.getValue('tapEnabled'),
        selected: p.getValue('selected'),
        isEnabled: p.getValue('isEnabled'),
        disabledColor: p.getValue('disabledColor'),
        selectedColor: p.getValue('selectedColor'),
        tooltip: p.getValue('tooltip'),
        side: p.getValue('side'),
        shape: p.getValue('shape'),
        clipBehavior: p.getValue('clipBehavior'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        backgroundColor: p.getValue('backgroundColor'),
        materialTapTargetSize: p.getValue('materialTapTargetSize'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        iconTheme: p.getValue('iconTheme'),
        selectedShadowColor: p.getValue('selectedShadowColor'),
        showCheckmark: p.getValue('showCheckmark'),
        checkmarkColor: p.getValue('checkmarkColor'),
        avatarBorder: p.getValue('avatarBorder'),
        useDeleteButtonTooltip: p.getValue('useDeleteButtonTooltip'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'defaultProperties', init: defaultProperties);
    mateParams.set(name: 'avatar', init: avatar);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'labelStyle', init: labelStyle);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'labelPadding', init: labelPadding);
    mateParams.set(name: 'deleteIcon', init: deleteIcon);
    mateParams.set(name: 'onDeleted', init: onDeleted);
    mateParams.set(name: 'deleteIconColor', init: deleteIconColor);
    mateParams.set(name: 'deleteButtonTooltipMessage', init: deleteButtonTooltipMessage);
    mateParams.set(name: 'onPressed', init: onPressed);
    mateParams.set(name: 'onSelected', init: onSelected);
    mateParams.set(name: 'pressElevation', init: pressElevation);
    mateParams.set(name: 'tapEnabled', init: tapEnabled);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'isEnabled', init: isEnabled);
    mateParams.set(name: 'disabledColor', init: disabledColor);
    mateParams.set(name: 'selectedColor', init: selectedColor);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'side', init: side);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'materialTapTargetSize', init: materialTapTargetSize);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'iconTheme', init: iconTheme);
    mateParams.set(name: 'selectedShadowColor', init: selectedShadowColor);
    mateParams.set(name: 'showCheckmark', init: showCheckmark);
    mateParams.set(name: 'checkmarkColor', init: checkmarkColor);
    mateParams.set(name: 'avatarBorder', init: avatarBorder);
    mateParams.set(name: 'useDeleteButtonTooltip', init: useDeleteButtonTooltip);
  }
}
