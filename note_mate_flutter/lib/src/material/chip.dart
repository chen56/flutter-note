// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.830828

import 'package:flutter/src/material/chip.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class Chip extends StatelessWidget implements ChipAttributes, DeletableChipAttributes
class Chip$Mate extends Chip {
  /// Chip Chip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, bool useDeleteButtonTooltip = true})
  Chip$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? avatar}
    Widget? avatar,

    /// param: {required Widget label}
    required Widget label,

    /// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,

    /// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,

    /// param: {Widget? deleteIcon}
    Widget? deleteIcon,

    /// param: {void Function()? onDeleted}
    VoidCallback? onDeleted,

    /// param: {Color? deleteIconColor}
    Color? deleteIconColor,

    /// param: {String? deleteButtonTooltipMessage}
    String? deleteButtonTooltipMessage,

    /// param: {BorderSide? side}
    BorderSide? side,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,

    /// param: {bool useDeleteButtonTooltip = true}
    required bool useDeleteButtonTooltip,
  }) : super(
          key: key,
          avatar: avatar,
          label: label,
          labelStyle: labelStyle,
          labelPadding: labelPadding,
          deleteIcon: deleteIcon,
          onDeleted: onDeleted,
          deleteIconColor: deleteIconColor,
          deleteButtonTooltipMessage: deleteButtonTooltipMessage,
          side: side,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          backgroundColor: backgroundColor,
          padding: padding,
          visualDensity: visualDensity,
          materialTapTargetSize: materialTapTargetSize,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          iconTheme: iconTheme,
          useDeleteButtonTooltip: useDeleteButtonTooltip,
        ) {}
}

/// class RawChip extends StatefulWidget implements ChipAttributes, DeletableChipAttributes, SelectableChipAttributes, CheckmarkableChipAttributes, DisabledChipAttributes, TappableChipAttributes
class RawChip$Mate extends RawChip {
  /// RawChip RawChip({Key? key, ChipThemeData? defaultProperties, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, void Function()? onPressed, void Function(bool)? onSelected, double? pressElevation, bool tapEnabled = true, bool selected = false, bool isEnabled = true, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark = true, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder(), bool useDeleteButtonTooltip = true})
  RawChip$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ChipThemeData? defaultProperties}
    ChipThemeData? defaultProperties,

    /// param: {Widget? avatar}
    Widget? avatar,

    /// param: {required Widget label}
    required Widget label,

    /// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,

    /// param: {Widget? deleteIcon}
    Widget? deleteIcon,

    /// param: {void Function()? onDeleted}
    VoidCallback? onDeleted,

    /// param: {Color? deleteIconColor}
    Color? deleteIconColor,

    /// param: {String? deleteButtonTooltipMessage}
    String? deleteButtonTooltipMessage,

    /// param: {void Function()? onPressed}
    VoidCallback? onPressed,

    /// param: {void Function(bool)? onSelected}
    ValueChanged<bool>? onSelected,

    /// param: {double? pressElevation}
    double? pressElevation,

    /// param: {bool tapEnabled = true}
    required bool tapEnabled,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {bool isEnabled = true}
    required bool isEnabled,

    /// param: {Color? disabledColor}
    Color? disabledColor,

    /// param: {Color? selectedColor}
    Color? selectedColor,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {BorderSide? side}
    BorderSide? side,

    /// param: {OutlinedBorder? shape}
    OutlinedBorder? shape,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {IconThemeData? iconTheme}
    IconThemeData? iconTheme,

    /// param: {Color? selectedShadowColor}
    Color? selectedShadowColor,

    /// param: {bool? showCheckmark = true}
    bool? showCheckmark,

    /// param: {Color? checkmarkColor}
    Color? checkmarkColor,

    /// param: {ShapeBorder avatarBorder = const CircleBorder()}
    required ShapeBorder avatarBorder,

    /// param: {bool useDeleteButtonTooltip = true}
    required bool useDeleteButtonTooltip,
  }) : super(
          key: key,
          defaultProperties: defaultProperties,
          avatar: avatar,
          label: label,
          labelStyle: labelStyle,
          padding: padding,
          visualDensity: visualDensity,
          labelPadding: labelPadding,
          deleteIcon: deleteIcon,
          onDeleted: onDeleted,
          deleteIconColor: deleteIconColor,
          deleteButtonTooltipMessage: deleteButtonTooltipMessage,
          onPressed: onPressed,
          onSelected: onSelected,
          pressElevation: pressElevation,
          tapEnabled: tapEnabled,
          selected: selected,
          isEnabled: isEnabled,
          disabledColor: disabledColor,
          selectedColor: selectedColor,
          tooltip: tooltip,
          side: side,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          backgroundColor: backgroundColor,
          materialTapTargetSize: materialTapTargetSize,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          iconTheme: iconTheme,
          selectedShadowColor: selectedShadowColor,
          showCheckmark: showCheckmark,
          checkmarkColor: checkmarkColor,
          avatarBorder: avatarBorder,
          useDeleteButtonTooltip: useDeleteButtonTooltip,
        ) {}
}
