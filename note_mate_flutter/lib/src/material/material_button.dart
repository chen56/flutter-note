// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/material_button.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class MaterialButton extends StatelessWidget
class MaterialButton$Mate extends MaterialButton with WidgetMate<MaterialButton$Mate> {
  /// MaterialButton MaterialButton({Key? key, required void Function()? onPressed, void Function()? onLongPress, void Function(bool)? onHighlightChanged, MouseCursor? mouseCursor, ButtonTextTheme? textTheme, Color? textColor, Color? disabledTextColor, Color? color, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Brightness? colorBrightness, double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, Duration? animationDuration, double? minWidth, double? height, bool enableFeedback = true, Widget? child})
  MaterialButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onPressed,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {ButtonTextTheme? textTheme} , hasDefaultValue:false, defaultValueCode:null
    ButtonTextTheme? textTheme,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {Color? disabledTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledTextColor,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {Brightness? colorBrightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? colorBrightness,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? focusElevation} , hasDefaultValue:false, defaultValueCode:null
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , hasDefaultValue:false, defaultValueCode:null
    double? hoverElevation,

    /// optionalParameters: {double? highlightElevation} , hasDefaultValue:false, defaultValueCode:null
    double? highlightElevation,

    /// optionalParameters: {double? disabledElevation} , hasDefaultValue:false, defaultValueCode:null
    double? disabledElevation,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {Duration? animationDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? animationDuration,

    /// optionalParameters: {double? minWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minWidth,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {bool enableFeedback = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableFeedback,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          onPressed: onPressed,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          mouseCursor: mouseCursor,
          textTheme: textTheme,
          textColor: textColor,
          disabledTextColor: disabledTextColor,
          color: color,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorBrightness: colorBrightness,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          padding: padding,
          visualDensity: visualDensity,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          materialTapTargetSize: materialTapTargetSize,
          animationDuration: animationDuration,
          minWidth: minWidth,
          height: height,
          enableFeedback: enableFeedback,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => MaterialButton$Mate(
        key: p.getValue('key'),
        onPressed: p.getValue('onPressed'),
        onLongPress: p.getValue('onLongPress'),
        onHighlightChanged: p.getValue('onHighlightChanged'),
        mouseCursor: p.getValue('mouseCursor'),
        textTheme: p.getValue('textTheme'),
        textColor: p.getValue('textColor'),
        disabledTextColor: p.getValue('disabledTextColor'),
        color: p.getValue('color'),
        disabledColor: p.getValue('disabledColor'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        highlightColor: p.getValue('highlightColor'),
        splashColor: p.getValue('splashColor'),
        colorBrightness: p.getValue('colorBrightness'),
        elevation: p.getValue('elevation'),
        focusElevation: p.getValue('focusElevation'),
        hoverElevation: p.getValue('hoverElevation'),
        highlightElevation: p.getValue('highlightElevation'),
        disabledElevation: p.getValue('disabledElevation'),
        padding: p.getValue('padding'),
        visualDensity: p.getValue('visualDensity'),
        shape: p.getValue('shape'),
        clipBehavior: p.getValue('clipBehavior'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        materialTapTargetSize: p.getValue('materialTapTargetSize'),
        animationDuration: p.getValue('animationDuration'),
        minWidth: p.getValue('minWidth'),
        height: p.getValue('height'),
        enableFeedback: p.getValue('enableFeedback'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'onPressed', init: onPressed);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onHighlightChanged', init: onHighlightChanged);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'textTheme', init: textTheme);
    mateParams.set(name: 'textColor', init: textColor);
    mateParams.set(name: 'disabledTextColor', init: disabledTextColor);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'disabledColor', init: disabledColor);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'highlightColor', init: highlightColor);
    mateParams.set(name: 'splashColor', init: splashColor);
    mateParams.set(name: 'colorBrightness', init: colorBrightness);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'focusElevation', init: focusElevation);
    mateParams.set(name: 'hoverElevation', init: hoverElevation);
    mateParams.set(name: 'highlightElevation', init: highlightElevation);
    mateParams.set(name: 'disabledElevation', init: disabledElevation);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'materialTapTargetSize', init: materialTapTargetSize);
    mateParams.set(name: 'animationDuration', init: animationDuration);
    mateParams.set(name: 'minWidth', init: minWidth);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'child', init: child);
  }
}
