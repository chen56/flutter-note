// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.780835

import 'package:flutter/src/material/bottom_navigation_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/bottom_navigation_bar_item.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class BottomNavigationBar extends StatefulWidget
class BottomNavigationBar$Mate extends BottomNavigationBar {
  /// BottomNavigationBar BottomNavigationBar({Key? key, required List<BottomNavigationBarItem> items, void Function(int)? onTap, int currentIndex = 0, double? elevation, BottomNavigationBarType? type, Color? fixedColor, Color? backgroundColor, double iconSize = 24.0, Color? selectedItemColor, Color? unselectedItemColor, IconThemeData? selectedIconTheme, IconThemeData? unselectedIconTheme, double selectedFontSize = 14.0, double unselectedFontSize = 12.0, TextStyle? selectedLabelStyle, TextStyle? unselectedLabelStyle, bool? showSelectedLabels, bool? showUnselectedLabels, MouseCursor? mouseCursor, bool? enableFeedback, BottomNavigationBarLandscapeLayout? landscapeLayout, bool useLegacyColorScheme = true})
  BottomNavigationBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<BottomNavigationBarItem> items}
    required List<BottomNavigationBarItem> items,

    /// param: {void Function(int)? onTap}
    ValueChanged<int>? onTap,

    /// param: {int currentIndex = 0}
    required int currentIndex,

    /// param: {double? elevation}
    double? elevation,

    /// param: {BottomNavigationBarType? type}
    BottomNavigationBarType? type,

    /// param: {Color? fixedColor}
    Color? fixedColor,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double iconSize = 24.0}
    required double iconSize,

    /// param: {Color? selectedItemColor}
    Color? selectedItemColor,

    /// param: {Color? unselectedItemColor}
    Color? unselectedItemColor,

    /// param: {IconThemeData? selectedIconTheme}
    IconThemeData? selectedIconTheme,

    /// param: {IconThemeData? unselectedIconTheme}
    IconThemeData? unselectedIconTheme,

    /// param: {double selectedFontSize = 14.0}
    required double selectedFontSize,

    /// param: {double unselectedFontSize = 12.0}
    required double unselectedFontSize,

    /// param: {TextStyle? selectedLabelStyle}
    TextStyle? selectedLabelStyle,

    /// param: {TextStyle? unselectedLabelStyle}
    TextStyle? unselectedLabelStyle,

    /// param: {bool? showSelectedLabels}
    bool? showSelectedLabels,

    /// param: {bool? showUnselectedLabels}
    bool? showUnselectedLabels,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {BottomNavigationBarLandscapeLayout? landscapeLayout}
    BottomNavigationBarLandscapeLayout? landscapeLayout,

    /// param: {bool useLegacyColorScheme = true}
    required bool useLegacyColorScheme,
  }) : super(
          key: key,
          items: items,
          onTap: onTap,
          currentIndex: currentIndex,
          elevation: elevation,
          type: type,
          fixedColor: fixedColor,
          backgroundColor: backgroundColor,
          iconSize: iconSize,
          selectedItemColor: selectedItemColor,
          unselectedItemColor: unselectedItemColor,
          selectedIconTheme: selectedIconTheme,
          unselectedIconTheme: unselectedIconTheme,
          selectedFontSize: selectedFontSize,
          unselectedFontSize: unselectedFontSize,
          selectedLabelStyle: selectedLabelStyle,
          unselectedLabelStyle: unselectedLabelStyle,
          showSelectedLabels: showSelectedLabels,
          showUnselectedLabels: showUnselectedLabels,
          mouseCursor: mouseCursor,
          enableFeedback: enableFeedback,
          landscapeLayout: landscapeLayout,
          useLegacyColorScheme: useLegacyColorScheme,
        ) {}
}
