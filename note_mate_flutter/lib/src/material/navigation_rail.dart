// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class NavigationRail extends StatefulWidget
class NavigationRail$Mate extends NavigationRail with WidgetMate<NavigationRail$Mate> {
  /// NavigationRail NavigationRail({Key? key, Color? backgroundColor, bool extended = false, Widget? leading, Widget? trailing, required List<NavigationRailDestination> destinations, required int? selectedIndex, void Function(int)? onDestinationSelected, double? elevation, double? groupAlignment, NavigationRailLabelType? labelType, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? minWidth, double? minExtendedWidth, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape})
  NavigationRail$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {bool extended = false} , hasDefaultValue:true, defaultValueCode:false
    required bool extended,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {required List<NavigationRailDestination> destinations} , hasDefaultValue:false, defaultValueCode:null
    required List<NavigationRailDestination> destinations,

    /// optionalParameters: {required int? selectedIndex} , hasDefaultValue:false, defaultValueCode:null
    required int? selectedIndex,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int>? onDestinationSelected,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? groupAlignment} , hasDefaultValue:false, defaultValueCode:null
    double? groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , hasDefaultValue:false, defaultValueCode:null
    NavigationRailLabelType? labelType,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? selectedIconTheme,

    /// optionalParameters: {double? minWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minWidth,

    /// optionalParameters: {double? minExtendedWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minExtendedWidth,

    /// optionalParameters: {bool? useIndicator} , hasDefaultValue:false, defaultValueCode:null
    bool? useIndicator,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          extended: extended,
          leading: leading,
          trailing: trailing,
          destinations: destinations,
          selectedIndex: selectedIndex,
          onDestinationSelected: onDestinationSelected,
          elevation: elevation,
          groupAlignment: groupAlignment,
          labelType: labelType,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationRail$Mate(
        key: p.getValue('key'),
        backgroundColor: p.getValue('backgroundColor'),
        extended: p.getValue('extended'),
        leading: p.getValue('leading'),
        trailing: p.getValue('trailing'),
        destinations: p.getValue('destinations'),
        selectedIndex: p.getValue('selectedIndex'),
        onDestinationSelected: p.getValue('onDestinationSelected'),
        elevation: p.getValue('elevation'),
        groupAlignment: p.getValue('groupAlignment'),
        labelType: p.getValue('labelType'),
        unselectedLabelTextStyle: p.getValue('unselectedLabelTextStyle'),
        selectedLabelTextStyle: p.getValue('selectedLabelTextStyle'),
        unselectedIconTheme: p.getValue('unselectedIconTheme'),
        selectedIconTheme: p.getValue('selectedIconTheme'),
        minWidth: p.getValue('minWidth'),
        minExtendedWidth: p.getValue('minExtendedWidth'),
        useIndicator: p.getValue('useIndicator'),
        indicatorColor: p.getValue('indicatorColor'),
        indicatorShape: p.getValue('indicatorShape'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'extended', init: extended);
    mateParams.set(name: 'leading', init: leading);
    mateParams.set(name: 'trailing', init: trailing);
    mateParams.set(name: 'destinations', init: destinations);
    mateParams.set(name: 'selectedIndex', init: selectedIndex);
    mateParams.set(name: 'onDestinationSelected', init: onDestinationSelected);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'groupAlignment', init: groupAlignment);
    mateParams.set(name: 'labelType', init: labelType);
    mateParams.set(name: 'unselectedLabelTextStyle', init: unselectedLabelTextStyle);
    mateParams.set(name: 'selectedLabelTextStyle', init: selectedLabelTextStyle);
    mateParams.set(name: 'unselectedIconTheme', init: unselectedIconTheme);
    mateParams.set(name: 'selectedIconTheme', init: selectedIconTheme);
    mateParams.set(name: 'minWidth', init: minWidth);
    mateParams.set(name: 'minExtendedWidth', init: minExtendedWidth);
    mateParams.set(name: 'useIndicator', init: useIndicator);
    mateParams.set(name: 'indicatorColor', init: indicatorColor);
    mateParams.set(name: 'indicatorShape', init: indicatorShape);
  }
}

/// class NavigationRailDestination
class NavigationRailDestination$Mate extends NavigationRailDestination with Mate<NavigationRailDestination$Mate> {
  /// NavigationRailDestination NavigationRailDestination({required Widget icon, Widget? selectedIcon, Color? indicatorColor, ShapeBorder? indicatorShape, required Widget label, EdgeInsetsGeometry? padding})
  NavigationRailDestination$Mate({
    /// optionalParameters: {required Widget icon} , hasDefaultValue:false, defaultValueCode:null
    required Widget icon,

    /// optionalParameters: {Widget? selectedIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? selectedIcon,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,

    /// optionalParameters: {required Widget label} , hasDefaultValue:false, defaultValueCode:null
    required Widget label,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,
  }) : super(
          icon: icon,
          selectedIcon: selectedIcon,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          label: label,
          padding: padding,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationRailDestination$Mate(
        icon: p.getValue('icon'),
        selectedIcon: p.getValue('selectedIcon'),
        indicatorColor: p.getValue('indicatorColor'),
        indicatorShape: p.getValue('indicatorShape'),
        label: p.getValue('label'),
        padding: p.getValue('padding'),
      ),
    );
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'selectedIcon', init: selectedIcon);
    mateParams.set(name: 'indicatorColor', init: indicatorColor);
    mateParams.set(name: 'indicatorShape', init: indicatorShape);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'padding', init: padding);
  }
}
