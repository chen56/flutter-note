// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:27.178115

import 'package:flutter/src/material/tabs.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/tab_controller.dart';
import 'dart:ui';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';

/// class Tab extends StatelessWidget implements PreferredSizeWidget
class Tab$Mate extends Tab {
  /// Tab Tab({Key? key, String? text, Widget? icon, EdgeInsetsGeometry iconMargin = const EdgeInsets.only(bottom: 10.0), double? height, Widget? child})
  Tab$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {String? text}
    String? text,

    /// param: {Widget? icon}
    Widget? icon,

    /// param: {EdgeInsetsGeometry iconMargin = const EdgeInsets.only(bottom: 10.0)}
    required EdgeInsetsGeometry iconMargin,

    /// param: {double? height}
    double? height,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          text: text,
          icon: icon,
          iconMargin: iconMargin,
          height: height,
          child: child,
        ) {}
}

/// class TabBar extends StatefulWidget implements PreferredSizeWidget
class TabBar$Mate extends TabBar {
  /// TabBar TabBar({Key? key, required List<Widget> tabs, TabController? controller, bool isScrollable = false, EdgeInsetsGeometry? padding, Color? indicatorColor, bool automaticIndicatorColorAdjustment = true, double indicatorWeight = 2.0, EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero, Decoration? indicator, TabBarIndicatorSize? indicatorSize, Color? dividerColor, Color? labelColor, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Color? unselectedLabelColor, TextStyle? unselectedLabelStyle, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, bool? enableFeedback, void Function(int)? onTap, ScrollPhysics? physics, InteractiveInkFeatureFactory? splashFactory, BorderRadius? splashBorderRadius})
  TabBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<Widget> tabs}
    required List<Widget> tabs,

    /// param: {TabController? controller}
    TabController? controller,

    /// param: {bool isScrollable = false}
    required bool isScrollable,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {Color? indicatorColor}
    Color? indicatorColor,

    /// param: {bool automaticIndicatorColorAdjustment = true}
    required bool automaticIndicatorColorAdjustment,

    /// param: {double indicatorWeight = 2.0}
    required double indicatorWeight,

    /// param: {EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero}
    required EdgeInsetsGeometry indicatorPadding,

    /// param: {Decoration? indicator}
    Decoration? indicator,

    /// param: {TabBarIndicatorSize? indicatorSize}
    TabBarIndicatorSize? indicatorSize,

    /// param: {Color? dividerColor}
    Color? dividerColor,

    /// param: {Color? labelColor}
    Color? labelColor,

    /// param: {TextStyle? labelStyle}
    TextStyle? labelStyle,

    /// param: {EdgeInsetsGeometry? labelPadding}
    EdgeInsetsGeometry? labelPadding,

    /// param: {Color? unselectedLabelColor}
    Color? unselectedLabelColor,

    /// param: {TextStyle? unselectedLabelStyle}
    TextStyle? unselectedLabelStyle,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,

    /// param: {void Function(int)? onTap}
    ValueChanged<int>? onTap,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {InteractiveInkFeatureFactory? splashFactory}
    InteractiveInkFeatureFactory? splashFactory,

    /// param: {BorderRadius? splashBorderRadius}
    BorderRadius? splashBorderRadius,
  }) : super(
          key: key,
          tabs: tabs,
          controller: controller,
          isScrollable: isScrollable,
          padding: padding,
          indicatorColor: indicatorColor,
          automaticIndicatorColorAdjustment: automaticIndicatorColorAdjustment,
          indicatorWeight: indicatorWeight,
          indicatorPadding: indicatorPadding,
          indicator: indicator,
          indicatorSize: indicatorSize,
          dividerColor: dividerColor,
          labelColor: labelColor,
          labelStyle: labelStyle,
          labelPadding: labelPadding,
          unselectedLabelColor: unselectedLabelColor,
          unselectedLabelStyle: unselectedLabelStyle,
          dragStartBehavior: dragStartBehavior,
          overlayColor: overlayColor,
          mouseCursor: mouseCursor,
          enableFeedback: enableFeedback,
          onTap: onTap,
          physics: physics,
          splashFactory: splashFactory,
          splashBorderRadius: splashBorderRadius,
        ) {}
}

/// class TabBarView extends StatefulWidget
class TabBarView$Mate extends TabBarView {
  /// TabBarView TabBarView({Key? key, required List<Widget> children, TabController? controller, ScrollPhysics? physics, DragStartBehavior dragStartBehavior = DragStartBehavior.start, double viewportFraction = 1.0, Clip clipBehavior = Clip.hardEdge})
  TabBarView$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required List<Widget> children}
    required List<Widget> children,

    /// param: {TabController? controller}
    TabController? controller,

    /// param: {ScrollPhysics? physics}
    ScrollPhysics? physics,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {double viewportFraction = 1.0}
    required double viewportFraction,

    /// param: {Clip clipBehavior = Clip.hardEdge}
    required Clip clipBehavior,
  }) : super(
          key: key,
          children: children,
          controller: controller,
          physics: physics,
          dragStartBehavior: dragStartBehavior,
          viewportFraction: viewportFraction,
          clipBehavior: clipBehavior,
        ) {}
}

/// class TabPageSelectorIndicator extends StatelessWidget
class TabPageSelectorIndicator$Mate extends TabPageSelectorIndicator {
  /// TabPageSelectorIndicator TabPageSelectorIndicator({Key? key, required Color backgroundColor, required Color borderColor, required double size, BorderStyle borderStyle = BorderStyle.solid})
  TabPageSelectorIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Color backgroundColor}
    required Color backgroundColor,

    /// param: {required Color borderColor}
    required Color borderColor,

    /// param: {required double size}
    required double size,

    /// param: {BorderStyle borderStyle = BorderStyle.solid}
    required BorderStyle borderStyle,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          borderColor: borderColor,
          size: size,
          borderStyle: borderStyle,
        ) {}
}

/// class TabPageSelector extends StatelessWidget
class TabPageSelector$Mate extends TabPageSelector {
  /// TabPageSelector TabPageSelector({Key? key, TabController? controller, double indicatorSize = 12.0, Color? color, Color? selectedColor, BorderStyle? borderStyle})
  TabPageSelector$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {TabController? controller}
    TabController? controller,

    /// param: {double indicatorSize = 12.0}
    required double indicatorSize,

    /// param: {Color? color}
    Color? color,

    /// param: {Color? selectedColor}
    Color? selectedColor,

    /// param: {BorderStyle? borderStyle}
    BorderStyle? borderStyle,
  }) : super(
          key: key,
          controller: controller,
          indicatorSize: indicatorSize,
          color: color,
          selectedColor: selectedColor,
          borderStyle: borderStyle,
        ) {}
}
