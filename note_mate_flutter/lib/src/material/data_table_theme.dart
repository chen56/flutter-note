// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/data_table_theme.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class DataTableThemeData with Diagnosticable
class DataTableThemeData$Mate extends DataTableThemeData with Mate<DataTableThemeData$Mate> {
  /// DataTableThemeData DataTableThemeData({Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, double? dataRowHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, double? dividerThickness, double? checkboxHorizontalMargin})
  DataTableThemeData$Mate({
    /// param: {Decoration? decoration}
    Decoration? decoration,

    /// param: {MaterialStateProperty<Color?>? dataRowColor}
    MaterialStateProperty<Color?>? dataRowColor,

    /// param: {double? dataRowHeight}
    double? dataRowHeight,

    /// param: {TextStyle? dataTextStyle}
    TextStyle? dataTextStyle,

    /// param: {MaterialStateProperty<Color?>? headingRowColor}
    MaterialStateProperty<Color?>? headingRowColor,

    /// param: {double? headingRowHeight}
    double? headingRowHeight,

    /// param: {TextStyle? headingTextStyle}
    TextStyle? headingTextStyle,

    /// param: {double? horizontalMargin}
    double? horizontalMargin,

    /// param: {double? columnSpacing}
    double? columnSpacing,

    /// param: {double? dividerThickness}
    double? dividerThickness,

    /// param: {double? checkboxHorizontalMargin}
    double? checkboxHorizontalMargin,
  }) : super(
          decoration: decoration,
          dataRowColor: dataRowColor,
          dataRowHeight: dataRowHeight,
          dataTextStyle: dataTextStyle,
          headingRowColor: headingRowColor,
          headingRowHeight: headingRowHeight,
          headingTextStyle: headingTextStyle,
          horizontalMargin: horizontalMargin,
          columnSpacing: columnSpacing,
          dividerThickness: dividerThickness,
          checkboxHorizontalMargin: checkboxHorizontalMargin,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataTableThemeData$Mate(
        decoration: p.getValue('decoration'),
        dataRowColor: p.getValue('dataRowColor'),
        dataRowHeight: p.getValue('dataRowHeight'),
        dataTextStyle: p.getValue('dataTextStyle'),
        headingRowColor: p.getValue('headingRowColor'),
        headingRowHeight: p.getValue('headingRowHeight'),
        headingTextStyle: p.getValue('headingTextStyle'),
        horizontalMargin: p.getValue('horizontalMargin'),
        columnSpacing: p.getValue('columnSpacing'),
        dividerThickness: p.getValue('dividerThickness'),
        checkboxHorizontalMargin: p.getValue('checkboxHorizontalMargin'),
      ),
    );
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'dataRowColor', init: dataRowColor);
    mateParams.set(name: 'dataRowHeight', init: dataRowHeight);
    mateParams.set(name: 'dataTextStyle', init: dataTextStyle);
    mateParams.set(name: 'headingRowColor', init: headingRowColor);
    mateParams.set(name: 'headingRowHeight', init: headingRowHeight);
    mateParams.set(name: 'headingTextStyle', init: headingTextStyle);
    mateParams.set(name: 'horizontalMargin', init: horizontalMargin);
    mateParams.set(name: 'columnSpacing', init: columnSpacing);
    mateParams.set(name: 'dividerThickness', init: dividerThickness);
    mateParams.set(name: 'checkboxHorizontalMargin', init: checkboxHorizontalMargin);
  }
}

/// class DataTableTheme extends InheritedWidget
class DataTableTheme$Mate extends DataTableTheme with WidgetMate<DataTableTheme$Mate> {
  /// DataTableTheme DataTableTheme({Key? key, required DataTableThemeData data, required Widget child})
  DataTableTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required DataTableThemeData data}
    required DataTableThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DataTableTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
