// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/flexible_space_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:note/mate.dart';

/// class FlexibleSpaceBar extends StatefulWidget
class FlexibleSpaceBar$Mate extends FlexibleSpaceBar with WidgetMate<FlexibleSpaceBar$Mate> {
  /// FlexibleSpaceBar FlexibleSpaceBar({Key? key, Widget? title, Widget? background, bool? centerTitle, EdgeInsetsGeometry? titlePadding, CollapseMode collapseMode = CollapseMode.parallax, List<StretchMode> stretchModes = const <StretchMode>[StretchMode.zoomBackground], double expandedTitleScale = 1.5})
  FlexibleSpaceBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? background}
    Widget? background,

    /// param: {bool? centerTitle}
    bool? centerTitle,

    /// param: {EdgeInsetsGeometry? titlePadding}
    EdgeInsetsGeometry? titlePadding,

    /// param: {CollapseMode collapseMode = CollapseMode.parallax}
    required CollapseMode collapseMode,

    /// param: {List<StretchMode> stretchModes = const <StretchMode>[StretchMode.zoomBackground]}
    required List<StretchMode> stretchModes,

    /// param: {double expandedTitleScale = 1.5}
    required double expandedTitleScale,
  }) : super(
          key: key,
          title: title,
          background: background,
          centerTitle: centerTitle,
          titlePadding: titlePadding,
          collapseMode: collapseMode,
          stretchModes: stretchModes,
          expandedTitleScale: expandedTitleScale,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FlexibleSpaceBar$Mate(
        key: p.getValue('key'),
        title: p.getValue('title'),
        background: p.getValue('background'),
        centerTitle: p.getValue('centerTitle'),
        titlePadding: p.getValue('titlePadding'),
        collapseMode: p.getValue('collapseMode'),
        stretchModes: p.getValue('stretchModes'),
        expandedTitleScale: p.getValue('expandedTitleScale'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'background', init: background);
    mateParams.set(name: 'centerTitle', init: centerTitle);
    mateParams.set(name: 'titlePadding', init: titlePadding);
    mateParams.set(name: 'collapseMode', init: collapseMode);
    mateParams.set(name: 'stretchModes', init: stretchModes);
    mateParams.set(name: 'expandedTitleScale', init: expandedTitleScale);
  }
}

/// class FlexibleSpaceBarSettings extends InheritedWidget
class FlexibleSpaceBarSettings$Mate extends FlexibleSpaceBarSettings with WidgetMate<FlexibleSpaceBarSettings$Mate> {
  /// FlexibleSpaceBarSettings FlexibleSpaceBarSettings({Key? key, required double toolbarOpacity, required double minExtent, required double maxExtent, required double currentExtent, required Widget child, bool? isScrolledUnder})
  FlexibleSpaceBarSettings$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required double toolbarOpacity}
    required double toolbarOpacity,

    /// param: {required double minExtent}
    required double minExtent,

    /// param: {required double maxExtent}
    required double maxExtent,

    /// param: {required double currentExtent}
    required double currentExtent,

    /// param: {required Widget child}
    required Widget child,

    /// param: {bool? isScrolledUnder}
    bool? isScrolledUnder,
  }) : super(
          key: key,
          toolbarOpacity: toolbarOpacity,
          minExtent: minExtent,
          maxExtent: maxExtent,
          currentExtent: currentExtent,
          child: child,
          isScrolledUnder: isScrolledUnder,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FlexibleSpaceBarSettings$Mate(
        key: p.getValue('key'),
        toolbarOpacity: p.getValue('toolbarOpacity'),
        minExtent: p.getValue('minExtent'),
        maxExtent: p.getValue('maxExtent'),
        currentExtent: p.getValue('currentExtent'),
        child: p.getValue('child'),
        isScrolledUnder: p.getValue('isScrolledUnder'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'toolbarOpacity', init: toolbarOpacity);
    mateParams.set(name: 'minExtent', init: minExtent);
    mateParams.set(name: 'maxExtent', init: maxExtent);
    mateParams.set(name: 'currentExtent', init: currentExtent);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'isScrolledUnder', init: isScrolledUnder);
  }
}
