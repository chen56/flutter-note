// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/expansion_tile_theme.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ExpansionTileThemeData with Diagnosticable
class ExpansionTileThemeData$Mate extends ExpansionTileThemeData with Mate<ExpansionTileThemeData$Mate> {
  /// ExpansionTileThemeData ExpansionTileThemeData({Color? backgroundColor, Color? collapsedBackgroundColor, EdgeInsetsGeometry? tilePadding, AlignmentGeometry? expandedAlignment, EdgeInsetsGeometry? childrenPadding, Color? iconColor, Color? collapsedIconColor, Color? textColor, Color? collapsedTextColor, ShapeBorder? shape, ShapeBorder? collapsedShape, Clip? clipBehavior})
  ExpansionTileThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? collapsedBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? collapsedBackgroundColor,

    /// optionalParameters: {EdgeInsetsGeometry? tilePadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? tilePadding,

    /// optionalParameters: {AlignmentGeometry? expandedAlignment} , hasDefaultValue:false, defaultValueCode:null
    AlignmentGeometry? expandedAlignment,

    /// optionalParameters: {EdgeInsetsGeometry? childrenPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? childrenPadding,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Color? collapsedIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? collapsedIconColor,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {Color? collapsedTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? collapsedTextColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ShapeBorder? collapsedShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? collapsedShape,

    /// optionalParameters: {Clip? clipBehavior} , hasDefaultValue:false, defaultValueCode:null
    Clip? clipBehavior,
  }) : super(
          backgroundColor: backgroundColor,
          collapsedBackgroundColor: collapsedBackgroundColor,
          tilePadding: tilePadding,
          expandedAlignment: expandedAlignment,
          childrenPadding: childrenPadding,
          iconColor: iconColor,
          collapsedIconColor: collapsedIconColor,
          textColor: textColor,
          collapsedTextColor: collapsedTextColor,
          shape: shape,
          collapsedShape: collapsedShape,
          clipBehavior: clipBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExpansionTileThemeData$Mate(
        backgroundColor: p.getValue('backgroundColor'),
        collapsedBackgroundColor: p.getValue('collapsedBackgroundColor'),
        tilePadding: p.getValue('tilePadding'),
        expandedAlignment: p.getValue('expandedAlignment'),
        childrenPadding: p.getValue('childrenPadding'),
        iconColor: p.getValue('iconColor'),
        collapsedIconColor: p.getValue('collapsedIconColor'),
        textColor: p.getValue('textColor'),
        collapsedTextColor: p.getValue('collapsedTextColor'),
        shape: p.getValue('shape'),
        collapsedShape: p.getValue('collapsedShape'),
        clipBehavior: p.getValue('clipBehavior'),
      ),
    );
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'collapsedBackgroundColor', init: collapsedBackgroundColor);
    mateParams.set(name: 'tilePadding', init: tilePadding);
    mateParams.set(name: 'expandedAlignment', init: expandedAlignment);
    mateParams.set(name: 'childrenPadding', init: childrenPadding);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'collapsedIconColor', init: collapsedIconColor);
    mateParams.set(name: 'textColor', init: textColor);
    mateParams.set(name: 'collapsedTextColor', init: collapsedTextColor);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'collapsedShape', init: collapsedShape);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
  }
}

/// class ExpansionTileTheme extends InheritedTheme
class ExpansionTileTheme$Mate extends ExpansionTileTheme with WidgetMate<ExpansionTileTheme$Mate> {
  /// ExpansionTileTheme ExpansionTileTheme({Key? key, required ExpansionTileThemeData data, required Widget child})
  ExpansionTileTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ExpansionTileThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required ExpansionTileThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ExpansionTileTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
