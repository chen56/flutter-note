// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/divider.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';

/// class Divider extends StatelessWidget
class Divider$Mate extends Divider with WidgetMate<Divider$Mate> {
  /// Divider Divider({Key? key, double? height, double? thickness, double? indent, double? endIndent, Color? color})
  Divider$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {double? thickness} , hasDefaultValue:false, defaultValueCode:null
    double? thickness,

    /// optionalParameters: {double? indent} , hasDefaultValue:false, defaultValueCode:null
    double? indent,

    /// optionalParameters: {double? endIndent} , hasDefaultValue:false, defaultValueCode:null
    double? endIndent,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,
  }) : super(
          key: key,
          height: height,
          thickness: thickness,
          indent: indent,
          endIndent: endIndent,
          color: color,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Divider$Mate(
        key: p.getValue('key'),
        height: p.getValue('height'),
        thickness: p.getValue('thickness'),
        indent: p.getValue('indent'),
        endIndent: p.getValue('endIndent'),
        color: p.getValue('color'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'thickness', init: thickness);
    mateParams.set(name: 'indent', init: indent);
    mateParams.set(name: 'endIndent', init: endIndent);
    mateParams.set(name: 'color', init: color);
  }
}

/// class VerticalDivider extends StatelessWidget
class VerticalDivider$Mate extends VerticalDivider with WidgetMate<VerticalDivider$Mate> {
  /// VerticalDivider VerticalDivider({Key? key, double? width, double? thickness, double? indent, double? endIndent, Color? color})
  VerticalDivider$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? thickness} , hasDefaultValue:false, defaultValueCode:null
    double? thickness,

    /// optionalParameters: {double? indent} , hasDefaultValue:false, defaultValueCode:null
    double? indent,

    /// optionalParameters: {double? endIndent} , hasDefaultValue:false, defaultValueCode:null
    double? endIndent,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,
  }) : super(
          key: key,
          width: width,
          thickness: thickness,
          indent: indent,
          endIndent: endIndent,
          color: color,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => VerticalDivider$Mate(
        key: p.getValue('key'),
        width: p.getValue('width'),
        thickness: p.getValue('thickness'),
        indent: p.getValue('indent'),
        endIndent: p.getValue('endIndent'),
        color: p.getValue('color'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'thickness', init: thickness);
    mateParams.set(name: 'indent', init: indent);
    mateParams.set(name: 'endIndent', init: endIndent);
    mateParams.set(name: 'color', init: color);
  }
}
