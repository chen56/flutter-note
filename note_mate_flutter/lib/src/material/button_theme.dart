// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:26.807627

import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ButtonTheme extends InheritedTheme
class ButtonTheme$Mate extends ButtonTheme {
  /// ButtonTheme ButtonTheme({Key? key, ButtonTextTheme textTheme = ButtonTextTheme.normal, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize, required Widget child})
  ButtonTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {ButtonTextTheme textTheme = ButtonTextTheme.normal}
    required ButtonTextTheme textTheme,

    /// param: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded}
    required ButtonBarLayoutBehavior layoutBehavior,

    /// param: {double minWidth = 88.0}
    required double minWidth,

    /// param: {double height = 36.0}
    required double height,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {bool alignedDropdown = false}
    required bool alignedDropdown,

    /// param: {Color? buttonColor}
    Color? buttonColor,

    /// param: {Color? disabledColor}
    Color? disabledColor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {ColorScheme? colorScheme}
    ColorScheme? colorScheme,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          textTheme: textTheme,
          layoutBehavior: layoutBehavior,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
          child: child,
        ) {}

  /// ButtonTheme ButtonTheme.fromButtonThemeData({Key? key, required ButtonThemeData data, required Widget child})
  ButtonTheme$Mate.fromButtonThemeData({
    /// param: {Key? key}
    Key? key,

    /// param: {required ButtonThemeData data}
    required ButtonThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super.fromButtonThemeData(
          key: key,
          data: data,
          child: child,
        ) {}
}

/// class ButtonThemeData with Diagnosticable
class ButtonThemeData$Mate extends ButtonThemeData {
  /// ButtonThemeData ButtonThemeData({ButtonTextTheme textTheme = ButtonTextTheme.normal, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize})
  ButtonThemeData$Mate({
    /// param: {ButtonTextTheme textTheme = ButtonTextTheme.normal}
    required ButtonTextTheme textTheme,

    /// param: {double minWidth = 88.0}
    required double minWidth,

    /// param: {double height = 36.0}
    required double height,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded}
    required ButtonBarLayoutBehavior layoutBehavior,

    /// param: {bool alignedDropdown = false}
    required bool alignedDropdown,

    /// param: {Color? buttonColor}
    Color? buttonColor,

    /// param: {Color? disabledColor}
    Color? disabledColor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {Color? highlightColor}
    Color? highlightColor,

    /// param: {Color? splashColor}
    Color? splashColor,

    /// param: {ColorScheme? colorScheme}
    ColorScheme? colorScheme,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,
  }) : super(
          textTheme: textTheme,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          layoutBehavior: layoutBehavior,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
        ) {}
}
