// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/dropdown_menu.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class DropdownMenuEntry<T>
class DropdownMenuEntry$Mate<T> extends DropdownMenuEntry<T> with Mate<DropdownMenuEntry$Mate> {
  /// DropdownMenuEntry<T> DropdownMenuEntry({required T value, required String label, Widget? leadingIcon, Widget? trailingIcon, bool enabled = true, ButtonStyle? style})
  DropdownMenuEntry$Mate({
    /// optionalParameters: {required T value} , hasDefaultValue:false, defaultValueCode:null
    required T value,

    /// optionalParameters: {required String label} , hasDefaultValue:false, defaultValueCode:null
    required String label,

    /// optionalParameters: {Widget? leadingIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? leadingIcon,

    /// optionalParameters: {Widget? trailingIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailingIcon,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {ButtonStyle? style} , hasDefaultValue:false, defaultValueCode:null
    ButtonStyle? style,
  }) : super(
          value: value,
          label: label,
          leadingIcon: leadingIcon,
          trailingIcon: trailingIcon,
          enabled: enabled,
          style: style,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DropdownMenuEntry$Mate(
        value: p.getValue('value'),
        label: p.getValue('label'),
        leadingIcon: p.getValue('leadingIcon'),
        trailingIcon: p.getValue('trailingIcon'),
        enabled: p.getValue('enabled'),
        style: p.getValue('style'),
      ),
    );
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'leadingIcon', init: leadingIcon);
    mateParams.set(name: 'trailingIcon', init: trailingIcon);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'style', init: style);
  }
}

/// class DropdownMenu<T> extends StatefulWidget
class DropdownMenu$Mate<T> extends DropdownMenu<T> with WidgetMate<DropdownMenu$Mate> {
  /// DropdownMenu<T> DropdownMenu({Key? key, bool enabled = true, double? width, double? menuHeight, Widget? leadingIcon, Widget? trailingIcon, Widget? label, String? hintText, Widget? selectedTrailingIcon, bool enableFilter = false, bool enableSearch = true, TextStyle? textStyle, InputDecorationTheme? inputDecorationTheme, MenuStyle? menuStyle, TextEditingController? controller, T? initialSelection, void Function(T?)? onSelected, bool? requestFocusOnTap, required List<DropdownMenuEntry<T>> dropdownMenuEntries})
  DropdownMenu$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? menuHeight} , hasDefaultValue:false, defaultValueCode:null
    double? menuHeight,

    /// optionalParameters: {Widget? leadingIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? leadingIcon,

    /// optionalParameters: {Widget? trailingIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailingIcon,

    /// optionalParameters: {Widget? label} , hasDefaultValue:false, defaultValueCode:null
    Widget? label,

    /// optionalParameters: {String? hintText} , hasDefaultValue:false, defaultValueCode:null
    String? hintText,

    /// optionalParameters: {Widget? selectedTrailingIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? selectedTrailingIcon,

    /// optionalParameters: {bool enableFilter = false} , hasDefaultValue:true, defaultValueCode:false
    required bool enableFilter,

    /// optionalParameters: {bool enableSearch = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableSearch,

    /// optionalParameters: {TextStyle? textStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? textStyle,

    /// optionalParameters: {InputDecorationTheme? inputDecorationTheme} , hasDefaultValue:false, defaultValueCode:null
    InputDecorationTheme? inputDecorationTheme,

    /// optionalParameters: {MenuStyle? menuStyle} , hasDefaultValue:false, defaultValueCode:null
    MenuStyle? menuStyle,

    /// optionalParameters: {TextEditingController? controller} , hasDefaultValue:false, defaultValueCode:null
    TextEditingController? controller,

    /// optionalParameters: {T? initialSelection} , hasDefaultValue:false, defaultValueCode:null
    T? initialSelection,

    /// optionalParameters: {void Function(T?)? onSelected} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<T?>? onSelected,

    /// optionalParameters: {bool? requestFocusOnTap} , hasDefaultValue:false, defaultValueCode:null
    bool? requestFocusOnTap,

    /// optionalParameters: {required List<DropdownMenuEntry<T>> dropdownMenuEntries} , hasDefaultValue:false, defaultValueCode:null
    required List<DropdownMenuEntry<T>> dropdownMenuEntries,
  }) : super(
          key: key,
          enabled: enabled,
          width: width,
          menuHeight: menuHeight,
          leadingIcon: leadingIcon,
          trailingIcon: trailingIcon,
          label: label,
          hintText: hintText,
          selectedTrailingIcon: selectedTrailingIcon,
          enableFilter: enableFilter,
          enableSearch: enableSearch,
          textStyle: textStyle,
          inputDecorationTheme: inputDecorationTheme,
          menuStyle: menuStyle,
          controller: controller,
          initialSelection: initialSelection,
          onSelected: onSelected,
          requestFocusOnTap: requestFocusOnTap,
          dropdownMenuEntries: dropdownMenuEntries,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DropdownMenu$Mate(
        key: p.getValue('key'),
        enabled: p.getValue('enabled'),
        width: p.getValue('width'),
        menuHeight: p.getValue('menuHeight'),
        leadingIcon: p.getValue('leadingIcon'),
        trailingIcon: p.getValue('trailingIcon'),
        label: p.getValue('label'),
        hintText: p.getValue('hintText'),
        selectedTrailingIcon: p.getValue('selectedTrailingIcon'),
        enableFilter: p.getValue('enableFilter'),
        enableSearch: p.getValue('enableSearch'),
        textStyle: p.getValue('textStyle'),
        inputDecorationTheme: p.getValue('inputDecorationTheme'),
        menuStyle: p.getValue('menuStyle'),
        controller: p.getValue('controller'),
        initialSelection: p.getValue('initialSelection'),
        onSelected: p.getValue('onSelected'),
        requestFocusOnTap: p.getValue('requestFocusOnTap'),
        dropdownMenuEntries: p.getValue('dropdownMenuEntries'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'menuHeight', init: menuHeight);
    mateParams.set(name: 'leadingIcon', init: leadingIcon);
    mateParams.set(name: 'trailingIcon', init: trailingIcon);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'hintText', init: hintText);
    mateParams.set(name: 'selectedTrailingIcon', init: selectedTrailingIcon);
    mateParams.set(name: 'enableFilter', init: enableFilter);
    mateParams.set(name: 'enableSearch', init: enableSearch);
    mateParams.set(name: 'textStyle', init: textStyle);
    mateParams.set(name: 'inputDecorationTheme', init: inputDecorationTheme);
    mateParams.set(name: 'menuStyle', init: menuStyle);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'initialSelection', init: initialSelection);
    mateParams.set(name: 'onSelected', init: onSelected);
    mateParams.set(name: 'requestFocusOnTap', init: requestFocusOnTap);
    mateParams.set(name: 'dropdownMenuEntries', init: dropdownMenuEntries);
  }
}
