// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/dropdown.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/widgets/form.dart';

/// class DropdownMenuItem<T> extends _DropdownMenuItemContainer
class DropdownMenuItem$Mate<T> extends DropdownMenuItem<T> with WidgetMate<DropdownMenuItem$Mate> {
  /// DropdownMenuItem<T> DropdownMenuItem({Key? key, void Function()? onTap, T? value, bool enabled = true, AlignmentGeometry alignment = AlignmentDirectional.centerStart, required Widget child})
  DropdownMenuItem$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onTap,

    /// optionalParameters: {T? value} , hasDefaultValue:false, defaultValueCode:null
    T? value,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.centerStart
    required AlignmentGeometry alignment,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          onTap: onTap,
          value: value,
          enabled: enabled,
          alignment: alignment,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DropdownMenuItem$Mate(
        key: p.getValue('key'),
        onTap: p.getValue('onTap'),
        value: p.getValue('value'),
        enabled: p.getValue('enabled'),
        alignment: p.getValue('alignment'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'child', init: child);
  }
}

/// class DropdownButtonHideUnderline extends InheritedWidget
class DropdownButtonHideUnderline$Mate extends DropdownButtonHideUnderline
    with WidgetMate<DropdownButtonHideUnderline$Mate> {
  /// DropdownButtonHideUnderline DropdownButtonHideUnderline({Key? key, required Widget child})
  DropdownButtonHideUnderline$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DropdownButtonHideUnderline$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
  }
}

/// class DropdownButton<T> extends StatefulWidget
class DropdownButton$Mate<T> extends DropdownButton<T> with WidgetMate<DropdownButton$Mate> {
  /// DropdownButton<T> DropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = false, bool isExpanded = false, double? itemHeight = kMinInteractiveDimension, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius})
  DropdownButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , hasDefaultValue:false, defaultValueCode:null
    required List<DropdownMenuItem<T>>? items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , hasDefaultValue:false, defaultValueCode:null
    DropdownButtonBuilder? selectedItemBuilder,

    /// optionalParameters: {T? value} , hasDefaultValue:false, defaultValueCode:null
    T? value,

    /// optionalParameters: {Widget? hint} , hasDefaultValue:false, defaultValueCode:null
    Widget? hint,

    /// optionalParameters: {Widget? disabledHint} , hasDefaultValue:false, defaultValueCode:null
    Widget? disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<T?>? onChanged,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onTap,

    /// optionalParameters: {int elevation = 8} , hasDefaultValue:true, defaultValueCode:8
    required int elevation,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {Widget? underline} , hasDefaultValue:false, defaultValueCode:null
    Widget? underline,

    /// optionalParameters: {Widget? icon} , hasDefaultValue:false, defaultValueCode:null
    Widget? icon,

    /// optionalParameters: {Color? iconDisabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , hasDefaultValue:true, defaultValueCode:24.0
    required double iconSize,

    /// optionalParameters: {bool isDense = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isDense,

    /// optionalParameters: {bool isExpanded = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isExpanded,

    /// optionalParameters: {double? itemHeight = kMinInteractiveDimension} , hasDefaultValue:true, defaultValueCode:kMinInteractiveDimension
    double? itemHeight,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {Color? dropdownColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dropdownColor,

    /// optionalParameters: {double? menuMaxHeight} , hasDefaultValue:false, defaultValueCode:null
    double? menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.centerStart
    required AlignmentGeometry alignment,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,
  }) : super(
          key: key,
          items: items,
          selectedItemBuilder: selectedItemBuilder,
          value: value,
          hint: hint,
          disabledHint: disabledHint,
          onChanged: onChanged,
          onTap: onTap,
          elevation: elevation,
          style: style,
          underline: underline,
          icon: icon,
          iconDisabledColor: iconDisabledColor,
          iconEnabledColor: iconEnabledColor,
          iconSize: iconSize,
          isDense: isDense,
          isExpanded: isExpanded,
          itemHeight: itemHeight,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          dropdownColor: dropdownColor,
          menuMaxHeight: menuMaxHeight,
          enableFeedback: enableFeedback,
          alignment: alignment,
          borderRadius: borderRadius,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DropdownButton$Mate(
        key: p.getValue('key'),
        items: p.getValue('items'),
        selectedItemBuilder: p.getValue('selectedItemBuilder'),
        value: p.getValue('value'),
        hint: p.getValue('hint'),
        disabledHint: p.getValue('disabledHint'),
        onChanged: p.getValue('onChanged'),
        onTap: p.getValue('onTap'),
        elevation: p.getValue('elevation'),
        style: p.getValue('style'),
        underline: p.getValue('underline'),
        icon: p.getValue('icon'),
        iconDisabledColor: p.getValue('iconDisabledColor'),
        iconEnabledColor: p.getValue('iconEnabledColor'),
        iconSize: p.getValue('iconSize'),
        isDense: p.getValue('isDense'),
        isExpanded: p.getValue('isExpanded'),
        itemHeight: p.getValue('itemHeight'),
        focusColor: p.getValue('focusColor'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        dropdownColor: p.getValue('dropdownColor'),
        menuMaxHeight: p.getValue('menuMaxHeight'),
        enableFeedback: p.getValue('enableFeedback'),
        alignment: p.getValue('alignment'),
        borderRadius: p.getValue('borderRadius'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'items', init: items);
    mateParams.set(name: 'selectedItemBuilder', init: selectedItemBuilder);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'hint', init: hint);
    mateParams.set(name: 'disabledHint', init: disabledHint);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'underline', init: underline);
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'iconDisabledColor', init: iconDisabledColor);
    mateParams.set(name: 'iconEnabledColor', init: iconEnabledColor);
    mateParams.set(name: 'iconSize', init: iconSize);
    mateParams.set(name: 'isDense', init: isDense);
    mateParams.set(name: 'isExpanded', init: isExpanded);
    mateParams.set(name: 'itemHeight', init: itemHeight);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'dropdownColor', init: dropdownColor);
    mateParams.set(name: 'menuMaxHeight', init: menuMaxHeight);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'borderRadius', init: borderRadius);
  }
}

/// class DropdownButtonFormField<T> extends FormField<T>
class DropdownButtonFormField$Mate<T> extends DropdownButtonFormField<T> with WidgetMate<DropdownButtonFormField$Mate> {
  /// DropdownButtonFormField<T> DropdownButtonFormField({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = true, bool isExpanded = false, double? itemHeight, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, InputDecoration? decoration, void Function(T?)? onSaved, String? Function(T?)? validator, AutovalidateMode? autovalidateMode, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius})
  DropdownButtonFormField$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , hasDefaultValue:false, defaultValueCode:null
    required List<DropdownMenuItem<T>>? items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , hasDefaultValue:false, defaultValueCode:null
    DropdownButtonBuilder? selectedItemBuilder,

    /// optionalParameters: {T? value} , hasDefaultValue:false, defaultValueCode:null
    T? value,

    /// optionalParameters: {Widget? hint} , hasDefaultValue:false, defaultValueCode:null
    Widget? hint,

    /// optionalParameters: {Widget? disabledHint} , hasDefaultValue:false, defaultValueCode:null
    Widget? disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<T?>? onChanged,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onTap,

    /// optionalParameters: {int elevation = 8} , hasDefaultValue:true, defaultValueCode:8
    required int elevation,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {Widget? icon} , hasDefaultValue:false, defaultValueCode:null
    Widget? icon,

    /// optionalParameters: {Color? iconDisabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , hasDefaultValue:true, defaultValueCode:24.0
    required double iconSize,

    /// optionalParameters: {bool isDense = true} , hasDefaultValue:true, defaultValueCode:true
    required bool isDense,

    /// optionalParameters: {bool isExpanded = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isExpanded,

    /// optionalParameters: {double? itemHeight} , hasDefaultValue:false, defaultValueCode:null
    double? itemHeight,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {Color? dropdownColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dropdownColor,

    /// optionalParameters: {InputDecoration? decoration} , hasDefaultValue:false, defaultValueCode:null
    InputDecoration? decoration,

    /// optionalParameters: {void Function(T?)? onSaved} , hasDefaultValue:false, defaultValueCode:null
    FormFieldSetter<T>? onSaved,

    /// optionalParameters: {String? Function(T?)? validator} , hasDefaultValue:false, defaultValueCode:null
    FormFieldValidator<T>? validator,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , hasDefaultValue:false, defaultValueCode:null
    AutovalidateMode? autovalidateMode,

    /// optionalParameters: {double? menuMaxHeight} , hasDefaultValue:false, defaultValueCode:null
    double? menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.centerStart
    required AlignmentGeometry alignment,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,
  }) : super(
          key: key,
          items: items,
          selectedItemBuilder: selectedItemBuilder,
          value: value,
          hint: hint,
          disabledHint: disabledHint,
          onChanged: onChanged,
          onTap: onTap,
          elevation: elevation,
          style: style,
          icon: icon,
          iconDisabledColor: iconDisabledColor,
          iconEnabledColor: iconEnabledColor,
          iconSize: iconSize,
          isDense: isDense,
          isExpanded: isExpanded,
          itemHeight: itemHeight,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          dropdownColor: dropdownColor,
          decoration: decoration,
          onSaved: onSaved,
          validator: validator,
          autovalidateMode: autovalidateMode,
          menuMaxHeight: menuMaxHeight,
          enableFeedback: enableFeedback,
          alignment: alignment,
          borderRadius: borderRadius,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DropdownButtonFormField$Mate(
        key: p.getValue('key'),
        items: p.getValue('items'),
        selectedItemBuilder: p.getValue('selectedItemBuilder'),
        value: p.getValue('value'),
        hint: p.getValue('hint'),
        disabledHint: p.getValue('disabledHint'),
        onChanged: p.getValue('onChanged'),
        onTap: p.getValue('onTap'),
        elevation: p.getValue('elevation'),
        style: p.getValue('style'),
        icon: p.getValue('icon'),
        iconDisabledColor: p.getValue('iconDisabledColor'),
        iconEnabledColor: p.getValue('iconEnabledColor'),
        iconSize: p.getValue('iconSize'),
        isDense: p.getValue('isDense'),
        isExpanded: p.getValue('isExpanded'),
        itemHeight: p.getValue('itemHeight'),
        focusColor: p.getValue('focusColor'),
        focusNode: p.getValue('focusNode'),
        autofocus: p.getValue('autofocus'),
        dropdownColor: p.getValue('dropdownColor'),
        decoration: p.getValue('decoration'),
        onSaved: p.getValue('onSaved'),
        validator: p.getValue('validator'),
        autovalidateMode: p.getValue('autovalidateMode'),
        menuMaxHeight: p.getValue('menuMaxHeight'),
        enableFeedback: p.getValue('enableFeedback'),
        alignment: p.getValue('alignment'),
        borderRadius: p.getValue('borderRadius'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'items', init: items);
    mateParams.set(name: 'selectedItemBuilder', init: selectedItemBuilder);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'hint', init: hint);
    mateParams.set(name: 'disabledHint', init: disabledHint);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'style', init: style);
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'iconDisabledColor', init: iconDisabledColor);
    mateParams.set(name: 'iconEnabledColor', init: iconEnabledColor);
    mateParams.set(name: 'iconSize', init: iconSize);
    mateParams.set(name: 'isDense', init: isDense);
    mateParams.set(name: 'isExpanded', init: isExpanded);
    mateParams.set(name: 'itemHeight', init: itemHeight);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'dropdownColor', init: dropdownColor);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'onSaved', init: onSaved);
    mateParams.set(name: 'validator', init: validator);
    mateParams.set(name: 'autovalidateMode', init: autovalidateMode);
    mateParams.set(name: 'menuMaxHeight', init: menuMaxHeight);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'borderRadius', init: borderRadius);
  }
}
