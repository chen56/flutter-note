// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/painting/border_radius.dart';

/// class NavigationBar extends StatelessWidget
class NavigationBar$Mate extends NavigationBar with WidgetMate<NavigationBar$Mate> {
  /// NavigationBar NavigationBar({Key? key, Duration? animationDuration, int selectedIndex = 0, required List<Widget> destinations, void Function(int)? onDestinationSelected, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, Color? indicatorColor, ShapeBorder? indicatorShape, double? height, NavigationDestinationLabelBehavior? labelBehavior})
  NavigationBar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Duration? animationDuration}
    Duration? animationDuration,

    /// param: {int selectedIndex = 0}
    required int selectedIndex,

    /// param: {required List<Widget> destinations}
    required List<Widget> destinations,

    /// param: {void Function(int)? onDestinationSelected}
    ValueChanged<int>? onDestinationSelected,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {Color? indicatorColor}
    Color? indicatorColor,

    /// param: {ShapeBorder? indicatorShape}
    ShapeBorder? indicatorShape,

    /// param: {double? height}
    double? height,

    /// param: {NavigationDestinationLabelBehavior? labelBehavior}
    NavigationDestinationLabelBehavior? labelBehavior,
  }) : super(
          key: key,
          animationDuration: animationDuration,
          selectedIndex: selectedIndex,
          destinations: destinations,
          onDestinationSelected: onDestinationSelected,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          height: height,
          labelBehavior: labelBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationBar$Mate(
        key: p.getValue('key'),
        animationDuration: p.getValue('animationDuration'),
        selectedIndex: p.getValue('selectedIndex'),
        destinations: p.getValue('destinations'),
        onDestinationSelected: p.getValue('onDestinationSelected'),
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        indicatorColor: p.getValue('indicatorColor'),
        indicatorShape: p.getValue('indicatorShape'),
        height: p.getValue('height'),
        labelBehavior: p.getValue('labelBehavior'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'animationDuration', init: animationDuration);
    mateParams.set(name: 'selectedIndex', init: selectedIndex);
    mateParams.set(name: 'destinations', init: destinations);
    mateParams.set(name: 'onDestinationSelected', init: onDestinationSelected);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'indicatorColor', init: indicatorColor);
    mateParams.set(name: 'indicatorShape', init: indicatorShape);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'labelBehavior', init: labelBehavior);
  }
}

/// class NavigationDestination extends StatelessWidget
class NavigationDestination$Mate extends NavigationDestination with WidgetMate<NavigationDestination$Mate> {
  /// NavigationDestination NavigationDestination({Key? key, required Widget icon, Widget? selectedIcon, required String label, String? tooltip})
  NavigationDestination$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget icon}
    required Widget icon,

    /// param: {Widget? selectedIcon}
    Widget? selectedIcon,

    /// param: {required String label}
    required String label,

    /// param: {String? tooltip}
    String? tooltip,
  }) : super(
          key: key,
          icon: icon,
          selectedIcon: selectedIcon,
          label: label,
          tooltip: tooltip,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationDestination$Mate(
        key: p.getValue('key'),
        icon: p.getValue('icon'),
        selectedIcon: p.getValue('selectedIcon'),
        label: p.getValue('label'),
        tooltip: p.getValue('tooltip'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'selectedIcon', init: selectedIcon);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'tooltip', init: tooltip);
  }
}

/// class NavigationIndicator extends StatelessWidget
class NavigationIndicator$Mate extends NavigationIndicator with WidgetMate<NavigationIndicator$Mate> {
  /// NavigationIndicator NavigationIndicator({Key? key, required Animation<double> animation, Color? color, double width = _kIndicatorWidth, double height = _kIndicatorHeight, BorderRadius borderRadius = const BorderRadius.all(Radius.circular(16)), ShapeBorder? shape})
  NavigationIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Animation<double> animation}
    required Animation<double> animation,

    /// param: {Color? color}
    Color? color,

    /// param: {double width = _kIndicatorWidth}
    required double width,

    /// param: {double height = _kIndicatorHeight}
    required double height,

    /// param: {BorderRadius borderRadius = const BorderRadius.all(Radius.circular(16))}
    required BorderRadius borderRadius,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,
  }) : super(
          key: key,
          animation: animation,
          color: color,
          width: width,
          height: height,
          borderRadius: borderRadius,
          shape: shape,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => NavigationIndicator$Mate(
        key: p.getValue('key'),
        animation: p.getValue('animation'),
        color: p.getValue('color'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        borderRadius: p.getValue('borderRadius'),
        shape: p.getValue('shape'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'animation', init: animation);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'borderRadius', init: borderRadius);
    mateParams.set(name: 'shape', init: shape);
  }
}
