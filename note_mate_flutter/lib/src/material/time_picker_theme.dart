// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/time_picker_theme.dart';
import 'dart:ui';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:core';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class TimePickerThemeData with Diagnosticable
class TimePickerThemeData$Mate extends TimePickerThemeData with Mate<TimePickerThemeData$Mate> {
  /// TimePickerThemeData TimePickerThemeData({Color? backgroundColor, ButtonStyle? cancelButtonStyle, ButtonStyle? confirmButtonStyle, BorderSide? dayPeriodBorderSide, Color? dayPeriodColor, OutlinedBorder? dayPeriodShape, Color? dayPeriodTextColor, TextStyle? dayPeriodTextStyle, Color? dialBackgroundColor, Color? dialHandColor, Color? dialTextColor, TextStyle? dialTextStyle, double? elevation, Color? entryModeIconColor, TextStyle? helpTextStyle, Color? hourMinuteColor, ShapeBorder? hourMinuteShape, Color? hourMinuteTextColor, TextStyle? hourMinuteTextStyle, InputDecorationTheme? inputDecorationTheme, EdgeInsetsGeometry? padding, ShapeBorder? shape})
  TimePickerThemeData$Mate({
    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {ButtonStyle? cancelButtonStyle}
    ButtonStyle? cancelButtonStyle,

    /// param: {ButtonStyle? confirmButtonStyle}
    ButtonStyle? confirmButtonStyle,

    /// param: {BorderSide? dayPeriodBorderSide}
    BorderSide? dayPeriodBorderSide,

    /// param: {Color? dayPeriodColor}
    Color? dayPeriodColor,

    /// param: {OutlinedBorder? dayPeriodShape}
    OutlinedBorder? dayPeriodShape,

    /// param: {Color? dayPeriodTextColor}
    Color? dayPeriodTextColor,

    /// param: {TextStyle? dayPeriodTextStyle}
    TextStyle? dayPeriodTextStyle,

    /// param: {Color? dialBackgroundColor}
    Color? dialBackgroundColor,

    /// param: {Color? dialHandColor}
    Color? dialHandColor,

    /// param: {Color? dialTextColor}
    Color? dialTextColor,

    /// param: {TextStyle? dialTextStyle}
    TextStyle? dialTextStyle,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? entryModeIconColor}
    Color? entryModeIconColor,

    /// param: {TextStyle? helpTextStyle}
    TextStyle? helpTextStyle,

    /// param: {Color? hourMinuteColor}
    Color? hourMinuteColor,

    /// param: {ShapeBorder? hourMinuteShape}
    ShapeBorder? hourMinuteShape,

    /// param: {Color? hourMinuteTextColor}
    Color? hourMinuteTextColor,

    /// param: {TextStyle? hourMinuteTextStyle}
    TextStyle? hourMinuteTextStyle,

    /// param: {InputDecorationTheme? inputDecorationTheme}
    InputDecorationTheme? inputDecorationTheme,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,
  }) : super(
          backgroundColor: backgroundColor,
          cancelButtonStyle: cancelButtonStyle,
          confirmButtonStyle: confirmButtonStyle,
          dayPeriodBorderSide: dayPeriodBorderSide,
          dayPeriodColor: dayPeriodColor,
          dayPeriodShape: dayPeriodShape,
          dayPeriodTextColor: dayPeriodTextColor,
          dayPeriodTextStyle: dayPeriodTextStyle,
          dialBackgroundColor: dialBackgroundColor,
          dialHandColor: dialHandColor,
          dialTextColor: dialTextColor,
          dialTextStyle: dialTextStyle,
          elevation: elevation,
          entryModeIconColor: entryModeIconColor,
          helpTextStyle: helpTextStyle,
          hourMinuteColor: hourMinuteColor,
          hourMinuteShape: hourMinuteShape,
          hourMinuteTextColor: hourMinuteTextColor,
          hourMinuteTextStyle: hourMinuteTextStyle,
          inputDecorationTheme: inputDecorationTheme,
          padding: padding,
          shape: shape,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TimePickerThemeData$Mate(
        backgroundColor: p.getValue('backgroundColor'),
        cancelButtonStyle: p.getValue('cancelButtonStyle'),
        confirmButtonStyle: p.getValue('confirmButtonStyle'),
        dayPeriodBorderSide: p.getValue('dayPeriodBorderSide'),
        dayPeriodColor: p.getValue('dayPeriodColor'),
        dayPeriodShape: p.getValue('dayPeriodShape'),
        dayPeriodTextColor: p.getValue('dayPeriodTextColor'),
        dayPeriodTextStyle: p.getValue('dayPeriodTextStyle'),
        dialBackgroundColor: p.getValue('dialBackgroundColor'),
        dialHandColor: p.getValue('dialHandColor'),
        dialTextColor: p.getValue('dialTextColor'),
        dialTextStyle: p.getValue('dialTextStyle'),
        elevation: p.getValue('elevation'),
        entryModeIconColor: p.getValue('entryModeIconColor'),
        helpTextStyle: p.getValue('helpTextStyle'),
        hourMinuteColor: p.getValue('hourMinuteColor'),
        hourMinuteShape: p.getValue('hourMinuteShape'),
        hourMinuteTextColor: p.getValue('hourMinuteTextColor'),
        hourMinuteTextStyle: p.getValue('hourMinuteTextStyle'),
        inputDecorationTheme: p.getValue('inputDecorationTheme'),
        padding: p.getValue('padding'),
        shape: p.getValue('shape'),
      ),
    );
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'cancelButtonStyle', init: cancelButtonStyle);
    mateParams.set(name: 'confirmButtonStyle', init: confirmButtonStyle);
    mateParams.set(name: 'dayPeriodBorderSide', init: dayPeriodBorderSide);
    mateParams.set(name: 'dayPeriodColor', init: dayPeriodColor);
    mateParams.set(name: 'dayPeriodShape', init: dayPeriodShape);
    mateParams.set(name: 'dayPeriodTextColor', init: dayPeriodTextColor);
    mateParams.set(name: 'dayPeriodTextStyle', init: dayPeriodTextStyle);
    mateParams.set(name: 'dialBackgroundColor', init: dialBackgroundColor);
    mateParams.set(name: 'dialHandColor', init: dialHandColor);
    mateParams.set(name: 'dialTextColor', init: dialTextColor);
    mateParams.set(name: 'dialTextStyle', init: dialTextStyle);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'entryModeIconColor', init: entryModeIconColor);
    mateParams.set(name: 'helpTextStyle', init: helpTextStyle);
    mateParams.set(name: 'hourMinuteColor', init: hourMinuteColor);
    mateParams.set(name: 'hourMinuteShape', init: hourMinuteShape);
    mateParams.set(name: 'hourMinuteTextColor', init: hourMinuteTextColor);
    mateParams.set(name: 'hourMinuteTextStyle', init: hourMinuteTextStyle);
    mateParams.set(name: 'inputDecorationTheme', init: inputDecorationTheme);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'shape', init: shape);
  }
}

/// class TimePickerTheme extends InheritedTheme
class TimePickerTheme$Mate extends TimePickerTheme with WidgetMate<TimePickerTheme$Mate> {
  /// TimePickerTheme TimePickerTheme({Key? key, required TimePickerThemeData data, required Widget child})
  TimePickerTheme$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required TimePickerThemeData data}
    required TimePickerThemeData data,

    /// param: {required Widget child}
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => TimePickerTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
