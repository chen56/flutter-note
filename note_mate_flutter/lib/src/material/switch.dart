// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:27.157909

import 'package:flutter/src/material/switch.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/painting/image_stream.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/icon.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class Switch extends StatelessWidget
class Switch$Mate extends Switch {
  /// Switch Switch({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, MaterialTapTargetSize? materialTapTargetSize, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false})
  Switch$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool value}
    required bool value,

    /// param: {required void Function(bool)? onChanged}
    required ValueChanged<bool>? onChanged,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,

    /// param: {void Function(Object, StackTrace?)? onActiveThumbImageError}
    ImageErrorListener? onActiveThumbImageError,

    /// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,

    /// param: {void Function(Object, StackTrace?)? onInactiveThumbImageError}
    ImageErrorListener? onInactiveThumbImageError,

    /// param: {MaterialStateProperty<Color?>? thumbColor}
    MaterialStateProperty<Color?>? thumbColor,

    /// param: {MaterialStateProperty<Color?>? trackColor}
    MaterialStateProperty<Color?>? trackColor,

    /// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,

    /// param: {MaterialStateProperty<Icon?>? thumbIcon}
    MaterialStateProperty<Icon?>? thumbIcon,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {double? splashRadius}
    double? splashRadius,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool autofocus = false}
    required bool autofocus,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          onActiveThumbImageError: onActiveThumbImageError,
          inactiveThumbImage: inactiveThumbImage,
          onInactiveThumbImageError: onInactiveThumbImageError,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          thumbIcon: thumbIcon,
          materialTapTargetSize: materialTapTargetSize,
          dragStartBehavior: dragStartBehavior,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
        ) {}

  /// Switch Switch.adaptive({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialTapTargetSize? materialTapTargetSize, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false, bool? applyCupertinoTheme})
  Switch$Mate.adaptive({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool value}
    required bool value,

    /// param: {required void Function(bool)? onChanged}
    required ValueChanged<bool>? onChanged,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? activeTrackColor}
    Color? activeTrackColor,

    /// param: {Color? inactiveThumbColor}
    Color? inactiveThumbColor,

    /// param: {Color? inactiveTrackColor}
    Color? inactiveTrackColor,

    /// param: {ImageProvider<Object>? activeThumbImage}
    ImageProvider<Object>? activeThumbImage,

    /// param: {void Function(Object, StackTrace?)? onActiveThumbImageError}
    ImageErrorListener? onActiveThumbImageError,

    /// param: {ImageProvider<Object>? inactiveThumbImage}
    ImageProvider<Object>? inactiveThumbImage,

    /// param: {void Function(Object, StackTrace?)? onInactiveThumbImageError}
    ImageErrorListener? onInactiveThumbImageError,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {MaterialStateProperty<Color?>? thumbColor}
    MaterialStateProperty<Color?>? thumbColor,

    /// param: {MaterialStateProperty<Color?>? trackColor}
    MaterialStateProperty<Color?>? trackColor,

    /// param: {MaterialStateProperty<Color?>? trackOutlineColor}
    MaterialStateProperty<Color?>? trackOutlineColor,

    /// param: {MaterialStateProperty<Icon?>? thumbIcon}
    MaterialStateProperty<Icon?>? thumbIcon,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {Color? focusColor}
    Color? focusColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {double? splashRadius}
    double? splashRadius,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {bool? applyCupertinoTheme}
    bool? applyCupertinoTheme,
  }) : super.adaptive(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          onActiveThumbImageError: onActiveThumbImageError,
          inactiveThumbImage: inactiveThumbImage,
          onInactiveThumbImageError: onInactiveThumbImageError,
          materialTapTargetSize: materialTapTargetSize,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          thumbIcon: thumbIcon,
          dragStartBehavior: dragStartBehavior,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          applyCupertinoTheme: applyCupertinoTheme,
        ) {}
}
