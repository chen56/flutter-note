// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scrollbar.dart';
import 'package:note/mate.dart';

/// class Scrollbar extends StatelessWidget
class Scrollbar$Mate extends Scrollbar with WidgetMate<Scrollbar$Mate> {
  /// Scrollbar Scrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, bool? trackVisibility, double? thickness, Radius? radius, bool Function(ScrollNotification)? notificationPredicate, bool? interactive, ScrollbarOrientation? scrollbarOrientation, bool? isAlwaysShown, bool? showTrackOnHover, double? hoverThickness})
  Scrollbar$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required Widget child}
    required Widget child,

    /// param: {ScrollController? controller}
    ScrollController? controller,

    /// param: {bool? thumbVisibility}
    bool? thumbVisibility,

    /// param: {bool? trackVisibility}
    bool? trackVisibility,

    /// param: {double? thickness}
    double? thickness,

    /// param: {Radius? radius}
    Radius? radius,

    /// param: {bool Function(ScrollNotification)? notificationPredicate}
    ScrollNotificationPredicate? notificationPredicate,

    /// param: {bool? interactive}
    bool? interactive,

    /// param: {ScrollbarOrientation? scrollbarOrientation}
    ScrollbarOrientation? scrollbarOrientation,

    /// param: {bool? isAlwaysShown}
    bool? isAlwaysShown,

    /// param: {bool? showTrackOnHover}
    bool? showTrackOnHover,

    /// param: {double? hoverThickness}
    double? hoverThickness,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          trackVisibility: trackVisibility,
          thickness: thickness,
          radius: radius,
          notificationPredicate: notificationPredicate,
          interactive: interactive,
          scrollbarOrientation: scrollbarOrientation,
          isAlwaysShown: isAlwaysShown,
          showTrackOnHover: showTrackOnHover,
          hoverThickness: hoverThickness,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Scrollbar$Mate(
        key: p.getValue('key'),
        child: p.getValue('child'),
        controller: p.getValue('controller'),
        thumbVisibility: p.getValue('thumbVisibility'),
        trackVisibility: p.getValue('trackVisibility'),
        thickness: p.getValue('thickness'),
        radius: p.getValue('radius'),
        notificationPredicate: p.getValue('notificationPredicate'),
        interactive: p.getValue('interactive'),
        scrollbarOrientation: p.getValue('scrollbarOrientation'),
        isAlwaysShown: p.getValue('isAlwaysShown'),
        showTrackOnHover: p.getValue('showTrackOnHover'),
        hoverThickness: p.getValue('hoverThickness'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'child', init: child);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'thumbVisibility', init: thumbVisibility);
    mateParams.set(name: 'trackVisibility', init: trackVisibility);
    mateParams.set(name: 'thickness', init: thickness);
    mateParams.set(name: 'radius', init: radius);
    mateParams.set(name: 'notificationPredicate', init: notificationPredicate);
    mateParams.set(name: 'interactive', init: interactive);
    mateParams.set(name: 'scrollbarOrientation', init: scrollbarOrientation);
    mateParams.set(name: 'isAlwaysShown', init: isAlwaysShown);
    mateParams.set(name: 'showTrackOnHover', init: showTrackOnHover);
    mateParams.set(name: 'hoverThickness', init: hoverThickness);
  }
}
