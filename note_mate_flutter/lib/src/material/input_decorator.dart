// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/src/painting/borders.dart';

/// class InputDecorator extends StatefulWidget
class InputDecorator$Mate extends InputDecorator with WidgetMate<InputDecorator$Mate> {
  /// InputDecorator InputDecorator({Key? key, required InputDecoration decoration, TextStyle? baseStyle, TextAlign? textAlign, TextAlignVertical? textAlignVertical, bool isFocused = false, bool isHovering = false, bool expands = false, bool isEmpty = false, Widget? child})
  InputDecorator$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required InputDecoration decoration} , hasDefaultValue:false, defaultValueCode:null
    required InputDecoration decoration,

    /// optionalParameters: {TextStyle? baseStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? baseStyle,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , hasDefaultValue:false, defaultValueCode:null
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {bool isFocused = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isFocused,

    /// optionalParameters: {bool isHovering = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isHovering,

    /// optionalParameters: {bool expands = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expands,

    /// optionalParameters: {bool isEmpty = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isEmpty,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          decoration: decoration,
          baseStyle: baseStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          isFocused: isFocused,
          isHovering: isHovering,
          expands: expands,
          isEmpty: isEmpty,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InputDecorator$Mate(
        key: p.getValue('key'),
        decoration: p.getValue('decoration'),
        baseStyle: p.getValue('baseStyle'),
        textAlign: p.getValue('textAlign'),
        textAlignVertical: p.getValue('textAlignVertical'),
        isFocused: p.getValue('isFocused'),
        isHovering: p.getValue('isHovering'),
        expands: p.getValue('expands'),
        isEmpty: p.getValue('isEmpty'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'baseStyle', init: baseStyle);
    mateParams.set(name: 'textAlign', init: textAlign);
    mateParams.set(name: 'textAlignVertical', init: textAlignVertical);
    mateParams.set(name: 'isFocused', init: isFocused);
    mateParams.set(name: 'isHovering', init: isHovering);
    mateParams.set(name: 'expands', init: expands);
    mateParams.set(name: 'isEmpty', init: isEmpty);
    mateParams.set(name: 'child', init: child);
  }
}

/// class InputDecoration
class InputDecoration$Mate extends InputDecoration with Mate<InputDecoration$Mate> {
  /// InputDecoration InputDecoration({Widget? icon, Color? iconColor, Widget? label, String? labelText, TextStyle? labelStyle, TextStyle? floatingLabelStyle, String? helperText, TextStyle? helperStyle, int? helperMaxLines, String? hintText, TextStyle? hintStyle, TextDirection? hintTextDirection, int? hintMaxLines, String? errorText, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, bool isCollapsed = false, bool? isDense, EdgeInsetsGeometry? contentPadding, Widget? prefixIcon, BoxConstraints? prefixIconConstraints, Widget? prefix, String? prefixText, TextStyle? prefixStyle, Color? prefixIconColor, Widget? suffixIcon, Widget? suffix, String? suffixText, TextStyle? suffixStyle, Color? suffixIconColor, BoxConstraints? suffixIconConstraints, Widget? counter, String? counterText, TextStyle? counterStyle, bool? filled, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool enabled = true, String? semanticCounterText, bool? alignLabelWithHint, BoxConstraints? constraints})
  InputDecoration$Mate({
    /// optionalParameters: {Widget? icon} , hasDefaultValue:false, defaultValueCode:null
    Widget? icon,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Widget? label} , hasDefaultValue:false, defaultValueCode:null
    Widget? label,

    /// optionalParameters: {String? labelText} , hasDefaultValue:false, defaultValueCode:null
    String? labelText,

    /// optionalParameters: {TextStyle? labelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? labelStyle,

    /// optionalParameters: {TextStyle? floatingLabelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? floatingLabelStyle,

    /// optionalParameters: {String? helperText} , hasDefaultValue:false, defaultValueCode:null
    String? helperText,

    /// optionalParameters: {TextStyle? helperStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? helperStyle,

    /// optionalParameters: {int? helperMaxLines} , hasDefaultValue:false, defaultValueCode:null
    int? helperMaxLines,

    /// optionalParameters: {String? hintText} , hasDefaultValue:false, defaultValueCode:null
    String? hintText,

    /// optionalParameters: {TextStyle? hintStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? hintStyle,

    /// optionalParameters: {TextDirection? hintTextDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? hintTextDirection,

    /// optionalParameters: {int? hintMaxLines} , hasDefaultValue:false, defaultValueCode:null
    int? hintMaxLines,

    /// optionalParameters: {String? errorText} , hasDefaultValue:false, defaultValueCode:null
    String? errorText,

    /// optionalParameters: {TextStyle? errorStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? errorStyle,

    /// optionalParameters: {int? errorMaxLines} , hasDefaultValue:false, defaultValueCode:null
    int? errorMaxLines,

    /// optionalParameters: {FloatingLabelBehavior? floatingLabelBehavior} , hasDefaultValue:false, defaultValueCode:null
    FloatingLabelBehavior? floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment? floatingLabelAlignment} , hasDefaultValue:false, defaultValueCode:null
    FloatingLabelAlignment? floatingLabelAlignment,

    /// optionalParameters: {bool isCollapsed = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isCollapsed,

    /// optionalParameters: {bool? isDense} , hasDefaultValue:false, defaultValueCode:null
    bool? isDense,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {Widget? prefixIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? prefixIcon,

    /// optionalParameters: {BoxConstraints? prefixIconConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? prefixIconConstraints,

    /// optionalParameters: {Widget? prefix} , hasDefaultValue:false, defaultValueCode:null
    Widget? prefix,

    /// optionalParameters: {String? prefixText} , hasDefaultValue:false, defaultValueCode:null
    String? prefixText,

    /// optionalParameters: {TextStyle? prefixStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? prefixStyle,

    /// optionalParameters: {Color? prefixIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? prefixIconColor,

    /// optionalParameters: {Widget? suffixIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? suffixIcon,

    /// optionalParameters: {Widget? suffix} , hasDefaultValue:false, defaultValueCode:null
    Widget? suffix,

    /// optionalParameters: {String? suffixText} , hasDefaultValue:false, defaultValueCode:null
    String? suffixText,

    /// optionalParameters: {TextStyle? suffixStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? suffixStyle,

    /// optionalParameters: {Color? suffixIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? suffixIconColor,

    /// optionalParameters: {BoxConstraints? suffixIconConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? suffixIconConstraints,

    /// optionalParameters: {Widget? counter} , hasDefaultValue:false, defaultValueCode:null
    Widget? counter,

    /// optionalParameters: {String? counterText} , hasDefaultValue:false, defaultValueCode:null
    String? counterText,

    /// optionalParameters: {TextStyle? counterStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? counterStyle,

    /// optionalParameters: {bool? filled} , hasDefaultValue:false, defaultValueCode:null
    bool? filled,

    /// optionalParameters: {Color? fillColor} , hasDefaultValue:false, defaultValueCode:null
    Color? fillColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {InputBorder? errorBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? errorBorder,

    /// optionalParameters: {InputBorder? focusedBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? focusedBorder,

    /// optionalParameters: {InputBorder? focusedErrorBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? focusedErrorBorder,

    /// optionalParameters: {InputBorder? disabledBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? disabledBorder,

    /// optionalParameters: {InputBorder? enabledBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? enabledBorder,

    /// optionalParameters: {InputBorder? border} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? border,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {String? semanticCounterText} , hasDefaultValue:false, defaultValueCode:null
    String? semanticCounterText,

    /// optionalParameters: {bool? alignLabelWithHint} , hasDefaultValue:false, defaultValueCode:null
    bool? alignLabelWithHint,

    /// optionalParameters: {BoxConstraints? constraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? constraints,
  }) : super(
          icon: icon,
          iconColor: iconColor,
          label: label,
          labelText: labelText,
          labelStyle: labelStyle,
          floatingLabelStyle: floatingLabelStyle,
          helperText: helperText,
          helperStyle: helperStyle,
          helperMaxLines: helperMaxLines,
          hintText: hintText,
          hintStyle: hintStyle,
          hintTextDirection: hintTextDirection,
          hintMaxLines: hintMaxLines,
          errorText: errorText,
          errorStyle: errorStyle,
          errorMaxLines: errorMaxLines,
          floatingLabelBehavior: floatingLabelBehavior,
          floatingLabelAlignment: floatingLabelAlignment,
          isCollapsed: isCollapsed,
          isDense: isDense,
          contentPadding: contentPadding,
          prefixIcon: prefixIcon,
          prefixIconConstraints: prefixIconConstraints,
          prefix: prefix,
          prefixText: prefixText,
          prefixStyle: prefixStyle,
          prefixIconColor: prefixIconColor,
          suffixIcon: suffixIcon,
          suffix: suffix,
          suffixText: suffixText,
          suffixStyle: suffixStyle,
          suffixIconColor: suffixIconColor,
          suffixIconConstraints: suffixIconConstraints,
          counter: counter,
          counterText: counterText,
          counterStyle: counterStyle,
          filled: filled,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          errorBorder: errorBorder,
          focusedBorder: focusedBorder,
          focusedErrorBorder: focusedErrorBorder,
          disabledBorder: disabledBorder,
          enabledBorder: enabledBorder,
          border: border,
          enabled: enabled,
          semanticCounterText: semanticCounterText,
          alignLabelWithHint: alignLabelWithHint,
          constraints: constraints,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InputDecoration$Mate(
        icon: p.getValue('icon'),
        iconColor: p.getValue('iconColor'),
        label: p.getValue('label'),
        labelText: p.getValue('labelText'),
        labelStyle: p.getValue('labelStyle'),
        floatingLabelStyle: p.getValue('floatingLabelStyle'),
        helperText: p.getValue('helperText'),
        helperStyle: p.getValue('helperStyle'),
        helperMaxLines: p.getValue('helperMaxLines'),
        hintText: p.getValue('hintText'),
        hintStyle: p.getValue('hintStyle'),
        hintTextDirection: p.getValue('hintTextDirection'),
        hintMaxLines: p.getValue('hintMaxLines'),
        errorText: p.getValue('errorText'),
        errorStyle: p.getValue('errorStyle'),
        errorMaxLines: p.getValue('errorMaxLines'),
        floatingLabelBehavior: p.getValue('floatingLabelBehavior'),
        floatingLabelAlignment: p.getValue('floatingLabelAlignment'),
        isCollapsed: p.getValue('isCollapsed'),
        isDense: p.getValue('isDense'),
        contentPadding: p.getValue('contentPadding'),
        prefixIcon: p.getValue('prefixIcon'),
        prefixIconConstraints: p.getValue('prefixIconConstraints'),
        prefix: p.getValue('prefix'),
        prefixText: p.getValue('prefixText'),
        prefixStyle: p.getValue('prefixStyle'),
        prefixIconColor: p.getValue('prefixIconColor'),
        suffixIcon: p.getValue('suffixIcon'),
        suffix: p.getValue('suffix'),
        suffixText: p.getValue('suffixText'),
        suffixStyle: p.getValue('suffixStyle'),
        suffixIconColor: p.getValue('suffixIconColor'),
        suffixIconConstraints: p.getValue('suffixIconConstraints'),
        counter: p.getValue('counter'),
        counterText: p.getValue('counterText'),
        counterStyle: p.getValue('counterStyle'),
        filled: p.getValue('filled'),
        fillColor: p.getValue('fillColor'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        errorBorder: p.getValue('errorBorder'),
        focusedBorder: p.getValue('focusedBorder'),
        focusedErrorBorder: p.getValue('focusedErrorBorder'),
        disabledBorder: p.getValue('disabledBorder'),
        enabledBorder: p.getValue('enabledBorder'),
        border: p.getValue('border'),
        enabled: p.getValue('enabled'),
        semanticCounterText: p.getValue('semanticCounterText'),
        alignLabelWithHint: p.getValue('alignLabelWithHint'),
        constraints: p.getValue('constraints'),
      ),
    );
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'labelText', init: labelText);
    mateParams.set(name: 'labelStyle', init: labelStyle);
    mateParams.set(name: 'floatingLabelStyle', init: floatingLabelStyle);
    mateParams.set(name: 'helperText', init: helperText);
    mateParams.set(name: 'helperStyle', init: helperStyle);
    mateParams.set(name: 'helperMaxLines', init: helperMaxLines);
    mateParams.set(name: 'hintText', init: hintText);
    mateParams.set(name: 'hintStyle', init: hintStyle);
    mateParams.set(name: 'hintTextDirection', init: hintTextDirection);
    mateParams.set(name: 'hintMaxLines', init: hintMaxLines);
    mateParams.set(name: 'errorText', init: errorText);
    mateParams.set(name: 'errorStyle', init: errorStyle);
    mateParams.set(name: 'errorMaxLines', init: errorMaxLines);
    mateParams.set(name: 'floatingLabelBehavior', init: floatingLabelBehavior);
    mateParams.set(name: 'floatingLabelAlignment', init: floatingLabelAlignment);
    mateParams.set(name: 'isCollapsed', init: isCollapsed);
    mateParams.set(name: 'isDense', init: isDense);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'prefixIcon', init: prefixIcon);
    mateParams.set(name: 'prefixIconConstraints', init: prefixIconConstraints);
    mateParams.set(name: 'prefix', init: prefix);
    mateParams.set(name: 'prefixText', init: prefixText);
    mateParams.set(name: 'prefixStyle', init: prefixStyle);
    mateParams.set(name: 'prefixIconColor', init: prefixIconColor);
    mateParams.set(name: 'suffixIcon', init: suffixIcon);
    mateParams.set(name: 'suffix', init: suffix);
    mateParams.set(name: 'suffixText', init: suffixText);
    mateParams.set(name: 'suffixStyle', init: suffixStyle);
    mateParams.set(name: 'suffixIconColor', init: suffixIconColor);
    mateParams.set(name: 'suffixIconConstraints', init: suffixIconConstraints);
    mateParams.set(name: 'counter', init: counter);
    mateParams.set(name: 'counterText', init: counterText);
    mateParams.set(name: 'counterStyle', init: counterStyle);
    mateParams.set(name: 'filled', init: filled);
    mateParams.set(name: 'fillColor', init: fillColor);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'errorBorder', init: errorBorder);
    mateParams.set(name: 'focusedBorder', init: focusedBorder);
    mateParams.set(name: 'focusedErrorBorder', init: focusedErrorBorder);
    mateParams.set(name: 'disabledBorder', init: disabledBorder);
    mateParams.set(name: 'enabledBorder', init: enabledBorder);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'semanticCounterText', init: semanticCounterText);
    mateParams.set(name: 'alignLabelWithHint', init: alignLabelWithHint);
    mateParams.set(name: 'constraints', init: constraints);
  }

  /// InputDecoration InputDecoration.collapsed({required String? hintText, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, TextStyle? hintStyle, TextDirection? hintTextDirection, bool? filled = false, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? border = InputBorder.none, bool enabled = true})
  InputDecoration$Mate.collapsed({
    /// optionalParameters: {required String? hintText} , hasDefaultValue:false, defaultValueCode:null
    required String? hintText,

    /// optionalParameters: {FloatingLabelBehavior? floatingLabelBehavior} , hasDefaultValue:false, defaultValueCode:null
    FloatingLabelBehavior? floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment? floatingLabelAlignment} , hasDefaultValue:false, defaultValueCode:null
    FloatingLabelAlignment? floatingLabelAlignment,

    /// optionalParameters: {TextStyle? hintStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? hintStyle,

    /// optionalParameters: {TextDirection? hintTextDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? hintTextDirection,

    /// optionalParameters: {bool? filled = false} , hasDefaultValue:true, defaultValueCode:false
    bool? filled,

    /// optionalParameters: {Color? fillColor} , hasDefaultValue:false, defaultValueCode:null
    Color? fillColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {InputBorder? border = InputBorder.none} , hasDefaultValue:true, defaultValueCode:InputBorder.none
    InputBorder? border,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,
  }) : super.collapsed(
          hintText: hintText,
          floatingLabelBehavior: floatingLabelBehavior,
          floatingLabelAlignment: floatingLabelAlignment,
          hintStyle: hintStyle,
          hintTextDirection: hintTextDirection,
          filled: filled,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          border: border,
          enabled: enabled,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InputDecoration$Mate.collapsed(
        hintText: p.getValue('hintText'),
        floatingLabelBehavior: p.getValue('floatingLabelBehavior'),
        floatingLabelAlignment: p.getValue('floatingLabelAlignment'),
        hintStyle: p.getValue('hintStyle'),
        hintTextDirection: p.getValue('hintTextDirection'),
        filled: p.getValue('filled'),
        fillColor: p.getValue('fillColor'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        border: p.getValue('border'),
        enabled: p.getValue('enabled'),
      ),
    );
    mateParams.set(name: 'hintText', init: hintText);
    mateParams.set(name: 'floatingLabelBehavior', init: floatingLabelBehavior);
    mateParams.set(name: 'floatingLabelAlignment', init: floatingLabelAlignment);
    mateParams.set(name: 'hintStyle', init: hintStyle);
    mateParams.set(name: 'hintTextDirection', init: hintTextDirection);
    mateParams.set(name: 'filled', init: filled);
    mateParams.set(name: 'fillColor', init: fillColor);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'enabled', init: enabled);
  }
}

/// class InputDecorationTheme with Diagnosticable
class InputDecorationTheme$Mate extends InputDecorationTheme with Mate<InputDecorationTheme$Mate> {
  /// InputDecorationTheme InputDecorationTheme({TextStyle? labelStyle, TextStyle? floatingLabelStyle, TextStyle? helperStyle, int? helperMaxLines, TextStyle? hintStyle, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto, FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start, bool isDense = false, EdgeInsetsGeometry? contentPadding, bool isCollapsed = false, Color? iconColor, TextStyle? prefixStyle, Color? prefixIconColor, TextStyle? suffixStyle, Color? suffixIconColor, TextStyle? counterStyle, bool filled = false, Color? fillColor, BorderSide? activeIndicatorBorder, BorderSide? outlineBorder, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool alignLabelWithHint = false, BoxConstraints? constraints})
  InputDecorationTheme$Mate({
    /// optionalParameters: {TextStyle? labelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? labelStyle,

    /// optionalParameters: {TextStyle? floatingLabelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? floatingLabelStyle,

    /// optionalParameters: {TextStyle? helperStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? helperStyle,

    /// optionalParameters: {int? helperMaxLines} , hasDefaultValue:false, defaultValueCode:null
    int? helperMaxLines,

    /// optionalParameters: {TextStyle? hintStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? hintStyle,

    /// optionalParameters: {TextStyle? errorStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? errorStyle,

    /// optionalParameters: {int? errorMaxLines} , hasDefaultValue:false, defaultValueCode:null
    int? errorMaxLines,

    /// optionalParameters: {FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto} , hasDefaultValue:true, defaultValueCode:FloatingLabelBehavior.auto
    required FloatingLabelBehavior floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start} , hasDefaultValue:true, defaultValueCode:FloatingLabelAlignment.start
    required FloatingLabelAlignment floatingLabelAlignment,

    /// optionalParameters: {bool isDense = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isDense,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool isCollapsed = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isCollapsed,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {TextStyle? prefixStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? prefixStyle,

    /// optionalParameters: {Color? prefixIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? prefixIconColor,

    /// optionalParameters: {TextStyle? suffixStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? suffixStyle,

    /// optionalParameters: {Color? suffixIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? suffixIconColor,

    /// optionalParameters: {TextStyle? counterStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? counterStyle,

    /// optionalParameters: {bool filled = false} , hasDefaultValue:true, defaultValueCode:false
    required bool filled,

    /// optionalParameters: {Color? fillColor} , hasDefaultValue:false, defaultValueCode:null
    Color? fillColor,

    /// optionalParameters: {BorderSide? activeIndicatorBorder} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? activeIndicatorBorder,

    /// optionalParameters: {BorderSide? outlineBorder} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? outlineBorder,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {InputBorder? errorBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? errorBorder,

    /// optionalParameters: {InputBorder? focusedBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? focusedBorder,

    /// optionalParameters: {InputBorder? focusedErrorBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? focusedErrorBorder,

    /// optionalParameters: {InputBorder? disabledBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? disabledBorder,

    /// optionalParameters: {InputBorder? enabledBorder} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? enabledBorder,

    /// optionalParameters: {InputBorder? border} , hasDefaultValue:false, defaultValueCode:null
    InputBorder? border,

    /// optionalParameters: {bool alignLabelWithHint = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alignLabelWithHint,

    /// optionalParameters: {BoxConstraints? constraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? constraints,
  }) : super(
          labelStyle: labelStyle,
          floatingLabelStyle: floatingLabelStyle,
          helperStyle: helperStyle,
          helperMaxLines: helperMaxLines,
          hintStyle: hintStyle,
          errorStyle: errorStyle,
          errorMaxLines: errorMaxLines,
          floatingLabelBehavior: floatingLabelBehavior,
          floatingLabelAlignment: floatingLabelAlignment,
          isDense: isDense,
          contentPadding: contentPadding,
          isCollapsed: isCollapsed,
          iconColor: iconColor,
          prefixStyle: prefixStyle,
          prefixIconColor: prefixIconColor,
          suffixStyle: suffixStyle,
          suffixIconColor: suffixIconColor,
          counterStyle: counterStyle,
          filled: filled,
          fillColor: fillColor,
          activeIndicatorBorder: activeIndicatorBorder,
          outlineBorder: outlineBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          errorBorder: errorBorder,
          focusedBorder: focusedBorder,
          focusedErrorBorder: focusedErrorBorder,
          disabledBorder: disabledBorder,
          enabledBorder: enabledBorder,
          border: border,
          alignLabelWithHint: alignLabelWithHint,
          constraints: constraints,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InputDecorationTheme$Mate(
        labelStyle: p.getValue('labelStyle'),
        floatingLabelStyle: p.getValue('floatingLabelStyle'),
        helperStyle: p.getValue('helperStyle'),
        helperMaxLines: p.getValue('helperMaxLines'),
        hintStyle: p.getValue('hintStyle'),
        errorStyle: p.getValue('errorStyle'),
        errorMaxLines: p.getValue('errorMaxLines'),
        floatingLabelBehavior: p.getValue('floatingLabelBehavior'),
        floatingLabelAlignment: p.getValue('floatingLabelAlignment'),
        isDense: p.getValue('isDense'),
        contentPadding: p.getValue('contentPadding'),
        isCollapsed: p.getValue('isCollapsed'),
        iconColor: p.getValue('iconColor'),
        prefixStyle: p.getValue('prefixStyle'),
        prefixIconColor: p.getValue('prefixIconColor'),
        suffixStyle: p.getValue('suffixStyle'),
        suffixIconColor: p.getValue('suffixIconColor'),
        counterStyle: p.getValue('counterStyle'),
        filled: p.getValue('filled'),
        fillColor: p.getValue('fillColor'),
        activeIndicatorBorder: p.getValue('activeIndicatorBorder'),
        outlineBorder: p.getValue('outlineBorder'),
        focusColor: p.getValue('focusColor'),
        hoverColor: p.getValue('hoverColor'),
        errorBorder: p.getValue('errorBorder'),
        focusedBorder: p.getValue('focusedBorder'),
        focusedErrorBorder: p.getValue('focusedErrorBorder'),
        disabledBorder: p.getValue('disabledBorder'),
        enabledBorder: p.getValue('enabledBorder'),
        border: p.getValue('border'),
        alignLabelWithHint: p.getValue('alignLabelWithHint'),
        constraints: p.getValue('constraints'),
      ),
    );
    mateParams.set(name: 'labelStyle', init: labelStyle);
    mateParams.set(name: 'floatingLabelStyle', init: floatingLabelStyle);
    mateParams.set(name: 'helperStyle', init: helperStyle);
    mateParams.set(name: 'helperMaxLines', init: helperMaxLines);
    mateParams.set(name: 'hintStyle', init: hintStyle);
    mateParams.set(name: 'errorStyle', init: errorStyle);
    mateParams.set(name: 'errorMaxLines', init: errorMaxLines);
    mateParams.set(name: 'floatingLabelBehavior', init: floatingLabelBehavior);
    mateParams.set(name: 'floatingLabelAlignment', init: floatingLabelAlignment);
    mateParams.set(name: 'isDense', init: isDense);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'isCollapsed', init: isCollapsed);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'prefixStyle', init: prefixStyle);
    mateParams.set(name: 'prefixIconColor', init: prefixIconColor);
    mateParams.set(name: 'suffixStyle', init: suffixStyle);
    mateParams.set(name: 'suffixIconColor', init: suffixIconColor);
    mateParams.set(name: 'counterStyle', init: counterStyle);
    mateParams.set(name: 'filled', init: filled);
    mateParams.set(name: 'fillColor', init: fillColor);
    mateParams.set(name: 'activeIndicatorBorder', init: activeIndicatorBorder);
    mateParams.set(name: 'outlineBorder', init: outlineBorder);
    mateParams.set(name: 'focusColor', init: focusColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'errorBorder', init: errorBorder);
    mateParams.set(name: 'focusedBorder', init: focusedBorder);
    mateParams.set(name: 'focusedErrorBorder', init: focusedErrorBorder);
    mateParams.set(name: 'disabledBorder', init: disabledBorder);
    mateParams.set(name: 'enabledBorder', init: enabledBorder);
    mateParams.set(name: 'border', init: border);
    mateParams.set(name: 'alignLabelWithHint', init: alignLabelWithHint);
    mateParams.set(name: 'constraints', init: constraints);
  }
}
