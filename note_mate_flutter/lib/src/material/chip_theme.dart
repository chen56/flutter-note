// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';

/// class ChipTheme extends InheritedTheme
class ChipTheme$Mate extends ChipTheme with WidgetMate<ChipTheme$Mate> {
  /// ChipTheme ChipTheme({Key? key, required ChipThemeData data, required Widget child})
  ChipTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ChipThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required ChipThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ChipTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}

/// class ChipThemeData with Diagnosticable
class ChipThemeData$Mate extends ChipThemeData with Mate<ChipThemeData$Mate> {
  /// ChipThemeData ChipThemeData({Color? backgroundColor, Color? deleteIconColor, Color? disabledColor, Color? selectedColor, Color? secondarySelectedColor, Color? shadowColor, Color? surfaceTintColor, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, EdgeInsetsGeometry? labelPadding, EdgeInsetsGeometry? padding, BorderSide? side, OutlinedBorder? shape, TextStyle? labelStyle, TextStyle? secondaryLabelStyle, Brightness? brightness, double? elevation, double? pressElevation, IconThemeData? iconTheme})
  ChipThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? deleteIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? deleteIconColor,

    /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledColor,

    /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedColor,

    /// optionalParameters: {Color? secondarySelectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? secondarySelectedColor,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {Color? selectedShadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedShadowColor,

    /// optionalParameters: {bool? showCheckmark} , hasDefaultValue:false, defaultValueCode:null
    bool? showCheckmark,

    /// optionalParameters: {Color? checkmarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? checkmarkColor,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? labelPadding,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {BorderSide? side} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? side,

    /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? shape,

    /// optionalParameters: {TextStyle? labelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? labelStyle,

    /// optionalParameters: {TextStyle? secondaryLabelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? secondaryLabelStyle,

    /// optionalParameters: {Brightness? brightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? brightness,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? pressElevation} , hasDefaultValue:false, defaultValueCode:null
    double? pressElevation,

    /// optionalParameters: {IconThemeData? iconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? iconTheme,
  }) : super(
          backgroundColor: backgroundColor,
          deleteIconColor: deleteIconColor,
          disabledColor: disabledColor,
          selectedColor: selectedColor,
          secondarySelectedColor: secondarySelectedColor,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          selectedShadowColor: selectedShadowColor,
          showCheckmark: showCheckmark,
          checkmarkColor: checkmarkColor,
          labelPadding: labelPadding,
          padding: padding,
          side: side,
          shape: shape,
          labelStyle: labelStyle,
          secondaryLabelStyle: secondaryLabelStyle,
          brightness: brightness,
          elevation: elevation,
          pressElevation: pressElevation,
          iconTheme: iconTheme,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ChipThemeData$Mate(
        backgroundColor: p.getValue('backgroundColor'),
        deleteIconColor: p.getValue('deleteIconColor'),
        disabledColor: p.getValue('disabledColor'),
        selectedColor: p.getValue('selectedColor'),
        secondarySelectedColor: p.getValue('secondarySelectedColor'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        selectedShadowColor: p.getValue('selectedShadowColor'),
        showCheckmark: p.getValue('showCheckmark'),
        checkmarkColor: p.getValue('checkmarkColor'),
        labelPadding: p.getValue('labelPadding'),
        padding: p.getValue('padding'),
        side: p.getValue('side'),
        shape: p.getValue('shape'),
        labelStyle: p.getValue('labelStyle'),
        secondaryLabelStyle: p.getValue('secondaryLabelStyle'),
        brightness: p.getValue('brightness'),
        elevation: p.getValue('elevation'),
        pressElevation: p.getValue('pressElevation'),
        iconTheme: p.getValue('iconTheme'),
      ),
    );
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'deleteIconColor', init: deleteIconColor);
    mateParams.set(name: 'disabledColor', init: disabledColor);
    mateParams.set(name: 'selectedColor', init: selectedColor);
    mateParams.set(name: 'secondarySelectedColor', init: secondarySelectedColor);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'selectedShadowColor', init: selectedShadowColor);
    mateParams.set(name: 'showCheckmark', init: showCheckmark);
    mateParams.set(name: 'checkmarkColor', init: checkmarkColor);
    mateParams.set(name: 'labelPadding', init: labelPadding);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'side', init: side);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'labelStyle', init: labelStyle);
    mateParams.set(name: 'secondaryLabelStyle', init: secondaryLabelStyle);
    mateParams.set(name: 'brightness', init: brightness);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'pressElevation', init: pressElevation);
    mateParams.set(name: 'iconTheme', init: iconTheme);
  }
}
