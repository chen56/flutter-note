// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/dialog.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/rendering/flex.dart';
import 'package:flutter/src/widgets/overflow_bar.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/inherited_theme.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// class Dialog extends StatelessWidget
class Dialog$Mate extends Dialog with WidgetMate<Dialog$Mate> {
  /// Dialog Dialog({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, Duration insetAnimationDuration = const Duration(milliseconds: 100), Curve insetAnimationCurve = Curves.decelerate, EdgeInsets? insetPadding = _defaultInsetPadding, Clip clipBehavior = Clip.none, ShapeBorder? shape, AlignmentGeometry? alignment, Widget? child})
  Dialog$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {Duration insetAnimationDuration = const Duration(milliseconds: 100)}
    required Duration insetAnimationDuration,

    /// param: {Curve insetAnimationCurve = Curves.decelerate}
    required Curve insetAnimationCurve,

    /// param: {EdgeInsets? insetPadding = _defaultInsetPadding}
    EdgeInsets? insetPadding,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {AlignmentGeometry? alignment}
    AlignmentGeometry? alignment,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          insetAnimationDuration: insetAnimationDuration,
          insetAnimationCurve: insetAnimationCurve,
          insetPadding: insetPadding,
          clipBehavior: clipBehavior,
          shape: shape,
          alignment: alignment,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Dialog$Mate(
        key: p.getValue('key'),
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        insetAnimationDuration: p.getValue('insetAnimationDuration'),
        insetAnimationCurve: p.getValue('insetAnimationCurve'),
        insetPadding: p.getValue('insetPadding'),
        clipBehavior: p.getValue('clipBehavior'),
        shape: p.getValue('shape'),
        alignment: p.getValue('alignment'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'insetAnimationDuration', init: insetAnimationDuration);
    mateParams.set(name: 'insetAnimationCurve', init: insetAnimationCurve);
    mateParams.set(name: 'insetPadding', init: insetPadding);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'child', init: child);
  }

  /// Dialog Dialog.fullscreen({Key? key, Color? backgroundColor, Duration insetAnimationDuration = Duration.zero, Curve insetAnimationCurve = Curves.decelerate, Widget? child})
  Dialog$Mate.fullscreen({
    /// param: {Key? key}
    Key? key,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Duration insetAnimationDuration = Duration.zero}
    required Duration insetAnimationDuration,

    /// param: {Curve insetAnimationCurve = Curves.decelerate}
    required Curve insetAnimationCurve,

    /// param: {Widget? child}
    Widget? child,
  }) : super.fullscreen(
          key: key,
          backgroundColor: backgroundColor,
          insetAnimationDuration: insetAnimationDuration,
          insetAnimationCurve: insetAnimationCurve,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Dialog$Mate.fullscreen(
        key: p.getValue('key'),
        backgroundColor: p.getValue('backgroundColor'),
        insetAnimationDuration: p.getValue('insetAnimationDuration'),
        insetAnimationCurve: p.getValue('insetAnimationCurve'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'insetAnimationDuration', init: insetAnimationDuration);
    mateParams.set(name: 'insetAnimationCurve', init: insetAnimationCurve);
    mateParams.set(name: 'child', init: child);
  }
}

/// class AlertDialog extends StatelessWidget
class AlertDialog$Mate extends AlertDialog with WidgetMate<AlertDialog$Mate> {
  /// AlertDialog AlertDialog({Key? key, Widget? icon, EdgeInsetsGeometry? iconPadding, Color? iconColor, Widget? title, EdgeInsetsGeometry? titlePadding, TextStyle? titleTextStyle, Widget? content, EdgeInsetsGeometry? contentPadding, TextStyle? contentTextStyle, List<Widget>? actions, EdgeInsetsGeometry? actionsPadding, MainAxisAlignment? actionsAlignment, OverflowBarAlignment? actionsOverflowAlignment, VerticalDirection? actionsOverflowDirection, double? actionsOverflowButtonSpacing, EdgeInsetsGeometry? buttonPadding, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, String? semanticLabel, EdgeInsets insetPadding = _defaultInsetPadding, Clip clipBehavior = Clip.none, ShapeBorder? shape, AlignmentGeometry? alignment, bool scrollable = false})
  AlertDialog$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? icon}
    Widget? icon,

    /// param: {EdgeInsetsGeometry? iconPadding}
    EdgeInsetsGeometry? iconPadding,

    /// param: {Color? iconColor}
    Color? iconColor,

    /// param: {Widget? title}
    Widget? title,

    /// param: {EdgeInsetsGeometry? titlePadding}
    EdgeInsetsGeometry? titlePadding,

    /// param: {TextStyle? titleTextStyle}
    TextStyle? titleTextStyle,

    /// param: {Widget? content}
    Widget? content,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {TextStyle? contentTextStyle}
    TextStyle? contentTextStyle,

    /// param: {List<Widget>? actions}
    List<Widget>? actions,

    /// param: {EdgeInsetsGeometry? actionsPadding}
    EdgeInsetsGeometry? actionsPadding,

    /// param: {MainAxisAlignment? actionsAlignment}
    MainAxisAlignment? actionsAlignment,

    /// param: {OverflowBarAlignment? actionsOverflowAlignment}
    OverflowBarAlignment? actionsOverflowAlignment,

    /// param: {VerticalDirection? actionsOverflowDirection}
    VerticalDirection? actionsOverflowDirection,

    /// param: {double? actionsOverflowButtonSpacing}
    double? actionsOverflowButtonSpacing,

    /// param: {EdgeInsetsGeometry? buttonPadding}
    EdgeInsetsGeometry? buttonPadding,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {EdgeInsets insetPadding = _defaultInsetPadding}
    required EdgeInsets insetPadding,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {AlignmentGeometry? alignment}
    AlignmentGeometry? alignment,

    /// param: {bool scrollable = false}
    required bool scrollable,
  }) : super(
          key: key,
          icon: icon,
          iconPadding: iconPadding,
          iconColor: iconColor,
          title: title,
          titlePadding: titlePadding,
          titleTextStyle: titleTextStyle,
          content: content,
          contentPadding: contentPadding,
          contentTextStyle: contentTextStyle,
          actions: actions,
          actionsPadding: actionsPadding,
          actionsAlignment: actionsAlignment,
          actionsOverflowAlignment: actionsOverflowAlignment,
          actionsOverflowDirection: actionsOverflowDirection,
          actionsOverflowButtonSpacing: actionsOverflowButtonSpacing,
          buttonPadding: buttonPadding,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          semanticLabel: semanticLabel,
          insetPadding: insetPadding,
          clipBehavior: clipBehavior,
          shape: shape,
          alignment: alignment,
          scrollable: scrollable,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AlertDialog$Mate(
        key: p.getValue('key'),
        icon: p.getValue('icon'),
        iconPadding: p.getValue('iconPadding'),
        iconColor: p.getValue('iconColor'),
        title: p.getValue('title'),
        titlePadding: p.getValue('titlePadding'),
        titleTextStyle: p.getValue('titleTextStyle'),
        content: p.getValue('content'),
        contentPadding: p.getValue('contentPadding'),
        contentTextStyle: p.getValue('contentTextStyle'),
        actions: p.getValue('actions'),
        actionsPadding: p.getValue('actionsPadding'),
        actionsAlignment: p.getValue('actionsAlignment'),
        actionsOverflowAlignment: p.getValue('actionsOverflowAlignment'),
        actionsOverflowDirection: p.getValue('actionsOverflowDirection'),
        actionsOverflowButtonSpacing: p.getValue('actionsOverflowButtonSpacing'),
        buttonPadding: p.getValue('buttonPadding'),
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        semanticLabel: p.getValue('semanticLabel'),
        insetPadding: p.getValue('insetPadding'),
        clipBehavior: p.getValue('clipBehavior'),
        shape: p.getValue('shape'),
        alignment: p.getValue('alignment'),
        scrollable: p.getValue('scrollable'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'icon', init: icon);
    mateParams.set(name: 'iconPadding', init: iconPadding);
    mateParams.set(name: 'iconColor', init: iconColor);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'titlePadding', init: titlePadding);
    mateParams.set(name: 'titleTextStyle', init: titleTextStyle);
    mateParams.set(name: 'content', init: content);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'contentTextStyle', init: contentTextStyle);
    mateParams.set(name: 'actions', init: actions);
    mateParams.set(name: 'actionsPadding', init: actionsPadding);
    mateParams.set(name: 'actionsAlignment', init: actionsAlignment);
    mateParams.set(name: 'actionsOverflowAlignment', init: actionsOverflowAlignment);
    mateParams.set(name: 'actionsOverflowDirection', init: actionsOverflowDirection);
    mateParams.set(name: 'actionsOverflowButtonSpacing', init: actionsOverflowButtonSpacing);
    mateParams.set(name: 'buttonPadding', init: buttonPadding);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'insetPadding', init: insetPadding);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'scrollable', init: scrollable);
  }
}

/// class SimpleDialogOption extends StatelessWidget
class SimpleDialogOption$Mate extends SimpleDialogOption with WidgetMate<SimpleDialogOption$Mate> {
  /// SimpleDialogOption SimpleDialogOption({Key? key, void Function()? onPressed, EdgeInsets? padding, Widget? child})
  SimpleDialogOption$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {void Function()? onPressed}
    VoidCallback? onPressed,

    /// param: {EdgeInsets? padding}
    EdgeInsets? padding,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          onPressed: onPressed,
          padding: padding,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SimpleDialogOption$Mate(
        key: p.getValue('key'),
        onPressed: p.getValue('onPressed'),
        padding: p.getValue('padding'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'onPressed', init: onPressed);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'child', init: child);
  }
}

/// class SimpleDialog extends StatelessWidget
class SimpleDialog$Mate extends SimpleDialog with WidgetMate<SimpleDialog$Mate> {
  /// SimpleDialog SimpleDialog({Key? key, Widget? title, EdgeInsetsGeometry titlePadding = const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0), TextStyle? titleTextStyle, List<Widget>? children, EdgeInsetsGeometry contentPadding = const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0), Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, String? semanticLabel, EdgeInsets insetPadding = _defaultInsetPadding, Clip clipBehavior = Clip.none, ShapeBorder? shape, AlignmentGeometry? alignment})
  SimpleDialog$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {Widget? title}
    Widget? title,

    /// param: {EdgeInsetsGeometry titlePadding = const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0)}
    required EdgeInsetsGeometry titlePadding,

    /// param: {TextStyle? titleTextStyle}
    TextStyle? titleTextStyle,

    /// param: {List<Widget>? children}
    List<Widget>? children,

    /// param: {EdgeInsetsGeometry contentPadding = const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0)}
    required EdgeInsetsGeometry contentPadding,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {double? elevation}
    double? elevation,

    /// param: {Color? shadowColor}
    Color? shadowColor,

    /// param: {Color? surfaceTintColor}
    Color? surfaceTintColor,

    /// param: {String? semanticLabel}
    String? semanticLabel,

    /// param: {EdgeInsets insetPadding = _defaultInsetPadding}
    required EdgeInsets insetPadding,

    /// param: {Clip clipBehavior = Clip.none}
    required Clip clipBehavior,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {AlignmentGeometry? alignment}
    AlignmentGeometry? alignment,
  }) : super(
          key: key,
          title: title,
          titlePadding: titlePadding,
          titleTextStyle: titleTextStyle,
          children: children,
          contentPadding: contentPadding,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          semanticLabel: semanticLabel,
          insetPadding: insetPadding,
          clipBehavior: clipBehavior,
          shape: shape,
          alignment: alignment,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SimpleDialog$Mate(
        key: p.getValue('key'),
        title: p.getValue('title'),
        titlePadding: p.getValue('titlePadding'),
        titleTextStyle: p.getValue('titleTextStyle'),
        children: p.getValue('children'),
        contentPadding: p.getValue('contentPadding'),
        backgroundColor: p.getValue('backgroundColor'),
        elevation: p.getValue('elevation'),
        shadowColor: p.getValue('shadowColor'),
        surfaceTintColor: p.getValue('surfaceTintColor'),
        semanticLabel: p.getValue('semanticLabel'),
        insetPadding: p.getValue('insetPadding'),
        clipBehavior: p.getValue('clipBehavior'),
        shape: p.getValue('shape'),
        alignment: p.getValue('alignment'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'titlePadding', init: titlePadding);
    mateParams.set(name: 'titleTextStyle', init: titleTextStyle);
    mateParams.set(name: 'children', init: children);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'shadowColor', init: shadowColor);
    mateParams.set(name: 'surfaceTintColor', init: surfaceTintColor);
    mateParams.set(name: 'semanticLabel', init: semanticLabel);
    mateParams.set(name: 'insetPadding', init: insetPadding);
    mateParams.set(name: 'clipBehavior', init: clipBehavior);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'alignment', init: alignment);
  }
}

/// class DialogRoute<T> extends RawDialogRoute<T>
class DialogRoute$Mate<T> extends DialogRoute<T> with Mate<DialogRoute$Mate> {
  /// DialogRoute<T> DialogRoute({required BuildContext context, required Widget Function(BuildContext) builder, CapturedThemes? themes, Color? barrierColor = Colors.black54, bool barrierDismissible = true, String? barrierLabel, bool useSafeArea = true, RouteSettings? settings, Offset? anchorPoint, TraversalEdgeBehavior? traversalEdgeBehavior})
  DialogRoute$Mate({
    /// param: {required BuildContext context}
    required BuildContext context,

    /// param: {required Widget Function(BuildContext) builder}
    required WidgetBuilder builder,

    /// param: {CapturedThemes? themes}
    CapturedThemes? themes,

    /// param: {Color? barrierColor = Colors.black54}
    Color? barrierColor,

    /// param: {bool barrierDismissible = true}
    required bool barrierDismissible,

    /// param: {String? barrierLabel}
    String? barrierLabel,

    /// param: {bool useSafeArea = true}
    required bool useSafeArea,

    /// param: {RouteSettings? settings}
    RouteSettings? settings,

    /// param: {Offset? anchorPoint}
    Offset? anchorPoint,

    /// param: {TraversalEdgeBehavior? traversalEdgeBehavior}
    TraversalEdgeBehavior? traversalEdgeBehavior,
  }) : super(
          context: context,
          builder: builder,
          themes: themes,
          barrierColor: barrierColor,
          barrierDismissible: barrierDismissible,
          barrierLabel: barrierLabel,
          useSafeArea: useSafeArea,
          settings: settings,
          anchorPoint: anchorPoint,
          traversalEdgeBehavior: traversalEdgeBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => DialogRoute$Mate(
        context: p.getValue('context'),
        builder: p.getValue('builder'),
        themes: p.getValue('themes'),
        barrierColor: p.getValue('barrierColor'),
        barrierDismissible: p.getValue('barrierDismissible'),
        barrierLabel: p.getValue('barrierLabel'),
        useSafeArea: p.getValue('useSafeArea'),
        settings: p.getValue('settings'),
        anchorPoint: p.getValue('anchorPoint'),
        traversalEdgeBehavior: p.getValue('traversalEdgeBehavior'),
      ),
    );
    mateParams.set(name: 'context', init: context);
    mateParams.set(name: 'builder', init: builder);
    mateParams.set(name: 'themes', init: themes);
    mateParams.set(name: 'barrierColor', init: barrierColor);
    mateParams.set(name: 'barrierDismissible', init: barrierDismissible);
    mateParams.set(name: 'barrierLabel', init: barrierLabel);
    mateParams.set(name: 'useSafeArea', init: useSafeArea);
    mateParams.set(name: 'settings', init: settings);
    mateParams.set(name: 'anchorPoint', init: anchorPoint);
    mateParams.set(name: 'traversalEdgeBehavior', init: traversalEdgeBehavior);
  }
}
