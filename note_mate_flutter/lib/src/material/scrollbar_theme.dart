// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/scrollbar_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ScrollbarThemeData with Diagnosticable
class ScrollbarThemeData$Mate extends ScrollbarThemeData with Mate<ScrollbarThemeData$Mate> {
  /// ScrollbarThemeData ScrollbarThemeData({MaterialStateProperty<bool?>? thumbVisibility, MaterialStateProperty<double?>? thickness, MaterialStateProperty<bool?>? trackVisibility, Radius? radius, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackBorderColor, double? crossAxisMargin, double? mainAxisMargin, double? minThumbLength, bool? interactive, bool? isAlwaysShown, bool? showTrackOnHover})
  ScrollbarThemeData$Mate({
    /// optionalParameters: {MaterialStateProperty<bool?>? thumbVisibility} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<bool?>? thumbVisibility,

    /// optionalParameters: {MaterialStateProperty<double?>? thickness} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<double?>? thickness,

    /// optionalParameters: {MaterialStateProperty<bool?>? trackVisibility} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<bool?>? trackVisibility,

    /// optionalParameters: {Radius? radius} , hasDefaultValue:false, defaultValueCode:null
    Radius? radius,

    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackBorderColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackBorderColor,

    /// optionalParameters: {double? crossAxisMargin} , hasDefaultValue:false, defaultValueCode:null
    double? crossAxisMargin,

    /// optionalParameters: {double? mainAxisMargin} , hasDefaultValue:false, defaultValueCode:null
    double? mainAxisMargin,

    /// optionalParameters: {double? minThumbLength} , hasDefaultValue:false, defaultValueCode:null
    double? minThumbLength,

    /// optionalParameters: {bool? interactive} , hasDefaultValue:false, defaultValueCode:null
    bool? interactive,
  }) : super(
          thumbVisibility: thumbVisibility,
          thickness: thickness,
          trackVisibility: trackVisibility,
          radius: radius,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          crossAxisMargin: crossAxisMargin,
          mainAxisMargin: mainAxisMargin,
          minThumbLength: minThumbLength,
          interactive: interactive,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollbarThemeData$Mate(
        thumbVisibility: p.getValue('thumbVisibility'),
        thickness: p.getValue('thickness'),
        trackVisibility: p.getValue('trackVisibility'),
        radius: p.getValue('radius'),
        thumbColor: p.getValue('thumbColor'),
        trackColor: p.getValue('trackColor'),
        trackBorderColor: p.getValue('trackBorderColor'),
        crossAxisMargin: p.getValue('crossAxisMargin'),
        mainAxisMargin: p.getValue('mainAxisMargin'),
        minThumbLength: p.getValue('minThumbLength'),
        interactive: p.getValue('interactive'),
      ),
    );
    mateParams.set(name: 'thumbVisibility', init: thumbVisibility);
    mateParams.set(name: 'thickness', init: thickness);
    mateParams.set(name: 'trackVisibility', init: trackVisibility);
    mateParams.set(name: 'radius', init: radius);
    mateParams.set(name: 'thumbColor', init: thumbColor);
    mateParams.set(name: 'trackColor', init: trackColor);
    mateParams.set(name: 'trackBorderColor', init: trackBorderColor);
    mateParams.set(name: 'crossAxisMargin', init: crossAxisMargin);
    mateParams.set(name: 'mainAxisMargin', init: mainAxisMargin);
    mateParams.set(name: 'minThumbLength', init: minThumbLength);
    mateParams.set(name: 'interactive', init: interactive);
  }
}

/// class ScrollbarTheme extends InheritedWidget
class ScrollbarTheme$Mate extends ScrollbarTheme with WidgetMate<ScrollbarTheme$Mate> {
  /// ScrollbarTheme ScrollbarTheme({Key? key, required ScrollbarThemeData data, required Widget child})
  ScrollbarTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ScrollbarThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required ScrollbarThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScrollbarTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
