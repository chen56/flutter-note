// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/radio_list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class RadioListTile<T> extends StatelessWidget
class RadioListTile$Mate<T> extends RadioListTile<T> with WidgetMate<RadioListTile$Mate> {
  /// RadioListTile<T> RadioListTile({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, ShapeBorder? shape, Color? tileColor, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
  RadioListTile$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required T value}
    required T value,

    /// param: {required T? groupValue}
    required T? groupValue,

    /// param: {required void Function(T?)? onChanged}
    required ValueChanged<T?>? onChanged,

    /// param: {MouseCursor? mouseCursor}
    MouseCursor? mouseCursor,

    /// param: {bool toggleable = false}
    required bool toggleable,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {MaterialStateProperty<Color?>? fillColor}
    MaterialStateProperty<Color?>? fillColor,

    /// param: {Color? hoverColor}
    Color? hoverColor,

    /// param: {MaterialStateProperty<Color?>? overlayColor}
    MaterialStateProperty<Color?>? overlayColor,

    /// param: {double? splashRadius}
    double? splashRadius,

    /// param: {MaterialTapTargetSize? materialTapTargetSize}
    MaterialTapTargetSize? materialTapTargetSize,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? subtitle}
    Widget? subtitle,

    /// param: {bool isThreeLine = false}
    required bool isThreeLine,

    /// param: {bool? dense}
    bool? dense,

    /// param: {Widget? secondary}
    Widget? secondary,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) : super(
          key: key,
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
          mouseCursor: mouseCursor,
          toggleable: toggleable,
          activeColor: activeColor,
          fillColor: fillColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          secondary: secondary,
          selected: selected,
          controlAffinity: controlAffinity,
          autofocus: autofocus,
          contentPadding: contentPadding,
          shape: shape,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RadioListTile$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        groupValue: p.getValue('groupValue'),
        onChanged: p.getValue('onChanged'),
        mouseCursor: p.getValue('mouseCursor'),
        toggleable: p.getValue('toggleable'),
        activeColor: p.getValue('activeColor'),
        fillColor: p.getValue('fillColor'),
        hoverColor: p.getValue('hoverColor'),
        overlayColor: p.getValue('overlayColor'),
        splashRadius: p.getValue('splashRadius'),
        materialTapTargetSize: p.getValue('materialTapTargetSize'),
        title: p.getValue('title'),
        subtitle: p.getValue('subtitle'),
        isThreeLine: p.getValue('isThreeLine'),
        dense: p.getValue('dense'),
        secondary: p.getValue('secondary'),
        selected: p.getValue('selected'),
        controlAffinity: p.getValue('controlAffinity'),
        autofocus: p.getValue('autofocus'),
        contentPadding: p.getValue('contentPadding'),
        shape: p.getValue('shape'),
        tileColor: p.getValue('tileColor'),
        selectedTileColor: p.getValue('selectedTileColor'),
        visualDensity: p.getValue('visualDensity'),
        focusNode: p.getValue('focusNode'),
        onFocusChange: p.getValue('onFocusChange'),
        enableFeedback: p.getValue('enableFeedback'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'groupValue', init: groupValue);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'toggleable', init: toggleable);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'fillColor', init: fillColor);
    mateParams.set(name: 'hoverColor', init: hoverColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'splashRadius', init: splashRadius);
    mateParams.set(name: 'materialTapTargetSize', init: materialTapTargetSize);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'subtitle', init: subtitle);
    mateParams.set(name: 'isThreeLine', init: isThreeLine);
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'secondary', init: secondary);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'controlAffinity', init: controlAffinity);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
  }
}
