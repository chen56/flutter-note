// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/radio_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class RadioThemeData with Diagnosticable
class RadioThemeData$Mate extends RadioThemeData with Mate<RadioThemeData$Mate> {
  /// RadioThemeData RadioThemeData({MaterialStateProperty<MouseCursor?>? mouseCursor, MaterialStateProperty<Color?>? fillColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity})
  RadioThemeData$Mate({
    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? fillColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
    double? splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,
  }) : super(
          mouseCursor: mouseCursor,
          fillColor: fillColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RadioThemeData$Mate(
        mouseCursor: p.getValue('mouseCursor'),
        fillColor: p.getValue('fillColor'),
        overlayColor: p.getValue('overlayColor'),
        splashRadius: p.getValue('splashRadius'),
        materialTapTargetSize: p.getValue('materialTapTargetSize'),
        visualDensity: p.getValue('visualDensity'),
      ),
    );
    mateParams.set(name: 'mouseCursor', init: mouseCursor);
    mateParams.set(name: 'fillColor', init: fillColor);
    mateParams.set(name: 'overlayColor', init: overlayColor);
    mateParams.set(name: 'splashRadius', init: splashRadius);
    mateParams.set(name: 'materialTapTargetSize', init: materialTapTargetSize);
    mateParams.set(name: 'visualDensity', init: visualDensity);
  }
}

/// class RadioTheme extends InheritedWidget
class RadioTheme$Mate extends RadioTheme with WidgetMate<RadioTheme$Mate> {
  /// RadioTheme RadioTheme({Key? key, required RadioThemeData data, required Widget child})
  RadioTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required RadioThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required RadioThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RadioTheme$Mate(
        key: p.getValue('key'),
        data: p.getValue('data'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'data', init: data);
    mateParams.set(name: 'child', init: child);
  }
}
