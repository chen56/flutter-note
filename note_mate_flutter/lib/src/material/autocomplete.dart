// /// Generated by mate_flutter, please don't edit!

import 'dart:core';
import 'package:flutter/src/material/autocomplete.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/autocomplete.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:note/mate.dart';

/// class Autocomplete<T extends Object> extends StatelessWidget
class Autocomplete$Mate<T extends Object> extends Autocomplete<T> with WidgetMate<Autocomplete$Mate> {
  /// Autocomplete<T> Autocomplete({Key? key, required FutureOr<Iterable<T>> Function(TextEditingValue) optionsBuilder, String Function(T) displayStringForOption = RawAutocomplete.defaultStringForOption, Widget Function(BuildContext, TextEditingController, FocusNode, void Function()) fieldViewBuilder = _defaultFieldViewBuilder, void Function(T)? onSelected, double optionsMaxHeight = 200.0, Widget Function(BuildContext, void Function(T), Iterable<T>)? optionsViewBuilder, TextEditingValue? initialValue})
  Autocomplete$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required FutureOr<Iterable<T>> Function(TextEditingValue) optionsBuilder}
    required AutocompleteOptionsBuilder<T> optionsBuilder,

    /// param: {String Function(T) displayStringForOption = RawAutocomplete.defaultStringForOption}
    required AutocompleteOptionToString<T> displayStringForOption,

    /// param: {Widget Function(BuildContext, TextEditingController, FocusNode, void Function()) fieldViewBuilder = _defaultFieldViewBuilder}
    required AutocompleteFieldViewBuilder fieldViewBuilder,

    /// param: {void Function(T)? onSelected}
    AutocompleteOnSelected<T>? onSelected,

    /// param: {double optionsMaxHeight = 200.0}
    required double optionsMaxHeight,

    /// param: {Widget Function(BuildContext, void Function(T), Iterable<T>)? optionsViewBuilder}
    AutocompleteOptionsViewBuilder<T>? optionsViewBuilder,

    /// param: {TextEditingValue? initialValue}
    TextEditingValue? initialValue,
  }) : super(
          key: key,
          optionsBuilder: optionsBuilder,
          displayStringForOption: displayStringForOption,
          fieldViewBuilder: fieldViewBuilder,
          onSelected: onSelected,
          optionsMaxHeight: optionsMaxHeight,
          optionsViewBuilder: optionsViewBuilder,
          initialValue: initialValue,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Autocomplete$Mate(
        key: p.getValue('key'),
        optionsBuilder: p.getValue('optionsBuilder'),
        displayStringForOption: p.getValue('displayStringForOption'),
        fieldViewBuilder: p.getValue('fieldViewBuilder'),
        onSelected: p.getValue('onSelected'),
        optionsMaxHeight: p.getValue('optionsMaxHeight'),
        optionsViewBuilder: p.getValue('optionsViewBuilder'),
        initialValue: p.getValue('initialValue'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'optionsBuilder', init: optionsBuilder);
    mateParams.set(name: 'displayStringForOption', init: displayStringForOption);
    mateParams.set(name: 'fieldViewBuilder', init: fieldViewBuilder);
    mateParams.set(name: 'onSelected', init: onSelected);
    mateParams.set(name: 'optionsMaxHeight', init: optionsMaxHeight);
    mateParams.set(name: 'optionsViewBuilder', init: optionsViewBuilder);
    mateParams.set(name: 'initialValue', init: initialValue);
  }
}
