// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/ink_decoration.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'package:flutter/src/painting/decoration.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/painting/image_stream.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/rendering/box.dart';

/// class Ink extends StatefulWidget
class Ink$Mate extends Ink with WidgetMate<Ink$Mate> {
  /// Ink Ink({Key? key, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, double? width, double? height, Widget? child})
  Ink$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {Color? color}
    Color? color,

    /// param: {Decoration? decoration}
    Decoration? decoration,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Widget? child}
    Widget? child,
  }) : super(
          key: key,
          padding: padding,
          color: color,
          decoration: decoration,
          width: width,
          height: height,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Ink$Mate(
        key: p.getValue('key'),
        padding: p.getValue('padding'),
        color: p.getValue('color'),
        decoration: p.getValue('decoration'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'child', init: child);
  }

  /// Ink Ink.image({Key? key, EdgeInsetsGeometry? padding, required ImageProvider<Object> image, void Function(Object, StackTrace?)? onImageError, ColorFilter? colorFilter, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, Rect? centerSlice, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, double? width, double? height, Widget? child})
  Ink$Mate.image({
    /// param: {Key? key}
    Key? key,

    /// param: {EdgeInsetsGeometry? padding}
    EdgeInsetsGeometry? padding,

    /// param: {required ImageProvider<Object> image}
    required ImageProvider<Object> image,

    /// param: {void Function(Object, StackTrace?)? onImageError}
    ImageErrorListener? onImageError,

    /// param: {ColorFilter? colorFilter}
    ColorFilter? colorFilter,

    /// param: {BoxFit? fit}
    BoxFit? fit,

    /// param: {AlignmentGeometry alignment = Alignment.center}
    required AlignmentGeometry alignment,

    /// param: {Rect? centerSlice}
    Rect? centerSlice,

    /// param: {ImageRepeat repeat = ImageRepeat.noRepeat}
    required ImageRepeat repeat,

    /// param: {bool matchTextDirection = false}
    required bool matchTextDirection,

    /// param: {double? width}
    double? width,

    /// param: {double? height}
    double? height,

    /// param: {Widget? child}
    Widget? child,
  }) : super.image(
          key: key,
          padding: padding,
          image: image,
          onImageError: onImageError,
          colorFilter: colorFilter,
          fit: fit,
          alignment: alignment,
          centerSlice: centerSlice,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          width: width,
          height: height,
          child: child,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Ink$Mate.image(
        key: p.getValue('key'),
        padding: p.getValue('padding'),
        image: p.getValue('image'),
        onImageError: p.getValue('onImageError'),
        colorFilter: p.getValue('colorFilter'),
        fit: p.getValue('fit'),
        alignment: p.getValue('alignment'),
        centerSlice: p.getValue('centerSlice'),
        repeat: p.getValue('repeat'),
        matchTextDirection: p.getValue('matchTextDirection'),
        width: p.getValue('width'),
        height: p.getValue('height'),
        child: p.getValue('child'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'padding', init: padding);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'onImageError', init: onImageError);
    mateParams.set(name: 'colorFilter', init: colorFilter);
    mateParams.set(name: 'fit', init: fit);
    mateParams.set(name: 'alignment', init: alignment);
    mateParams.set(name: 'centerSlice', init: centerSlice);
    mateParams.set(name: 'repeat', init: repeat);
    mateParams.set(name: 'matchTextDirection', init: matchTextDirection);
    mateParams.set(name: 'width', init: width);
    mateParams.set(name: 'height', init: height);
    mateParams.set(name: 'child', init: child);
  }
}

/// class InkDecoration extends InkFeature
class InkDecoration$Mate extends InkDecoration with Mate<InkDecoration$Mate> {
  /// InkDecoration InkDecoration({required Decoration? decoration, required ImageConfiguration configuration, required MaterialInkController controller, required RenderBox referenceBox, void Function()? onRemoved})
  InkDecoration$Mate({
    /// param: {required Decoration? decoration}
    required Decoration? decoration,

    /// param: {required ImageConfiguration configuration}
    required ImageConfiguration configuration,

    /// param: {required MaterialInkController controller}
    required MaterialInkController controller,

    /// param: {required RenderBox referenceBox}
    required RenderBox referenceBox,

    /// param: {void Function()? onRemoved}
    VoidCallback? onRemoved,
  }) : super(
          decoration: decoration,
          configuration: configuration,
          controller: controller,
          referenceBox: referenceBox,
          onRemoved: onRemoved,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => InkDecoration$Mate(
        decoration: p.getValue('decoration'),
        configuration: p.getValue('configuration'),
        controller: p.getValue('controller'),
        referenceBox: p.getValue('referenceBox'),
        onRemoved: p.getValue('onRemoved'),
      ),
    );
    mateParams.set(name: 'decoration', init: decoration);
    mateParams.set(name: 'configuration', init: configuration);
    mateParams.set(name: 'controller', init: controller);
    mateParams.set(name: 'referenceBox', init: referenceBox);
    mateParams.set(name: 'onRemoved', init: onRemoved);
  }
}
