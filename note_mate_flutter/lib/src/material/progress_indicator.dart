// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:27.079075

import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';

/// abstract class ProgressIndicator extends StatefulWidget
abstract class ProgressIndicator$Mate extends ProgressIndicator {
  /// ProgressIndicator ProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, String? semanticsLabel, String? semanticsValue})
  ProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {}
}

/// class LinearProgressIndicator extends ProgressIndicator
class LinearProgressIndicator$Mate extends LinearProgressIndicator {
  /// LinearProgressIndicator LinearProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double? minHeight, String? semanticsLabel, String? semanticsValue})
  LinearProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double? minHeight}
    double? minHeight,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          minHeight: minHeight,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {}
}

/// class CircularProgressIndicator extends ProgressIndicator
class CircularProgressIndicator$Mate extends CircularProgressIndicator {
  /// CircularProgressIndicator CircularProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue})
  CircularProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double strokeWidth = 4.0}
    required double strokeWidth,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          strokeWidth: strokeWidth,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {}

  /// CircularProgressIndicator CircularProgressIndicator.adaptive({Key? key, double? value, Color? backgroundColor, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue})
  CircularProgressIndicator$Mate.adaptive({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double strokeWidth = 4.0}
    required double strokeWidth,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super.adaptive(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          valueColor: valueColor,
          strokeWidth: strokeWidth,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {}
}

/// class RefreshProgressIndicator extends CircularProgressIndicator
class RefreshProgressIndicator$Mate extends RefreshProgressIndicator {
  /// RefreshProgressIndicator RefreshProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = defaultStrokeWidth, String? semanticsLabel, String? semanticsValue})
  RefreshProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double strokeWidth = defaultStrokeWidth}
    required double strokeWidth,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          strokeWidth: strokeWidth,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {}
}
