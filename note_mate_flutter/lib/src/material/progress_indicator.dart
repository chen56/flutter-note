// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/progress_indicator.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';
import 'package:note/mate.dart';

/// class LinearProgressIndicator extends ProgressIndicator
class LinearProgressIndicator$Mate extends LinearProgressIndicator with WidgetMate<LinearProgressIndicator$Mate> {
  /// LinearProgressIndicator LinearProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double? minHeight, String? semanticsLabel, String? semanticsValue})
  LinearProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double? minHeight}
    double? minHeight,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          minHeight: minHeight,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => LinearProgressIndicator$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        backgroundColor: p.getValue('backgroundColor'),
        color: p.getValue('color'),
        valueColor: p.getValue('valueColor'),
        minHeight: p.getValue('minHeight'),
        semanticsLabel: p.getValue('semanticsLabel'),
        semanticsValue: p.getValue('semanticsValue'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'valueColor', init: valueColor);
    mateParams.set(name: 'minHeight', init: minHeight);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'semanticsValue', init: semanticsValue);
  }
}

/// class CircularProgressIndicator extends ProgressIndicator
class CircularProgressIndicator$Mate extends CircularProgressIndicator with WidgetMate<CircularProgressIndicator$Mate> {
  /// CircularProgressIndicator CircularProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue})
  CircularProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double strokeWidth = 4.0}
    required double strokeWidth,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          strokeWidth: strokeWidth,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CircularProgressIndicator$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        backgroundColor: p.getValue('backgroundColor'),
        color: p.getValue('color'),
        valueColor: p.getValue('valueColor'),
        strokeWidth: p.getValue('strokeWidth'),
        semanticsLabel: p.getValue('semanticsLabel'),
        semanticsValue: p.getValue('semanticsValue'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'valueColor', init: valueColor);
    mateParams.set(name: 'strokeWidth', init: strokeWidth);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'semanticsValue', init: semanticsValue);
  }

  /// CircularProgressIndicator CircularProgressIndicator.adaptive({Key? key, double? value, Color? backgroundColor, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue})
  CircularProgressIndicator$Mate.adaptive({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double strokeWidth = 4.0}
    required double strokeWidth,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super.adaptive(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          valueColor: valueColor,
          strokeWidth: strokeWidth,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CircularProgressIndicator$Mate.adaptive(
        key: p.getValue('key'),
        value: p.getValue('value'),
        backgroundColor: p.getValue('backgroundColor'),
        valueColor: p.getValue('valueColor'),
        strokeWidth: p.getValue('strokeWidth'),
        semanticsLabel: p.getValue('semanticsLabel'),
        semanticsValue: p.getValue('semanticsValue'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'valueColor', init: valueColor);
    mateParams.set(name: 'strokeWidth', init: strokeWidth);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'semanticsValue', init: semanticsValue);
  }
}

/// class RefreshProgressIndicator extends CircularProgressIndicator
class RefreshProgressIndicator$Mate extends RefreshProgressIndicator with WidgetMate<RefreshProgressIndicator$Mate> {
  /// RefreshProgressIndicator RefreshProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = defaultStrokeWidth, String? semanticsLabel, String? semanticsValue})
  RefreshProgressIndicator$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {double? value}
    double? value,

    /// param: {Color? backgroundColor}
    Color? backgroundColor,

    /// param: {Color? color}
    Color? color,

    /// param: {Animation<Color?>? valueColor}
    Animation<Color?>? valueColor,

    /// param: {double strokeWidth = defaultStrokeWidth}
    required double strokeWidth,

    /// param: {String? semanticsLabel}
    String? semanticsLabel,

    /// param: {String? semanticsValue}
    String? semanticsValue,
  }) : super(
          key: key,
          value: value,
          backgroundColor: backgroundColor,
          color: color,
          valueColor: valueColor,
          strokeWidth: strokeWidth,
          semanticsLabel: semanticsLabel,
          semanticsValue: semanticsValue,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RefreshProgressIndicator$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        backgroundColor: p.getValue('backgroundColor'),
        color: p.getValue('color'),
        valueColor: p.getValue('valueColor'),
        strokeWidth: p.getValue('strokeWidth'),
        semanticsLabel: p.getValue('semanticsLabel'),
        semanticsValue: p.getValue('semanticsValue'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'backgroundColor', init: backgroundColor);
    mateParams.set(name: 'color', init: color);
    mateParams.set(name: 'valueColor', init: valueColor);
    mateParams.set(name: 'strokeWidth', init: strokeWidth);
    mateParams.set(name: 'semanticsLabel', init: semanticsLabel);
    mateParams.set(name: 'semanticsValue', init: semanticsValue);
  }
}
