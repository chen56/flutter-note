// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/material/checkbox_list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class CheckboxListTile extends StatelessWidget
class CheckboxListTile$Mate extends CheckboxListTile with WidgetMate<CheckboxListTile$Mate> {
  /// CheckboxListTile CheckboxListTile({Key? key, required bool? value, required void Function(bool?)? onChanged, Color? activeColor, Color? checkColor, bool? enabled, Color? tileColor, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, bool tristate = false, ShapeBorder? shape, OutlinedBorder? checkboxShape, Color? selectedTileColor, BorderSide? side, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
  CheckboxListTile$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {required bool? value}
    required bool? value,

    /// param: {required void Function(bool?)? onChanged}
    required ValueChanged<bool?>? onChanged,

    /// param: {Color? activeColor}
    Color? activeColor,

    /// param: {Color? checkColor}
    Color? checkColor,

    /// param: {bool? enabled}
    bool? enabled,

    /// param: {Color? tileColor}
    Color? tileColor,

    /// param: {Widget? title}
    Widget? title,

    /// param: {Widget? subtitle}
    Widget? subtitle,

    /// param: {bool isThreeLine = false}
    required bool isThreeLine,

    /// param: {bool? dense}
    bool? dense,

    /// param: {Widget? secondary}
    Widget? secondary,

    /// param: {bool selected = false}
    required bool selected,

    /// param: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform}
    required ListTileControlAffinity controlAffinity,

    /// param: {bool autofocus = false}
    required bool autofocus,

    /// param: {EdgeInsetsGeometry? contentPadding}
    EdgeInsetsGeometry? contentPadding,

    /// param: {bool tristate = false}
    required bool tristate,

    /// param: {ShapeBorder? shape}
    ShapeBorder? shape,

    /// param: {OutlinedBorder? checkboxShape}
    OutlinedBorder? checkboxShape,

    /// param: {Color? selectedTileColor}
    Color? selectedTileColor,

    /// param: {BorderSide? side}
    BorderSide? side,

    /// param: {VisualDensity? visualDensity}
    VisualDensity? visualDensity,

    /// param: {FocusNode? focusNode}
    FocusNode? focusNode,

    /// param: {void Function(bool)? onFocusChange}
    ValueChanged<bool>? onFocusChange,

    /// param: {bool? enableFeedback}
    bool? enableFeedback,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          checkColor: checkColor,
          enabled: enabled,
          tileColor: tileColor,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          secondary: secondary,
          selected: selected,
          controlAffinity: controlAffinity,
          autofocus: autofocus,
          contentPadding: contentPadding,
          tristate: tristate,
          shape: shape,
          checkboxShape: checkboxShape,
          selectedTileColor: selectedTileColor,
          side: side,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CheckboxListTile$Mate(
        key: p.getValue('key'),
        value: p.getValue('value'),
        onChanged: p.getValue('onChanged'),
        activeColor: p.getValue('activeColor'),
        checkColor: p.getValue('checkColor'),
        enabled: p.getValue('enabled'),
        tileColor: p.getValue('tileColor'),
        title: p.getValue('title'),
        subtitle: p.getValue('subtitle'),
        isThreeLine: p.getValue('isThreeLine'),
        dense: p.getValue('dense'),
        secondary: p.getValue('secondary'),
        selected: p.getValue('selected'),
        controlAffinity: p.getValue('controlAffinity'),
        autofocus: p.getValue('autofocus'),
        contentPadding: p.getValue('contentPadding'),
        tristate: p.getValue('tristate'),
        shape: p.getValue('shape'),
        checkboxShape: p.getValue('checkboxShape'),
        selectedTileColor: p.getValue('selectedTileColor'),
        side: p.getValue('side'),
        visualDensity: p.getValue('visualDensity'),
        focusNode: p.getValue('focusNode'),
        onFocusChange: p.getValue('onFocusChange'),
        enableFeedback: p.getValue('enableFeedback'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'onChanged', init: onChanged);
    mateParams.set(name: 'activeColor', init: activeColor);
    mateParams.set(name: 'checkColor', init: checkColor);
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'tileColor', init: tileColor);
    mateParams.set(name: 'title', init: title);
    mateParams.set(name: 'subtitle', init: subtitle);
    mateParams.set(name: 'isThreeLine', init: isThreeLine);
    mateParams.set(name: 'dense', init: dense);
    mateParams.set(name: 'secondary', init: secondary);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'controlAffinity', init: controlAffinity);
    mateParams.set(name: 'autofocus', init: autofocus);
    mateParams.set(name: 'contentPadding', init: contentPadding);
    mateParams.set(name: 'tristate', init: tristate);
    mateParams.set(name: 'shape', init: shape);
    mateParams.set(name: 'checkboxShape', init: checkboxShape);
    mateParams.set(name: 'selectedTileColor', init: selectedTileColor);
    mateParams.set(name: 'side', init: side);
    mateParams.set(name: 'visualDensity', init: visualDensity);
    mateParams.set(name: 'focusNode', init: focusNode);
    mateParams.set(name: 'onFocusChange', init: onFocusChange);
    mateParams.set(name: 'enableFeedback', init: enableFeedback);
  }
}
