// /// Generated by mate_flutter, please don't edit!

import 'dart:core';
import 'package:flutter/src/animation/tween.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/animation/curves.dart';
export 'dart:ui' show Color, Rect, Size;
export 'animation.dart' show Animation;
export 'curves.dart' show Curve;

/// class Tween<T extends Object?> extends Animatable<T>
class Tween$Mate<T extends Object?> extends Tween<T> with Mate<Tween$Mate> {
  /// Tween<T> Tween({T? begin, T? end})
  Tween$Mate({
    /// param: {T? begin}
    T? begin,

    /// param: {T? end}
    T? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => Tween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}

/// class ReverseTween<T extends Object?> extends Tween<T>
class ReverseTween$Mate<T extends Object?> extends ReverseTween<T> with Mate<ReverseTween$Mate> {
  /// ReverseTween<T> ReverseTween(Tween<T> parent)
  ReverseTween$Mate(

      /// param: Tween<T> parent
      Tween<T> parent)
      : super(parent) {
    mateParams = Params(
      init: this,
      builder: (p) => ReverseTween$Mate(p.getValue('parent')),
    );
    mateParams.set(name: 'parent', init: parent);
  }
}

/// class ColorTween extends Tween<Color?>
class ColorTween$Mate extends ColorTween with Mate<ColorTween$Mate> {
  /// ColorTween ColorTween({Color? begin, Color? end})
  ColorTween$Mate({
    /// param: {Color? begin}
    Color? begin,

    /// param: {Color? end}
    Color? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ColorTween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}

/// class SizeTween extends Tween<Size?>
class SizeTween$Mate extends SizeTween with Mate<SizeTween$Mate> {
  /// SizeTween SizeTween({Size? begin, Size? end})
  SizeTween$Mate({
    /// param: {Size? begin}
    Size? begin,

    /// param: {Size? end}
    Size? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SizeTween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}

/// class RectTween extends Tween<Rect?>
class RectTween$Mate extends RectTween with Mate<RectTween$Mate> {
  /// RectTween RectTween({Rect? begin, Rect? end})
  RectTween$Mate({
    /// param: {Rect? begin}
    Rect? begin,

    /// param: {Rect? end}
    Rect? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => RectTween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}

/// class IntTween extends Tween<int>
class IntTween$Mate extends IntTween with Mate<IntTween$Mate> {
  /// IntTween IntTween({int? begin, int? end})
  IntTween$Mate({
    /// param: {int? begin}
    int? begin,

    /// param: {int? end}
    int? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => IntTween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}

/// class StepTween extends Tween<int>
class StepTween$Mate extends StepTween with Mate<StepTween$Mate> {
  /// StepTween StepTween({int? begin, int? end})
  StepTween$Mate({
    /// param: {int? begin}
    int? begin,

    /// param: {int? end}
    int? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => StepTween$Mate(
        begin: p.getValue('begin'),
        end: p.getValue('end'),
      ),
    );
    mateParams.set(name: 'begin', init: begin);
    mateParams.set(name: 'end', init: end);
  }
}

/// class ConstantTween<T> extends Tween<T>
class ConstantTween$Mate<T> extends ConstantTween<T> with Mate<ConstantTween$Mate> {
  /// ConstantTween<T> ConstantTween(T value)
  ConstantTween$Mate(

      /// param: T value
      T value)
      : super(value) {
    mateParams = Params(
      init: this,
      builder: (p) => ConstantTween$Mate(p.getValue('value')),
    );
    mateParams.set(name: 'value', init: value);
  }
}

/// class CurveTween extends Animatable<double>
class CurveTween$Mate extends CurveTween with Mate<CurveTween$Mate> {
  /// CurveTween CurveTween({required Curve curve})
  CurveTween$Mate(
      {
      /// param: {required Curve curve}
      required Curve curve})
      : super(curve: curve) {
    mateParams = Params(
      init: this,
      builder: (p) => CurveTween$Mate(curve: p.getValue('curve')),
    );
    mateParams.set(name: 'curve', init: curve);
  }
}
