// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/animation/animation_controller.dart';
import 'dart:core';
import 'package:flutter/src/scheduler/ticker.dart';
import 'package:note/mate.dart';
export 'package:flutter/physics.dart' show Simulation, SpringDescription;
export 'package:flutter/scheduler.dart' show TickerFuture, TickerProvider;
export 'animation.dart' show Animation, AnimationStatus;
export 'curves.dart' show Curve;

/// class AnimationController extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class AnimationController$Mate extends AnimationController with Mate<AnimationController$Mate> {
  /// AnimationController AnimationController({double? value, Duration? duration, Duration? reverseDuration, String? debugLabel, double lowerBound = 0.0, double upperBound = 1.0, AnimationBehavior animationBehavior = AnimationBehavior.normal, required TickerProvider vsync})
  AnimationController$Mate({
    /// param: {double? value}
    double? value,

    /// param: {Duration? duration}
    Duration? duration,

    /// param: {Duration? reverseDuration}
    Duration? reverseDuration,

    /// param: {String? debugLabel}
    String? debugLabel,

    /// param: {double lowerBound = 0.0}
    required double lowerBound,

    /// param: {double upperBound = 1.0}
    required double upperBound,

    /// param: {AnimationBehavior animationBehavior = AnimationBehavior.normal}
    required AnimationBehavior animationBehavior,

    /// param: {required TickerProvider vsync}
    required TickerProvider vsync,
  }) : super(
          value: value,
          duration: duration,
          reverseDuration: reverseDuration,
          debugLabel: debugLabel,
          lowerBound: lowerBound,
          upperBound: upperBound,
          animationBehavior: animationBehavior,
          vsync: vsync,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnimationController$Mate(
        value: p.getValue('value'),
        duration: p.getValue('duration'),
        reverseDuration: p.getValue('reverseDuration'),
        debugLabel: p.getValue('debugLabel'),
        lowerBound: p.getValue('lowerBound'),
        upperBound: p.getValue('upperBound'),
        animationBehavior: p.getValue('animationBehavior'),
        vsync: p.getValue('vsync'),
      ),
    );
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'duration', init: duration);
    mateParams.set(name: 'reverseDuration', init: reverseDuration);
    mateParams.set(name: 'debugLabel', init: debugLabel);
    mateParams.set(name: 'lowerBound', init: lowerBound);
    mateParams.set(name: 'upperBound', init: upperBound);
    mateParams.set(name: 'animationBehavior', init: animationBehavior);
    mateParams.set(name: 'vsync', init: vsync);
  }

  /// AnimationController AnimationController.unbounded({double value = 0.0, Duration? duration, Duration? reverseDuration, String? debugLabel, required TickerProvider vsync, AnimationBehavior animationBehavior = AnimationBehavior.preserve})
  AnimationController$Mate.unbounded({
    /// param: {double value = 0.0}
    required double value,

    /// param: {Duration? duration}
    Duration? duration,

    /// param: {Duration? reverseDuration}
    Duration? reverseDuration,

    /// param: {String? debugLabel}
    String? debugLabel,

    /// param: {required TickerProvider vsync}
    required TickerProvider vsync,

    /// param: {AnimationBehavior animationBehavior = AnimationBehavior.preserve}
    required AnimationBehavior animationBehavior,
  }) : super.unbounded(
          value: value,
          duration: duration,
          reverseDuration: reverseDuration,
          debugLabel: debugLabel,
          vsync: vsync,
          animationBehavior: animationBehavior,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnimationController$Mate.unbounded(
        value: p.getValue('value'),
        duration: p.getValue('duration'),
        reverseDuration: p.getValue('reverseDuration'),
        debugLabel: p.getValue('debugLabel'),
        vsync: p.getValue('vsync'),
        animationBehavior: p.getValue('animationBehavior'),
      ),
    );
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'duration', init: duration);
    mateParams.set(name: 'reverseDuration', init: reverseDuration);
    mateParams.set(name: 'debugLabel', init: debugLabel);
    mateParams.set(name: 'vsync', init: vsync);
    mateParams.set(name: 'animationBehavior', init: animationBehavior);
  }
}
