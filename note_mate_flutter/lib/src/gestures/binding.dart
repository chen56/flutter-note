// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/gestures/binding.dart';
import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/gestures/events.dart';
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:note/mate.dart';
export 'dart:ui' show Offset;
export 'package:flutter/foundation.dart' show DiagnosticsNode, InformationCollector;
export 'arena.dart' show GestureArenaManager;
export 'events.dart' show PointerEvent;
export 'hit_test.dart' show HitTestEntry, HitTestResult, HitTestTarget;
export 'pointer_router.dart' show PointerRouter;
export 'pointer_signal_resolver.dart' show PointerSignalResolver;

/// class FlutterErrorDetailsForPointerEventDispatcher extends FlutterErrorDetails
class FlutterErrorDetailsForPointerEventDispatcher$Mate extends FlutterErrorDetailsForPointerEventDispatcher
    with Mate<FlutterErrorDetailsForPointerEventDispatcher$Mate> {
  /// FlutterErrorDetailsForPointerEventDispatcher FlutterErrorDetailsForPointerEventDispatcher({required Object exception, StackTrace? stack, String? library = 'Flutter framework', DiagnosticsNode? context, PointerEvent? event, HitTestEntry<HitTestTarget>? hitTestEntry, Iterable<DiagnosticsNode> Function()? informationCollector, bool silent = false})
  FlutterErrorDetailsForPointerEventDispatcher$Mate({
    /// param: {required Object exception}
    required Object exception,

    /// param: {StackTrace? stack}
    StackTrace? stack,

    /// param: {String? library = 'Flutter framework'}
    String? library,

    /// param: {DiagnosticsNode? context}
    DiagnosticsNode? context,

    /// param: {PointerEvent? event}
    PointerEvent? event,

    /// param: {HitTestEntry<HitTestTarget>? hitTestEntry}
    HitTestEntry<HitTestTarget>? hitTestEntry,

    /// param: {Iterable<DiagnosticsNode> Function()? informationCollector}
    InformationCollector? informationCollector,

    /// param: {bool silent = false}
    required bool silent,
  }) : super(
          exception: exception,
          stack: stack,
          library: library,
          context: context,
          event: event,
          hitTestEntry: hitTestEntry,
          informationCollector: informationCollector,
          silent: silent,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => FlutterErrorDetailsForPointerEventDispatcher$Mate(
        exception: p.getValue('exception'),
        stack: p.getValue('stack'),
        library: p.getValue('library'),
        context: p.getValue('context'),
        event: p.getValue('event'),
        hitTestEntry: p.getValue('hitTestEntry'),
        informationCollector: p.getValue('informationCollector'),
        silent: p.getValue('silent'),
      ),
    );
    mateParams.set(name: 'exception', init: exception);
    mateParams.set(name: 'stack', init: stack);
    mateParams.set(name: 'library', init: library);
    mateParams.set(name: 'context', init: context);
    mateParams.set(name: 'event', init: event);
    mateParams.set(name: 'hitTestEntry', init: hitTestEntry);
    mateParams.set(name: 'informationCollector', init: informationCollector);
    mateParams.set(name: 'silent', init: silent);
  }
}
