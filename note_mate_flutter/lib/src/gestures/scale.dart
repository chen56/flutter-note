// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/scale.dart';
import 'dart:ui';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class ScaleStartDetails
class ScaleStartDetails$Mate extends ScaleStartDetails with Mate<ScaleStartDetails$Mate> {
  /// ScaleStartDetails ScaleStartDetails({Offset focalPoint = Offset.zero, Offset? localFocalPoint, int pointerCount = 0})
  ScaleStartDetails$Mate({
    /// optionalParameters: {Offset focalPoint = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset focalPoint,

    /// optionalParameters: {Offset? localFocalPoint} , hasDefaultValue:false, defaultValueCode:null
    Offset? localFocalPoint,

    /// optionalParameters: {int pointerCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int pointerCount,
  }) : super(
          focalPoint: focalPoint,
          localFocalPoint: localFocalPoint,
          pointerCount: pointerCount,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaleStartDetails$Mate(
        focalPoint: p.getValue('focalPoint'),
        localFocalPoint: p.getValue('localFocalPoint'),
        pointerCount: p.getValue('pointerCount'),
      ),
    );
    mateParams.set(name: 'focalPoint', init: focalPoint);
    mateParams.set(name: 'localFocalPoint', init: localFocalPoint);
    mateParams.set(name: 'pointerCount', init: pointerCount);
  }
}

/// class ScaleUpdateDetails
class ScaleUpdateDetails$Mate extends ScaleUpdateDetails with Mate<ScaleUpdateDetails$Mate> {
  /// ScaleUpdateDetails ScaleUpdateDetails({Offset focalPoint = Offset.zero, Offset? localFocalPoint, double scale = 1.0, double horizontalScale = 1.0, double verticalScale = 1.0, double rotation = 0.0, int pointerCount = 0, Offset focalPointDelta = Offset.zero})
  ScaleUpdateDetails$Mate({
    /// optionalParameters: {Offset focalPoint = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset focalPoint,

    /// optionalParameters: {Offset? localFocalPoint} , hasDefaultValue:false, defaultValueCode:null
    Offset? localFocalPoint,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {double horizontalScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double horizontalScale,

    /// optionalParameters: {double verticalScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double verticalScale,

    /// optionalParameters: {double rotation = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double rotation,

    /// optionalParameters: {int pointerCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int pointerCount,

    /// optionalParameters: {Offset focalPointDelta = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset focalPointDelta,
  }) : super(
          focalPoint: focalPoint,
          localFocalPoint: localFocalPoint,
          scale: scale,
          horizontalScale: horizontalScale,
          verticalScale: verticalScale,
          rotation: rotation,
          pointerCount: pointerCount,
          focalPointDelta: focalPointDelta,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaleUpdateDetails$Mate(
        focalPoint: p.getValue('focalPoint'),
        localFocalPoint: p.getValue('localFocalPoint'),
        scale: p.getValue('scale'),
        horizontalScale: p.getValue('horizontalScale'),
        verticalScale: p.getValue('verticalScale'),
        rotation: p.getValue('rotation'),
        pointerCount: p.getValue('pointerCount'),
        focalPointDelta: p.getValue('focalPointDelta'),
      ),
    );
    mateParams.set(name: 'focalPoint', init: focalPoint);
    mateParams.set(name: 'localFocalPoint', init: localFocalPoint);
    mateParams.set(name: 'scale', init: scale);
    mateParams.set(name: 'horizontalScale', init: horizontalScale);
    mateParams.set(name: 'verticalScale', init: verticalScale);
    mateParams.set(name: 'rotation', init: rotation);
    mateParams.set(name: 'pointerCount', init: pointerCount);
    mateParams.set(name: 'focalPointDelta', init: focalPointDelta);
  }
}

/// class ScaleEndDetails
class ScaleEndDetails$Mate extends ScaleEndDetails with Mate<ScaleEndDetails$Mate> {
  /// ScaleEndDetails ScaleEndDetails({Velocity velocity = Velocity.zero, double scaleVelocity = 0, int pointerCount = 0})
  ScaleEndDetails$Mate({
    /// optionalParameters: {Velocity velocity = Velocity.zero} , hasDefaultValue:true, defaultValueCode:Velocity.zero
    required Velocity velocity,

    /// optionalParameters: {double scaleVelocity = 0} , hasDefaultValue:true, defaultValueCode:0
    required double scaleVelocity,

    /// optionalParameters: {int pointerCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int pointerCount,
  }) : super(
          velocity: velocity,
          scaleVelocity: scaleVelocity,
          pointerCount: pointerCount,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaleEndDetails$Mate(
        velocity: p.getValue('velocity'),
        scaleVelocity: p.getValue('scaleVelocity'),
        pointerCount: p.getValue('pointerCount'),
      ),
    );
    mateParams.set(name: 'velocity', init: velocity);
    mateParams.set(name: 'scaleVelocity', init: scaleVelocity);
    mateParams.set(name: 'pointerCount', init: pointerCount);
  }
}

/// class ScaleGestureRecognizer extends OneSequenceGestureRecognizer
class ScaleGestureRecognizer$Mate extends ScaleGestureRecognizer with Mate<ScaleGestureRecognizer$Mate> {
  /// ScaleGestureRecognizer ScaleGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter, DragStartBehavior dragStartBehavior = DragStartBehavior.down, bool trackpadScrollCausesScale = false, Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor})
  ScaleGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
    AllowedButtonsFilter? allowedButtonsFilter,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.down} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.down
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , hasDefaultValue:true, defaultValueCode:false
    required bool trackpadScrollCausesScale,

    /// optionalParameters: {Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor} , hasDefaultValue:true, defaultValueCode:kDefaultTrackpadScrollToScaleFactor
    required Offset trackpadScrollToScaleFactor,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
          dragStartBehavior: dragStartBehavior,
          trackpadScrollCausesScale: trackpadScrollCausesScale,
          trackpadScrollToScaleFactor: trackpadScrollToScaleFactor,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => ScaleGestureRecognizer$Mate(
        debugOwner: p.getValue('debugOwner'),
        supportedDevices: p.getValue('supportedDevices'),
        allowedButtonsFilter: p.getValue('allowedButtonsFilter'),
        dragStartBehavior: p.getValue('dragStartBehavior'),
        trackpadScrollCausesScale: p.getValue('trackpadScrollCausesScale'),
        trackpadScrollToScaleFactor: p.getValue('trackpadScrollToScaleFactor'),
      ),
    );
    mateParams.set(name: 'debugOwner', init: debugOwner);
    mateParams.set(name: 'supportedDevices', init: supportedDevices);
    mateParams.set(name: 'allowedButtonsFilter', init: allowedButtonsFilter);
    mateParams.set(name: 'dragStartBehavior', init: dragStartBehavior);
    mateParams.set(name: 'trackpadScrollCausesScale', init: trackpadScrollCausesScale);
    mateParams.set(name: 'trackpadScrollToScaleFactor', init: trackpadScrollToScaleFactor);
  }
}
