// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:25.651110

import 'package:flutter/src/gestures/monodrag.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
export 'dart:ui' show PointerDeviceKind;
export 'package:flutter/foundation.dart' show DiagnosticPropertiesBuilder;
export 'drag.dart' show DragEndDetails, DragUpdateDetails;
export 'drag_details.dart'
    show
        DragDownDetails,
        DragStartDetails,
        DragUpdateDetails,
        GestureDragDownCallback,
        GestureDragStartCallback,
        GestureDragUpdateCallback;
export 'events.dart' show PointerDownEvent, PointerEvent, PointerPanZoomStartEvent;
export 'recognizer.dart' show DragStartBehavior;
export 'velocity_tracker.dart' show VelocityEstimate, VelocityTracker;

/// abstract class DragGestureRecognizer extends OneSequenceGestureRecognizer
abstract class DragGestureRecognizer$Mate extends DragGestureRecognizer {
  /// DragGestureRecognizer DragGestureRecognizer({Object? debugOwner, DragStartBehavior dragStartBehavior = DragStartBehavior.start, VelocityTracker Function(PointerEvent) velocityTrackerBuilder = _defaultBuilder, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  DragGestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {DragStartBehavior dragStartBehavior = DragStartBehavior.start}
    required DragStartBehavior dragStartBehavior,

    /// param: {VelocityTracker Function(PointerEvent) velocityTrackerBuilder = _defaultBuilder}
    required GestureVelocityTrackerBuilder velocityTrackerBuilder,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          dragStartBehavior: dragStartBehavior,
          velocityTrackerBuilder: velocityTrackerBuilder,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}

/// class VerticalDragGestureRecognizer extends DragGestureRecognizer
class VerticalDragGestureRecognizer$Mate extends VerticalDragGestureRecognizer {
  /// VerticalDragGestureRecognizer VerticalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  VerticalDragGestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}

/// class HorizontalDragGestureRecognizer extends DragGestureRecognizer
class HorizontalDragGestureRecognizer$Mate extends HorizontalDragGestureRecognizer {
  /// HorizontalDragGestureRecognizer HorizontalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  HorizontalDragGestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}

/// class PanGestureRecognizer extends DragGestureRecognizer
class PanGestureRecognizer$Mate extends PanGestureRecognizer {
  /// PanGestureRecognizer PanGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  PanGestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}
