// /// Generated by mate_flutter, please don't edit! Created time: 2023-03-11 13:17:25.658150

import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:core';
import 'dart:ui';
export 'dart:ui' show Offset, PointerDeviceKind;
export 'package:flutter/foundation.dart' show DiagnosticPropertiesBuilder;
export 'package:vector_math/vector_math_64.dart' show Matrix4;
export 'arena.dart' show GestureDisposition;
export 'events.dart' show PointerDownEvent, PointerEvent, PointerPanZoomStartEvent;
export 'gesture_settings.dart' show DeviceGestureSettings;
export 'team.dart' show GestureArenaTeam;

/// abstract class GestureRecognizer extends GestureArenaMember with DiagnosticableTreeMixin
abstract class GestureRecognizer$Mate extends GestureRecognizer {
  /// GestureRecognizer GestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  GestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}

/// abstract class OneSequenceGestureRecognizer extends GestureRecognizer
abstract class OneSequenceGestureRecognizer$Mate extends OneSequenceGestureRecognizer {
  /// OneSequenceGestureRecognizer OneSequenceGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  OneSequenceGestureRecognizer$Mate({
    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}

/// abstract class PrimaryPointerGestureRecognizer extends OneSequenceGestureRecognizer
abstract class PrimaryPointerGestureRecognizer$Mate extends PrimaryPointerGestureRecognizer {
  /// PrimaryPointerGestureRecognizer PrimaryPointerGestureRecognizer({Duration? deadline, double? preAcceptSlopTolerance = kTouchSlop, double? postAcceptSlopTolerance = kTouchSlop, Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  PrimaryPointerGestureRecognizer$Mate({
    /// param: {Duration? deadline}
    Duration? deadline,

    /// param: {double? preAcceptSlopTolerance = kTouchSlop}
    double? preAcceptSlopTolerance,

    /// param: {double? postAcceptSlopTolerance = kTouchSlop}
    double? postAcceptSlopTolerance,

    /// param: {Object? debugOwner}
    Object? debugOwner,

    /// param: {Set<PointerDeviceKind>? supportedDevices}
    Set<PointerDeviceKind>? supportedDevices,

    /// param: {bool Function(int)? allowedButtonsFilter}
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          deadline: deadline,
          preAcceptSlopTolerance: preAcceptSlopTolerance,
          postAcceptSlopTolerance: postAcceptSlopTolerance,
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {}
}

/// class OffsetPair
class OffsetPair$Mate extends OffsetPair {
  /// OffsetPair OffsetPair({required Offset local, required Offset global})
  OffsetPair$Mate({
    /// param: {required Offset local}
    required Offset local,

    /// param: {required Offset global}
    required Offset global,
  }) : super(
          local: local,
          global: global,
        ) {}
}
