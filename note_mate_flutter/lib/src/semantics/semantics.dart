// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/semantics/semantics.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/foundation/key.dart';

/// class SemanticsTag
class SemanticsTag$Mate extends SemanticsTag with Mate<SemanticsTag$Mate> {
  /// SemanticsTag SemanticsTag(String name)
  SemanticsTag$Mate(

      /// requiredParameters: String name
      String name)
      : super(name) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsTag$Mate(p.getValue('name')),
    );
    mateParams.set(name: 'name', init: name);
  }
}

/// class CustomSemanticsAction
class CustomSemanticsAction$Mate extends CustomSemanticsAction with Mate<CustomSemanticsAction$Mate> {
  /// CustomSemanticsAction CustomSemanticsAction({required String label})
  CustomSemanticsAction$Mate(
      {
      /// optionalParameters: {required String label} , hasDefaultValue:false, defaultValueCode:null
      required String label})
      : super(label: label) {
    mateParams = Params(
      init: this,
      builder: (p) => CustomSemanticsAction$Mate(label: p.getValue('label')),
    );
    mateParams.set(name: 'label', init: label);
  }

  /// CustomSemanticsAction CustomSemanticsAction.overridingAction({required String hint, required SemanticsAction action})
  CustomSemanticsAction$Mate.overridingAction({
    /// optionalParameters: {required String hint} , hasDefaultValue:false, defaultValueCode:null
    required String hint,

    /// optionalParameters: {required SemanticsAction action} , hasDefaultValue:false, defaultValueCode:null
    required SemanticsAction action,
  }) : super.overridingAction(
          hint: hint,
          action: action,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CustomSemanticsAction$Mate.overridingAction(
        hint: p.getValue('hint'),
        action: p.getValue('action'),
      ),
    );
    mateParams.set(name: 'hint', init: hint);
    mateParams.set(name: 'action', init: action);
  }
}

/// class AttributedString
class AttributedString$Mate extends AttributedString with Mate<AttributedString$Mate> {
  /// AttributedString AttributedString(String string, {List<StringAttribute> attributes = const <StringAttribute>[]})
  AttributedString$Mate(
    /// requiredParameters: String string
    String string, {
    /// optionalParameters: {List<StringAttribute> attributes = const <StringAttribute>[]} , hasDefaultValue:true, defaultValueCode:const <StringAttribute>[]
    required List<StringAttribute> attributes,
  }) : super(
          string,
          attributes: attributes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AttributedString$Mate(
        p.getValue('string'),
        attributes: p.getValue('attributes'),
      ),
    );
    mateParams.set(name: 'string', init: string);
    mateParams.set(name: 'attributes', init: attributes);
  }
}

/// class AttributedStringProperty extends DiagnosticsProperty<AttributedString>
class AttributedStringProperty$Mate extends AttributedStringProperty with Mate<AttributedStringProperty$Mate> {
  /// AttributedStringProperty AttributedStringProperty(String name, AttributedString? value, {bool showName = true, bool showWhenEmpty = false, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
  AttributedStringProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: AttributedString? value
    AttributedString? value, {
    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {bool showWhenEmpty = false} , hasDefaultValue:true, defaultValueCode:false
    required bool showWhenEmpty,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,

    /// optionalParameters: {String? description} , hasDefaultValue:false, defaultValueCode:null
    String? description,
  }) : super(
          name,
          value,
          showName: showName,
          showWhenEmpty: showWhenEmpty,
          defaultValue: defaultValue,
          level: level,
          description: description,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AttributedStringProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        showName: p.getValue('showName'),
        showWhenEmpty: p.getValue('showWhenEmpty'),
        defaultValue: p.getValue('defaultValue'),
        level: p.getValue('level'),
        description: p.getValue('description'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showWhenEmpty', init: showWhenEmpty);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'level', init: level);
    mateParams.set(name: 'description', init: description);
  }
}

/// class SemanticsData with Diagnosticable
class SemanticsData$Mate extends SemanticsData with Mate<SemanticsData$Mate> {
  /// SemanticsData SemanticsData({required int flags, required int actions, required AttributedString attributedLabel, required AttributedString attributedValue, required AttributedString attributedIncreasedValue, required AttributedString attributedDecreasedValue, required AttributedString attributedHint, required String tooltip, required TextDirection? textDirection, required Rect rect, required double elevation, required double thickness, required TextSelection? textSelection, required int? scrollIndex, required int? scrollChildCount, required double? scrollPosition, required double? scrollExtentMax, required double? scrollExtentMin, required int? platformViewId, required int? maxValueLength, required int? currentValueLength, Set<SemanticsTag>? tags, Matrix4? transform, List<int>? customSemanticsActionIds})
  SemanticsData$Mate({
    /// optionalParameters: {required int flags} , hasDefaultValue:false, defaultValueCode:null
    required int flags,

    /// optionalParameters: {required int actions} , hasDefaultValue:false, defaultValueCode:null
    required int actions,

    /// optionalParameters: {required AttributedString attributedLabel} , hasDefaultValue:false, defaultValueCode:null
    required AttributedString attributedLabel,

    /// optionalParameters: {required AttributedString attributedValue} , hasDefaultValue:false, defaultValueCode:null
    required AttributedString attributedValue,

    /// optionalParameters: {required AttributedString attributedIncreasedValue} , hasDefaultValue:false, defaultValueCode:null
    required AttributedString attributedIncreasedValue,

    /// optionalParameters: {required AttributedString attributedDecreasedValue} , hasDefaultValue:false, defaultValueCode:null
    required AttributedString attributedDecreasedValue,

    /// optionalParameters: {required AttributedString attributedHint} , hasDefaultValue:false, defaultValueCode:null
    required AttributedString attributedHint,

    /// optionalParameters: {required String tooltip} , hasDefaultValue:false, defaultValueCode:null
    required String tooltip,

    /// optionalParameters: {required TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection? textDirection,

    /// optionalParameters: {required Rect rect} , hasDefaultValue:false, defaultValueCode:null
    required Rect rect,

    /// optionalParameters: {required double elevation} , hasDefaultValue:false, defaultValueCode:null
    required double elevation,

    /// optionalParameters: {required double thickness} , hasDefaultValue:false, defaultValueCode:null
    required double thickness,

    /// optionalParameters: {required TextSelection? textSelection} , hasDefaultValue:false, defaultValueCode:null
    required TextSelection? textSelection,

    /// optionalParameters: {required int? scrollIndex} , hasDefaultValue:false, defaultValueCode:null
    required int? scrollIndex,

    /// optionalParameters: {required int? scrollChildCount} , hasDefaultValue:false, defaultValueCode:null
    required int? scrollChildCount,

    /// optionalParameters: {required double? scrollPosition} , hasDefaultValue:false, defaultValueCode:null
    required double? scrollPosition,

    /// optionalParameters: {required double? scrollExtentMax} , hasDefaultValue:false, defaultValueCode:null
    required double? scrollExtentMax,

    /// optionalParameters: {required double? scrollExtentMin} , hasDefaultValue:false, defaultValueCode:null
    required double? scrollExtentMin,

    /// optionalParameters: {required int? platformViewId} , hasDefaultValue:false, defaultValueCode:null
    required int? platformViewId,

    /// optionalParameters: {required int? maxValueLength} , hasDefaultValue:false, defaultValueCode:null
    required int? maxValueLength,

    /// optionalParameters: {required int? currentValueLength} , hasDefaultValue:false, defaultValueCode:null
    required int? currentValueLength,

    /// optionalParameters: {Set<SemanticsTag>? tags} , hasDefaultValue:false, defaultValueCode:null
    Set<SemanticsTag>? tags,

    /// optionalParameters: {Matrix4? transform} , hasDefaultValue:false, defaultValueCode:null
    Matrix4? transform,

    /// optionalParameters: {List<int>? customSemanticsActionIds} , hasDefaultValue:false, defaultValueCode:null
    List<int>? customSemanticsActionIds,
  }) : super(
          flags: flags,
          actions: actions,
          attributedLabel: attributedLabel,
          attributedValue: attributedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          attributedHint: attributedHint,
          tooltip: tooltip,
          textDirection: textDirection,
          rect: rect,
          elevation: elevation,
          thickness: thickness,
          textSelection: textSelection,
          scrollIndex: scrollIndex,
          scrollChildCount: scrollChildCount,
          scrollPosition: scrollPosition,
          scrollExtentMax: scrollExtentMax,
          scrollExtentMin: scrollExtentMin,
          platformViewId: platformViewId,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          tags: tags,
          transform: transform,
          customSemanticsActionIds: customSemanticsActionIds,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsData$Mate(
        flags: p.getValue('flags'),
        actions: p.getValue('actions'),
        attributedLabel: p.getValue('attributedLabel'),
        attributedValue: p.getValue('attributedValue'),
        attributedIncreasedValue: p.getValue('attributedIncreasedValue'),
        attributedDecreasedValue: p.getValue('attributedDecreasedValue'),
        attributedHint: p.getValue('attributedHint'),
        tooltip: p.getValue('tooltip'),
        textDirection: p.getValue('textDirection'),
        rect: p.getValue('rect'),
        elevation: p.getValue('elevation'),
        thickness: p.getValue('thickness'),
        textSelection: p.getValue('textSelection'),
        scrollIndex: p.getValue('scrollIndex'),
        scrollChildCount: p.getValue('scrollChildCount'),
        scrollPosition: p.getValue('scrollPosition'),
        scrollExtentMax: p.getValue('scrollExtentMax'),
        scrollExtentMin: p.getValue('scrollExtentMin'),
        platformViewId: p.getValue('platformViewId'),
        maxValueLength: p.getValue('maxValueLength'),
        currentValueLength: p.getValue('currentValueLength'),
        tags: p.getValue('tags'),
        transform: p.getValue('transform'),
        customSemanticsActionIds: p.getValue('customSemanticsActionIds'),
      ),
    );
    mateParams.set(name: 'flags', init: flags);
    mateParams.set(name: 'actions', init: actions);
    mateParams.set(name: 'attributedLabel', init: attributedLabel);
    mateParams.set(name: 'attributedValue', init: attributedValue);
    mateParams.set(name: 'attributedIncreasedValue', init: attributedIncreasedValue);
    mateParams.set(name: 'attributedDecreasedValue', init: attributedDecreasedValue);
    mateParams.set(name: 'attributedHint', init: attributedHint);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'rect', init: rect);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'thickness', init: thickness);
    mateParams.set(name: 'textSelection', init: textSelection);
    mateParams.set(name: 'scrollIndex', init: scrollIndex);
    mateParams.set(name: 'scrollChildCount', init: scrollChildCount);
    mateParams.set(name: 'scrollPosition', init: scrollPosition);
    mateParams.set(name: 'scrollExtentMax', init: scrollExtentMax);
    mateParams.set(name: 'scrollExtentMin', init: scrollExtentMin);
    mateParams.set(name: 'platformViewId', init: platformViewId);
    mateParams.set(name: 'maxValueLength', init: maxValueLength);
    mateParams.set(name: 'currentValueLength', init: currentValueLength);
    mateParams.set(name: 'tags', init: tags);
    mateParams.set(name: 'transform', init: transform);
    mateParams.set(name: 'customSemanticsActionIds', init: customSemanticsActionIds);
  }
}

/// class SemanticsHintOverrides extends DiagnosticableTree
class SemanticsHintOverrides$Mate extends SemanticsHintOverrides with Mate<SemanticsHintOverrides$Mate> {
  /// SemanticsHintOverrides SemanticsHintOverrides({String? onTapHint, String? onLongPressHint})
  SemanticsHintOverrides$Mate({
    /// optionalParameters: {String? onTapHint} , hasDefaultValue:false, defaultValueCode:null
    String? onTapHint,

    /// optionalParameters: {String? onLongPressHint} , hasDefaultValue:false, defaultValueCode:null
    String? onLongPressHint,
  }) : super(
          onTapHint: onTapHint,
          onLongPressHint: onLongPressHint,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsHintOverrides$Mate(
        onTapHint: p.getValue('onTapHint'),
        onLongPressHint: p.getValue('onLongPressHint'),
      ),
    );
    mateParams.set(name: 'onTapHint', init: onTapHint);
    mateParams.set(name: 'onLongPressHint', init: onLongPressHint);
  }
}

/// class SemanticsProperties extends DiagnosticableTree
class SemanticsProperties$Mate extends SemanticsProperties with Mate<SemanticsProperties$Mate> {
  /// SemanticsProperties SemanticsProperties({bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? link, bool? header, bool? textField, bool? slider, bool? keyboardKey, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? hidden, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? image, bool? liveRegion, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, String? tooltip, AttributedString? attributedHint, SemanticsHintOverrides? hintOverrides, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(bool)? onMoveCursorForwardByWord, void Function(bool)? onMoveCursorBackwardByWord, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, void Function()? onDismiss, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  SemanticsProperties$Mate({
    /// optionalParameters: {bool? enabled} , hasDefaultValue:false, defaultValueCode:null
    bool? enabled,

    /// optionalParameters: {bool? checked} , hasDefaultValue:false, defaultValueCode:null
    bool? checked,

    /// optionalParameters: {bool? mixed} , hasDefaultValue:false, defaultValueCode:null
    bool? mixed,

    /// optionalParameters: {bool? selected} , hasDefaultValue:false, defaultValueCode:null
    bool? selected,

    /// optionalParameters: {bool? toggled} , hasDefaultValue:false, defaultValueCode:null
    bool? toggled,

    /// optionalParameters: {bool? button} , hasDefaultValue:false, defaultValueCode:null
    bool? button,

    /// optionalParameters: {bool? link} , hasDefaultValue:false, defaultValueCode:null
    bool? link,

    /// optionalParameters: {bool? header} , hasDefaultValue:false, defaultValueCode:null
    bool? header,

    /// optionalParameters: {bool? textField} , hasDefaultValue:false, defaultValueCode:null
    bool? textField,

    /// optionalParameters: {bool? slider} , hasDefaultValue:false, defaultValueCode:null
    bool? slider,

    /// optionalParameters: {bool? keyboardKey} , hasDefaultValue:false, defaultValueCode:null
    bool? keyboardKey,

    /// optionalParameters: {bool? readOnly} , hasDefaultValue:false, defaultValueCode:null
    bool? readOnly,

    /// optionalParameters: {bool? focusable} , hasDefaultValue:false, defaultValueCode:null
    bool? focusable,

    /// optionalParameters: {bool? focused} , hasDefaultValue:false, defaultValueCode:null
    bool? focused,

    /// optionalParameters: {bool? inMutuallyExclusiveGroup} , hasDefaultValue:false, defaultValueCode:null
    bool? inMutuallyExclusiveGroup,

    /// optionalParameters: {bool? hidden} , hasDefaultValue:false, defaultValueCode:null
    bool? hidden,

    /// optionalParameters: {bool? obscured} , hasDefaultValue:false, defaultValueCode:null
    bool? obscured,

    /// optionalParameters: {bool? multiline} , hasDefaultValue:false, defaultValueCode:null
    bool? multiline,

    /// optionalParameters: {bool? scopesRoute} , hasDefaultValue:false, defaultValueCode:null
    bool? scopesRoute,

    /// optionalParameters: {bool? namesRoute} , hasDefaultValue:false, defaultValueCode:null
    bool? namesRoute,

    /// optionalParameters: {bool? image} , hasDefaultValue:false, defaultValueCode:null
    bool? image,

    /// optionalParameters: {bool? liveRegion} , hasDefaultValue:false, defaultValueCode:null
    bool? liveRegion,

    /// optionalParameters: {int? maxValueLength} , hasDefaultValue:false, defaultValueCode:null
    int? maxValueLength,

    /// optionalParameters: {int? currentValueLength} , hasDefaultValue:false, defaultValueCode:null
    int? currentValueLength,

    /// optionalParameters: {String? label} , hasDefaultValue:false, defaultValueCode:null
    String? label,

    /// optionalParameters: {AttributedString? attributedLabel} , hasDefaultValue:false, defaultValueCode:null
    AttributedString? attributedLabel,

    /// optionalParameters: {String? value} , hasDefaultValue:false, defaultValueCode:null
    String? value,

    /// optionalParameters: {AttributedString? attributedValue} , hasDefaultValue:false, defaultValueCode:null
    AttributedString? attributedValue,

    /// optionalParameters: {String? increasedValue} , hasDefaultValue:false, defaultValueCode:null
    String? increasedValue,

    /// optionalParameters: {AttributedString? attributedIncreasedValue} , hasDefaultValue:false, defaultValueCode:null
    AttributedString? attributedIncreasedValue,

    /// optionalParameters: {String? decreasedValue} , hasDefaultValue:false, defaultValueCode:null
    String? decreasedValue,

    /// optionalParameters: {AttributedString? attributedDecreasedValue} , hasDefaultValue:false, defaultValueCode:null
    AttributedString? attributedDecreasedValue,

    /// optionalParameters: {String? hint} , hasDefaultValue:false, defaultValueCode:null
    String? hint,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {AttributedString? attributedHint} , hasDefaultValue:false, defaultValueCode:null
    AttributedString? attributedHint,

    /// optionalParameters: {SemanticsHintOverrides? hintOverrides} , hasDefaultValue:false, defaultValueCode:null
    SemanticsHintOverrides? hintOverrides,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {SemanticsSortKey? sortKey} , hasDefaultValue:false, defaultValueCode:null
    SemanticsSortKey? sortKey,

    /// optionalParameters: {SemanticsTag? tagForChildren} , hasDefaultValue:false, defaultValueCode:null
    SemanticsTag? tagForChildren,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onLongPress,

    /// optionalParameters: {void Function()? onScrollLeft} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onScrollLeft,

    /// optionalParameters: {void Function()? onScrollRight} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onScrollRight,

    /// optionalParameters: {void Function()? onScrollUp} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onScrollUp,

    /// optionalParameters: {void Function()? onScrollDown} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onScrollDown,

    /// optionalParameters: {void Function()? onIncrease} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onIncrease,

    /// optionalParameters: {void Function()? onDecrease} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onDecrease,

    /// optionalParameters: {void Function()? onCopy} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onCopy,

    /// optionalParameters: {void Function()? onCut} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onCut,

    /// optionalParameters: {void Function()? onPaste} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onPaste,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByCharacter} , hasDefaultValue:false, defaultValueCode:null
    MoveCursorHandler? onMoveCursorForwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByCharacter} , hasDefaultValue:false, defaultValueCode:null
    MoveCursorHandler? onMoveCursorBackwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByWord} , hasDefaultValue:false, defaultValueCode:null
    MoveCursorHandler? onMoveCursorForwardByWord,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByWord} , hasDefaultValue:false, defaultValueCode:null
    MoveCursorHandler? onMoveCursorBackwardByWord,

    /// optionalParameters: {void Function(TextSelection)? onSetSelection} , hasDefaultValue:false, defaultValueCode:null
    SetSelectionHandler? onSetSelection,

    /// optionalParameters: {void Function(String)? onSetText} , hasDefaultValue:false, defaultValueCode:null
    SetTextHandler? onSetText,

    /// optionalParameters: {void Function()? onDidGainAccessibilityFocus} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onDidGainAccessibilityFocus,

    /// optionalParameters: {void Function()? onDidLoseAccessibilityFocus} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onDidLoseAccessibilityFocus,

    /// optionalParameters: {void Function()? onDismiss} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onDismiss,

    /// optionalParameters: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions} , hasDefaultValue:false, defaultValueCode:null
    Map<CustomSemanticsAction, VoidCallback>? customSemanticsActions,
  }) : super(
          enabled: enabled,
          checked: checked,
          mixed: mixed,
          selected: selected,
          toggled: toggled,
          button: button,
          link: link,
          header: header,
          textField: textField,
          slider: slider,
          keyboardKey: keyboardKey,
          readOnly: readOnly,
          focusable: focusable,
          focused: focused,
          inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,
          hidden: hidden,
          obscured: obscured,
          multiline: multiline,
          scopesRoute: scopesRoute,
          namesRoute: namesRoute,
          image: image,
          liveRegion: liveRegion,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          label: label,
          attributedLabel: attributedLabel,
          value: value,
          attributedValue: attributedValue,
          increasedValue: increasedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          decreasedValue: decreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          hint: hint,
          tooltip: tooltip,
          attributedHint: attributedHint,
          hintOverrides: hintOverrides,
          textDirection: textDirection,
          sortKey: sortKey,
          tagForChildren: tagForChildren,
          onTap: onTap,
          onLongPress: onLongPress,
          onScrollLeft: onScrollLeft,
          onScrollRight: onScrollRight,
          onScrollUp: onScrollUp,
          onScrollDown: onScrollDown,
          onIncrease: onIncrease,
          onDecrease: onDecrease,
          onCopy: onCopy,
          onCut: onCut,
          onPaste: onPaste,
          onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter,
          onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter,
          onMoveCursorForwardByWord: onMoveCursorForwardByWord,
          onMoveCursorBackwardByWord: onMoveCursorBackwardByWord,
          onSetSelection: onSetSelection,
          onSetText: onSetText,
          onDidGainAccessibilityFocus: onDidGainAccessibilityFocus,
          onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus,
          onDismiss: onDismiss,
          customSemanticsActions: customSemanticsActions,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsProperties$Mate(
        enabled: p.getValue('enabled'),
        checked: p.getValue('checked'),
        mixed: p.getValue('mixed'),
        selected: p.getValue('selected'),
        toggled: p.getValue('toggled'),
        button: p.getValue('button'),
        link: p.getValue('link'),
        header: p.getValue('header'),
        textField: p.getValue('textField'),
        slider: p.getValue('slider'),
        keyboardKey: p.getValue('keyboardKey'),
        readOnly: p.getValue('readOnly'),
        focusable: p.getValue('focusable'),
        focused: p.getValue('focused'),
        inMutuallyExclusiveGroup: p.getValue('inMutuallyExclusiveGroup'),
        hidden: p.getValue('hidden'),
        obscured: p.getValue('obscured'),
        multiline: p.getValue('multiline'),
        scopesRoute: p.getValue('scopesRoute'),
        namesRoute: p.getValue('namesRoute'),
        image: p.getValue('image'),
        liveRegion: p.getValue('liveRegion'),
        maxValueLength: p.getValue('maxValueLength'),
        currentValueLength: p.getValue('currentValueLength'),
        label: p.getValue('label'),
        attributedLabel: p.getValue('attributedLabel'),
        value: p.getValue('value'),
        attributedValue: p.getValue('attributedValue'),
        increasedValue: p.getValue('increasedValue'),
        attributedIncreasedValue: p.getValue('attributedIncreasedValue'),
        decreasedValue: p.getValue('decreasedValue'),
        attributedDecreasedValue: p.getValue('attributedDecreasedValue'),
        hint: p.getValue('hint'),
        tooltip: p.getValue('tooltip'),
        attributedHint: p.getValue('attributedHint'),
        hintOverrides: p.getValue('hintOverrides'),
        textDirection: p.getValue('textDirection'),
        sortKey: p.getValue('sortKey'),
        tagForChildren: p.getValue('tagForChildren'),
        onTap: p.getValue('onTap'),
        onLongPress: p.getValue('onLongPress'),
        onScrollLeft: p.getValue('onScrollLeft'),
        onScrollRight: p.getValue('onScrollRight'),
        onScrollUp: p.getValue('onScrollUp'),
        onScrollDown: p.getValue('onScrollDown'),
        onIncrease: p.getValue('onIncrease'),
        onDecrease: p.getValue('onDecrease'),
        onCopy: p.getValue('onCopy'),
        onCut: p.getValue('onCut'),
        onPaste: p.getValue('onPaste'),
        onMoveCursorForwardByCharacter: p.getValue('onMoveCursorForwardByCharacter'),
        onMoveCursorBackwardByCharacter: p.getValue('onMoveCursorBackwardByCharacter'),
        onMoveCursorForwardByWord: p.getValue('onMoveCursorForwardByWord'),
        onMoveCursorBackwardByWord: p.getValue('onMoveCursorBackwardByWord'),
        onSetSelection: p.getValue('onSetSelection'),
        onSetText: p.getValue('onSetText'),
        onDidGainAccessibilityFocus: p.getValue('onDidGainAccessibilityFocus'),
        onDidLoseAccessibilityFocus: p.getValue('onDidLoseAccessibilityFocus'),
        onDismiss: p.getValue('onDismiss'),
        customSemanticsActions: p.getValue('customSemanticsActions'),
      ),
    );
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'checked', init: checked);
    mateParams.set(name: 'mixed', init: mixed);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'toggled', init: toggled);
    mateParams.set(name: 'button', init: button);
    mateParams.set(name: 'link', init: link);
    mateParams.set(name: 'header', init: header);
    mateParams.set(name: 'textField', init: textField);
    mateParams.set(name: 'slider', init: slider);
    mateParams.set(name: 'keyboardKey', init: keyboardKey);
    mateParams.set(name: 'readOnly', init: readOnly);
    mateParams.set(name: 'focusable', init: focusable);
    mateParams.set(name: 'focused', init: focused);
    mateParams.set(name: 'inMutuallyExclusiveGroup', init: inMutuallyExclusiveGroup);
    mateParams.set(name: 'hidden', init: hidden);
    mateParams.set(name: 'obscured', init: obscured);
    mateParams.set(name: 'multiline', init: multiline);
    mateParams.set(name: 'scopesRoute', init: scopesRoute);
    mateParams.set(name: 'namesRoute', init: namesRoute);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'liveRegion', init: liveRegion);
    mateParams.set(name: 'maxValueLength', init: maxValueLength);
    mateParams.set(name: 'currentValueLength', init: currentValueLength);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'attributedLabel', init: attributedLabel);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'attributedValue', init: attributedValue);
    mateParams.set(name: 'increasedValue', init: increasedValue);
    mateParams.set(name: 'attributedIncreasedValue', init: attributedIncreasedValue);
    mateParams.set(name: 'decreasedValue', init: decreasedValue);
    mateParams.set(name: 'attributedDecreasedValue', init: attributedDecreasedValue);
    mateParams.set(name: 'hint', init: hint);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'attributedHint', init: attributedHint);
    mateParams.set(name: 'hintOverrides', init: hintOverrides);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'sortKey', init: sortKey);
    mateParams.set(name: 'tagForChildren', init: tagForChildren);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onScrollLeft', init: onScrollLeft);
    mateParams.set(name: 'onScrollRight', init: onScrollRight);
    mateParams.set(name: 'onScrollUp', init: onScrollUp);
    mateParams.set(name: 'onScrollDown', init: onScrollDown);
    mateParams.set(name: 'onIncrease', init: onIncrease);
    mateParams.set(name: 'onDecrease', init: onDecrease);
    mateParams.set(name: 'onCopy', init: onCopy);
    mateParams.set(name: 'onCut', init: onCut);
    mateParams.set(name: 'onPaste', init: onPaste);
    mateParams.set(name: 'onMoveCursorForwardByCharacter', init: onMoveCursorForwardByCharacter);
    mateParams.set(name: 'onMoveCursorBackwardByCharacter', init: onMoveCursorBackwardByCharacter);
    mateParams.set(name: 'onMoveCursorForwardByWord', init: onMoveCursorForwardByWord);
    mateParams.set(name: 'onMoveCursorBackwardByWord', init: onMoveCursorBackwardByWord);
    mateParams.set(name: 'onSetSelection', init: onSetSelection);
    mateParams.set(name: 'onSetText', init: onSetText);
    mateParams.set(name: 'onDidGainAccessibilityFocus', init: onDidGainAccessibilityFocus);
    mateParams.set(name: 'onDidLoseAccessibilityFocus', init: onDidLoseAccessibilityFocus);
    mateParams.set(name: 'onDismiss', init: onDismiss);
    mateParams.set(name: 'customSemanticsActions', init: customSemanticsActions);
  }
}

/// class SemanticsNode extends AbstractNode with DiagnosticableTreeMixin
class SemanticsNode$Mate extends SemanticsNode with Mate<SemanticsNode$Mate> {
  /// SemanticsNode SemanticsNode({Key? key, void Function()? showOnScreen})
  SemanticsNode$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {void Function()? showOnScreen} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? showOnScreen,
  }) : super(
          key: key,
          showOnScreen: showOnScreen,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsNode$Mate(
        key: p.getValue('key'),
        showOnScreen: p.getValue('showOnScreen'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'showOnScreen', init: showOnScreen);
  }

  /// SemanticsNode SemanticsNode.root({Key? key, void Function()? showOnScreen, required SemanticsOwner owner})
  SemanticsNode$Mate.root({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {void Function()? showOnScreen} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? showOnScreen,

    /// optionalParameters: {required SemanticsOwner owner} , hasDefaultValue:false, defaultValueCode:null
    required SemanticsOwner owner,
  }) : super.root(
          key: key,
          showOnScreen: showOnScreen,
          owner: owner,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsNode$Mate.root(
        key: p.getValue('key'),
        showOnScreen: p.getValue('showOnScreen'),
        owner: p.getValue('owner'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'showOnScreen', init: showOnScreen);
    mateParams.set(name: 'owner', init: owner);
  }
}

/// class SemanticsOwner extends ChangeNotifier
class SemanticsOwner$Mate extends SemanticsOwner with Mate<SemanticsOwner$Mate> {
  /// SemanticsOwner SemanticsOwner({required void Function(SemanticsUpdate) onSemanticsUpdate})
  SemanticsOwner$Mate(
      {
      /// optionalParameters: {required void Function(SemanticsUpdate) onSemanticsUpdate} , hasDefaultValue:false, defaultValueCode:null
      required SemanticsUpdateCallback onSemanticsUpdate})
      : super(onSemanticsUpdate: onSemanticsUpdate) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsOwner$Mate(onSemanticsUpdate: p.getValue('onSemanticsUpdate')),
    );
    mateParams.set(name: 'onSemanticsUpdate', init: onSemanticsUpdate);
  }
}

/// class OrdinalSortKey extends SemanticsSortKey
class OrdinalSortKey$Mate extends OrdinalSortKey with Mate<OrdinalSortKey$Mate> {
  /// OrdinalSortKey OrdinalSortKey(double order, {String? name})
  OrdinalSortKey$Mate(
    /// requiredParameters: double order
    double order, {
    /// optionalParameters: {String? name} , hasDefaultValue:false, defaultValueCode:null
    String? name,
  }) : super(
          order,
          name: name,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => OrdinalSortKey$Mate(
        p.getValue('order'),
        name: p.getValue('name'),
      ),
    );
    mateParams.set(name: 'order', init: order);
    mateParams.set(name: 'name', init: name);
  }
}
