// /// Generated by mate_flutter, please don't edit!

import 'package:flutter/src/semantics/semantics.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/foundation/key.dart';

/// class SemanticsTag
class SemanticsTag$Mate extends SemanticsTag with Mate<SemanticsTag$Mate> {
  /// SemanticsTag SemanticsTag(String name)
  SemanticsTag$Mate(

      /// param: String name
      String name)
      : super(name) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsTag$Mate(p.getValue('name')),
    );
    mateParams.set(name: 'name', init: name);
  }
}

/// class CustomSemanticsAction
class CustomSemanticsAction$Mate extends CustomSemanticsAction with Mate<CustomSemanticsAction$Mate> {
  /// CustomSemanticsAction CustomSemanticsAction({required String label})
  CustomSemanticsAction$Mate(
      {
      /// param: {required String label}
      required String label})
      : super(label: label) {
    mateParams = Params(
      init: this,
      builder: (p) => CustomSemanticsAction$Mate(label: p.getValue('label')),
    );
    mateParams.set(name: 'label', init: label);
  }

  /// CustomSemanticsAction CustomSemanticsAction.overridingAction({required String hint, required SemanticsAction action})
  CustomSemanticsAction$Mate.overridingAction({
    /// param: {required String hint}
    required String hint,

    /// param: {required SemanticsAction action}
    required SemanticsAction action,
  }) : super.overridingAction(
          hint: hint,
          action: action,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => CustomSemanticsAction$Mate.overridingAction(
        hint: p.getValue('hint'),
        action: p.getValue('action'),
      ),
    );
    mateParams.set(name: 'hint', init: hint);
    mateParams.set(name: 'action', init: action);
  }
}

/// class AttributedString
class AttributedString$Mate extends AttributedString with Mate<AttributedString$Mate> {
  /// AttributedString AttributedString(String string, {List<StringAttribute> attributes = const <StringAttribute>[]})
  AttributedString$Mate(
    /// param: String string
    String string, {
    /// param: {List<StringAttribute> attributes = const <StringAttribute>[]}
    required List<StringAttribute> attributes,
  }) : super(
          string,
          attributes: attributes,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AttributedString$Mate(
        p.getValue('string'),
        attributes: p.getValue('attributes'),
      ),
    );
    mateParams.set(name: 'string', init: string);
    mateParams.set(name: 'attributes', init: attributes);
  }
}

/// class AttributedStringProperty extends DiagnosticsProperty<AttributedString>
class AttributedStringProperty$Mate extends AttributedStringProperty with Mate<AttributedStringProperty$Mate> {
  /// AttributedStringProperty AttributedStringProperty(String name, AttributedString? value, {bool showName = true, bool showWhenEmpty = false, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
  AttributedStringProperty$Mate(
    /// param: String name
    String name,

    /// param: AttributedString? value
    AttributedString? value, {
    /// param: {bool showName = true}
    required bool showName,

    /// param: {bool showWhenEmpty = false}
    required bool showWhenEmpty,

    /// param: {Object? defaultValue = kNoDefaultValue}
    Object? defaultValue,

    /// param: {DiagnosticLevel level = DiagnosticLevel.info}
    required DiagnosticLevel level,

    /// param: {String? description}
    String? description,
  }) : super(
          name,
          value,
          showName: showName,
          showWhenEmpty: showWhenEmpty,
          defaultValue: defaultValue,
          level: level,
          description: description,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AttributedStringProperty$Mate(
        p.getValue('name'),
        p.getValue('value'),
        showName: p.getValue('showName'),
        showWhenEmpty: p.getValue('showWhenEmpty'),
        defaultValue: p.getValue('defaultValue'),
        level: p.getValue('level'),
        description: p.getValue('description'),
      ),
    );
    mateParams.set(name: 'name', init: name);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'showName', init: showName);
    mateParams.set(name: 'showWhenEmpty', init: showWhenEmpty);
    mateParams.set(name: 'defaultValue', init: defaultValue);
    mateParams.set(name: 'level', init: level);
    mateParams.set(name: 'description', init: description);
  }
}

/// class SemanticsData with Diagnosticable
class SemanticsData$Mate extends SemanticsData with Mate<SemanticsData$Mate> {
  /// SemanticsData SemanticsData({required int flags, required int actions, required AttributedString attributedLabel, required AttributedString attributedValue, required AttributedString attributedIncreasedValue, required AttributedString attributedDecreasedValue, required AttributedString attributedHint, required String tooltip, required TextDirection? textDirection, required Rect rect, required double elevation, required double thickness, required TextSelection? textSelection, required int? scrollIndex, required int? scrollChildCount, required double? scrollPosition, required double? scrollExtentMax, required double? scrollExtentMin, required int? platformViewId, required int? maxValueLength, required int? currentValueLength, Set<SemanticsTag>? tags, Matrix4? transform, List<int>? customSemanticsActionIds})
  SemanticsData$Mate({
    /// param: {required int flags}
    required int flags,

    /// param: {required int actions}
    required int actions,

    /// param: {required AttributedString attributedLabel}
    required AttributedString attributedLabel,

    /// param: {required AttributedString attributedValue}
    required AttributedString attributedValue,

    /// param: {required AttributedString attributedIncreasedValue}
    required AttributedString attributedIncreasedValue,

    /// param: {required AttributedString attributedDecreasedValue}
    required AttributedString attributedDecreasedValue,

    /// param: {required AttributedString attributedHint}
    required AttributedString attributedHint,

    /// param: {required String tooltip}
    required String tooltip,

    /// param: {required TextDirection? textDirection}
    required TextDirection? textDirection,

    /// param: {required Rect rect}
    required Rect rect,

    /// param: {required double elevation}
    required double elevation,

    /// param: {required double thickness}
    required double thickness,

    /// param: {required TextSelection? textSelection}
    required TextSelection? textSelection,

    /// param: {required int? scrollIndex}
    required int? scrollIndex,

    /// param: {required int? scrollChildCount}
    required int? scrollChildCount,

    /// param: {required double? scrollPosition}
    required double? scrollPosition,

    /// param: {required double? scrollExtentMax}
    required double? scrollExtentMax,

    /// param: {required double? scrollExtentMin}
    required double? scrollExtentMin,

    /// param: {required int? platformViewId}
    required int? platformViewId,

    /// param: {required int? maxValueLength}
    required int? maxValueLength,

    /// param: {required int? currentValueLength}
    required int? currentValueLength,

    /// param: {Set<SemanticsTag>? tags}
    Set<SemanticsTag>? tags,

    /// param: {Matrix4? transform}
    Matrix4? transform,

    /// param: {List<int>? customSemanticsActionIds}
    List<int>? customSemanticsActionIds,
  }) : super(
          flags: flags,
          actions: actions,
          attributedLabel: attributedLabel,
          attributedValue: attributedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          attributedHint: attributedHint,
          tooltip: tooltip,
          textDirection: textDirection,
          rect: rect,
          elevation: elevation,
          thickness: thickness,
          textSelection: textSelection,
          scrollIndex: scrollIndex,
          scrollChildCount: scrollChildCount,
          scrollPosition: scrollPosition,
          scrollExtentMax: scrollExtentMax,
          scrollExtentMin: scrollExtentMin,
          platformViewId: platformViewId,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          tags: tags,
          transform: transform,
          customSemanticsActionIds: customSemanticsActionIds,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsData$Mate(
        flags: p.getValue('flags'),
        actions: p.getValue('actions'),
        attributedLabel: p.getValue('attributedLabel'),
        attributedValue: p.getValue('attributedValue'),
        attributedIncreasedValue: p.getValue('attributedIncreasedValue'),
        attributedDecreasedValue: p.getValue('attributedDecreasedValue'),
        attributedHint: p.getValue('attributedHint'),
        tooltip: p.getValue('tooltip'),
        textDirection: p.getValue('textDirection'),
        rect: p.getValue('rect'),
        elevation: p.getValue('elevation'),
        thickness: p.getValue('thickness'),
        textSelection: p.getValue('textSelection'),
        scrollIndex: p.getValue('scrollIndex'),
        scrollChildCount: p.getValue('scrollChildCount'),
        scrollPosition: p.getValue('scrollPosition'),
        scrollExtentMax: p.getValue('scrollExtentMax'),
        scrollExtentMin: p.getValue('scrollExtentMin'),
        platformViewId: p.getValue('platformViewId'),
        maxValueLength: p.getValue('maxValueLength'),
        currentValueLength: p.getValue('currentValueLength'),
        tags: p.getValue('tags'),
        transform: p.getValue('transform'),
        customSemanticsActionIds: p.getValue('customSemanticsActionIds'),
      ),
    );
    mateParams.set(name: 'flags', init: flags);
    mateParams.set(name: 'actions', init: actions);
    mateParams.set(name: 'attributedLabel', init: attributedLabel);
    mateParams.set(name: 'attributedValue', init: attributedValue);
    mateParams.set(name: 'attributedIncreasedValue', init: attributedIncreasedValue);
    mateParams.set(name: 'attributedDecreasedValue', init: attributedDecreasedValue);
    mateParams.set(name: 'attributedHint', init: attributedHint);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'rect', init: rect);
    mateParams.set(name: 'elevation', init: elevation);
    mateParams.set(name: 'thickness', init: thickness);
    mateParams.set(name: 'textSelection', init: textSelection);
    mateParams.set(name: 'scrollIndex', init: scrollIndex);
    mateParams.set(name: 'scrollChildCount', init: scrollChildCount);
    mateParams.set(name: 'scrollPosition', init: scrollPosition);
    mateParams.set(name: 'scrollExtentMax', init: scrollExtentMax);
    mateParams.set(name: 'scrollExtentMin', init: scrollExtentMin);
    mateParams.set(name: 'platformViewId', init: platformViewId);
    mateParams.set(name: 'maxValueLength', init: maxValueLength);
    mateParams.set(name: 'currentValueLength', init: currentValueLength);
    mateParams.set(name: 'tags', init: tags);
    mateParams.set(name: 'transform', init: transform);
    mateParams.set(name: 'customSemanticsActionIds', init: customSemanticsActionIds);
  }
}

/// class SemanticsHintOverrides extends DiagnosticableTree
class SemanticsHintOverrides$Mate extends SemanticsHintOverrides with Mate<SemanticsHintOverrides$Mate> {
  /// SemanticsHintOverrides SemanticsHintOverrides({String? onTapHint, String? onLongPressHint})
  SemanticsHintOverrides$Mate({
    /// param: {String? onTapHint}
    String? onTapHint,

    /// param: {String? onLongPressHint}
    String? onLongPressHint,
  }) : super(
          onTapHint: onTapHint,
          onLongPressHint: onLongPressHint,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsHintOverrides$Mate(
        onTapHint: p.getValue('onTapHint'),
        onLongPressHint: p.getValue('onLongPressHint'),
      ),
    );
    mateParams.set(name: 'onTapHint', init: onTapHint);
    mateParams.set(name: 'onLongPressHint', init: onLongPressHint);
  }
}

/// class SemanticsProperties extends DiagnosticableTree
class SemanticsProperties$Mate extends SemanticsProperties with Mate<SemanticsProperties$Mate> {
  /// SemanticsProperties SemanticsProperties({bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? link, bool? header, bool? textField, bool? slider, bool? keyboardKey, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? hidden, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? image, bool? liveRegion, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, String? tooltip, AttributedString? attributedHint, SemanticsHintOverrides? hintOverrides, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(bool)? onMoveCursorForwardByWord, void Function(bool)? onMoveCursorBackwardByWord, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, void Function()? onDismiss, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  SemanticsProperties$Mate({
    /// param: {bool? enabled}
    bool? enabled,

    /// param: {bool? checked}
    bool? checked,

    /// param: {bool? mixed}
    bool? mixed,

    /// param: {bool? selected}
    bool? selected,

    /// param: {bool? toggled}
    bool? toggled,

    /// param: {bool? button}
    bool? button,

    /// param: {bool? link}
    bool? link,

    /// param: {bool? header}
    bool? header,

    /// param: {bool? textField}
    bool? textField,

    /// param: {bool? slider}
    bool? slider,

    /// param: {bool? keyboardKey}
    bool? keyboardKey,

    /// param: {bool? readOnly}
    bool? readOnly,

    /// param: {bool? focusable}
    bool? focusable,

    /// param: {bool? focused}
    bool? focused,

    /// param: {bool? inMutuallyExclusiveGroup}
    bool? inMutuallyExclusiveGroup,

    /// param: {bool? hidden}
    bool? hidden,

    /// param: {bool? obscured}
    bool? obscured,

    /// param: {bool? multiline}
    bool? multiline,

    /// param: {bool? scopesRoute}
    bool? scopesRoute,

    /// param: {bool? namesRoute}
    bool? namesRoute,

    /// param: {bool? image}
    bool? image,

    /// param: {bool? liveRegion}
    bool? liveRegion,

    /// param: {int? maxValueLength}
    int? maxValueLength,

    /// param: {int? currentValueLength}
    int? currentValueLength,

    /// param: {String? label}
    String? label,

    /// param: {AttributedString? attributedLabel}
    AttributedString? attributedLabel,

    /// param: {String? value}
    String? value,

    /// param: {AttributedString? attributedValue}
    AttributedString? attributedValue,

    /// param: {String? increasedValue}
    String? increasedValue,

    /// param: {AttributedString? attributedIncreasedValue}
    AttributedString? attributedIncreasedValue,

    /// param: {String? decreasedValue}
    String? decreasedValue,

    /// param: {AttributedString? attributedDecreasedValue}
    AttributedString? attributedDecreasedValue,

    /// param: {String? hint}
    String? hint,

    /// param: {String? tooltip}
    String? tooltip,

    /// param: {AttributedString? attributedHint}
    AttributedString? attributedHint,

    /// param: {SemanticsHintOverrides? hintOverrides}
    SemanticsHintOverrides? hintOverrides,

    /// param: {TextDirection? textDirection}
    TextDirection? textDirection,

    /// param: {SemanticsSortKey? sortKey}
    SemanticsSortKey? sortKey,

    /// param: {SemanticsTag? tagForChildren}
    SemanticsTag? tagForChildren,

    /// param: {void Function()? onTap}
    VoidCallback? onTap,

    /// param: {void Function()? onLongPress}
    VoidCallback? onLongPress,

    /// param: {void Function()? onScrollLeft}
    VoidCallback? onScrollLeft,

    /// param: {void Function()? onScrollRight}
    VoidCallback? onScrollRight,

    /// param: {void Function()? onScrollUp}
    VoidCallback? onScrollUp,

    /// param: {void Function()? onScrollDown}
    VoidCallback? onScrollDown,

    /// param: {void Function()? onIncrease}
    VoidCallback? onIncrease,

    /// param: {void Function()? onDecrease}
    VoidCallback? onDecrease,

    /// param: {void Function()? onCopy}
    VoidCallback? onCopy,

    /// param: {void Function()? onCut}
    VoidCallback? onCut,

    /// param: {void Function()? onPaste}
    VoidCallback? onPaste,

    /// param: {void Function(bool)? onMoveCursorForwardByCharacter}
    MoveCursorHandler? onMoveCursorForwardByCharacter,

    /// param: {void Function(bool)? onMoveCursorBackwardByCharacter}
    MoveCursorHandler? onMoveCursorBackwardByCharacter,

    /// param: {void Function(bool)? onMoveCursorForwardByWord}
    MoveCursorHandler? onMoveCursorForwardByWord,

    /// param: {void Function(bool)? onMoveCursorBackwardByWord}
    MoveCursorHandler? onMoveCursorBackwardByWord,

    /// param: {void Function(TextSelection)? onSetSelection}
    SetSelectionHandler? onSetSelection,

    /// param: {void Function(String)? onSetText}
    SetTextHandler? onSetText,

    /// param: {void Function()? onDidGainAccessibilityFocus}
    VoidCallback? onDidGainAccessibilityFocus,

    /// param: {void Function()? onDidLoseAccessibilityFocus}
    VoidCallback? onDidLoseAccessibilityFocus,

    /// param: {void Function()? onDismiss}
    VoidCallback? onDismiss,

    /// param: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions}
    Map<CustomSemanticsAction, VoidCallback>? customSemanticsActions,
  }) : super(
          enabled: enabled,
          checked: checked,
          mixed: mixed,
          selected: selected,
          toggled: toggled,
          button: button,
          link: link,
          header: header,
          textField: textField,
          slider: slider,
          keyboardKey: keyboardKey,
          readOnly: readOnly,
          focusable: focusable,
          focused: focused,
          inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,
          hidden: hidden,
          obscured: obscured,
          multiline: multiline,
          scopesRoute: scopesRoute,
          namesRoute: namesRoute,
          image: image,
          liveRegion: liveRegion,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          label: label,
          attributedLabel: attributedLabel,
          value: value,
          attributedValue: attributedValue,
          increasedValue: increasedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          decreasedValue: decreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          hint: hint,
          tooltip: tooltip,
          attributedHint: attributedHint,
          hintOverrides: hintOverrides,
          textDirection: textDirection,
          sortKey: sortKey,
          tagForChildren: tagForChildren,
          onTap: onTap,
          onLongPress: onLongPress,
          onScrollLeft: onScrollLeft,
          onScrollRight: onScrollRight,
          onScrollUp: onScrollUp,
          onScrollDown: onScrollDown,
          onIncrease: onIncrease,
          onDecrease: onDecrease,
          onCopy: onCopy,
          onCut: onCut,
          onPaste: onPaste,
          onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter,
          onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter,
          onMoveCursorForwardByWord: onMoveCursorForwardByWord,
          onMoveCursorBackwardByWord: onMoveCursorBackwardByWord,
          onSetSelection: onSetSelection,
          onSetText: onSetText,
          onDidGainAccessibilityFocus: onDidGainAccessibilityFocus,
          onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus,
          onDismiss: onDismiss,
          customSemanticsActions: customSemanticsActions,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsProperties$Mate(
        enabled: p.getValue('enabled'),
        checked: p.getValue('checked'),
        mixed: p.getValue('mixed'),
        selected: p.getValue('selected'),
        toggled: p.getValue('toggled'),
        button: p.getValue('button'),
        link: p.getValue('link'),
        header: p.getValue('header'),
        textField: p.getValue('textField'),
        slider: p.getValue('slider'),
        keyboardKey: p.getValue('keyboardKey'),
        readOnly: p.getValue('readOnly'),
        focusable: p.getValue('focusable'),
        focused: p.getValue('focused'),
        inMutuallyExclusiveGroup: p.getValue('inMutuallyExclusiveGroup'),
        hidden: p.getValue('hidden'),
        obscured: p.getValue('obscured'),
        multiline: p.getValue('multiline'),
        scopesRoute: p.getValue('scopesRoute'),
        namesRoute: p.getValue('namesRoute'),
        image: p.getValue('image'),
        liveRegion: p.getValue('liveRegion'),
        maxValueLength: p.getValue('maxValueLength'),
        currentValueLength: p.getValue('currentValueLength'),
        label: p.getValue('label'),
        attributedLabel: p.getValue('attributedLabel'),
        value: p.getValue('value'),
        attributedValue: p.getValue('attributedValue'),
        increasedValue: p.getValue('increasedValue'),
        attributedIncreasedValue: p.getValue('attributedIncreasedValue'),
        decreasedValue: p.getValue('decreasedValue'),
        attributedDecreasedValue: p.getValue('attributedDecreasedValue'),
        hint: p.getValue('hint'),
        tooltip: p.getValue('tooltip'),
        attributedHint: p.getValue('attributedHint'),
        hintOverrides: p.getValue('hintOverrides'),
        textDirection: p.getValue('textDirection'),
        sortKey: p.getValue('sortKey'),
        tagForChildren: p.getValue('tagForChildren'),
        onTap: p.getValue('onTap'),
        onLongPress: p.getValue('onLongPress'),
        onScrollLeft: p.getValue('onScrollLeft'),
        onScrollRight: p.getValue('onScrollRight'),
        onScrollUp: p.getValue('onScrollUp'),
        onScrollDown: p.getValue('onScrollDown'),
        onIncrease: p.getValue('onIncrease'),
        onDecrease: p.getValue('onDecrease'),
        onCopy: p.getValue('onCopy'),
        onCut: p.getValue('onCut'),
        onPaste: p.getValue('onPaste'),
        onMoveCursorForwardByCharacter: p.getValue('onMoveCursorForwardByCharacter'),
        onMoveCursorBackwardByCharacter: p.getValue('onMoveCursorBackwardByCharacter'),
        onMoveCursorForwardByWord: p.getValue('onMoveCursorForwardByWord'),
        onMoveCursorBackwardByWord: p.getValue('onMoveCursorBackwardByWord'),
        onSetSelection: p.getValue('onSetSelection'),
        onSetText: p.getValue('onSetText'),
        onDidGainAccessibilityFocus: p.getValue('onDidGainAccessibilityFocus'),
        onDidLoseAccessibilityFocus: p.getValue('onDidLoseAccessibilityFocus'),
        onDismiss: p.getValue('onDismiss'),
        customSemanticsActions: p.getValue('customSemanticsActions'),
      ),
    );
    mateParams.set(name: 'enabled', init: enabled);
    mateParams.set(name: 'checked', init: checked);
    mateParams.set(name: 'mixed', init: mixed);
    mateParams.set(name: 'selected', init: selected);
    mateParams.set(name: 'toggled', init: toggled);
    mateParams.set(name: 'button', init: button);
    mateParams.set(name: 'link', init: link);
    mateParams.set(name: 'header', init: header);
    mateParams.set(name: 'textField', init: textField);
    mateParams.set(name: 'slider', init: slider);
    mateParams.set(name: 'keyboardKey', init: keyboardKey);
    mateParams.set(name: 'readOnly', init: readOnly);
    mateParams.set(name: 'focusable', init: focusable);
    mateParams.set(name: 'focused', init: focused);
    mateParams.set(name: 'inMutuallyExclusiveGroup', init: inMutuallyExclusiveGroup);
    mateParams.set(name: 'hidden', init: hidden);
    mateParams.set(name: 'obscured', init: obscured);
    mateParams.set(name: 'multiline', init: multiline);
    mateParams.set(name: 'scopesRoute', init: scopesRoute);
    mateParams.set(name: 'namesRoute', init: namesRoute);
    mateParams.set(name: 'image', init: image);
    mateParams.set(name: 'liveRegion', init: liveRegion);
    mateParams.set(name: 'maxValueLength', init: maxValueLength);
    mateParams.set(name: 'currentValueLength', init: currentValueLength);
    mateParams.set(name: 'label', init: label);
    mateParams.set(name: 'attributedLabel', init: attributedLabel);
    mateParams.set(name: 'value', init: value);
    mateParams.set(name: 'attributedValue', init: attributedValue);
    mateParams.set(name: 'increasedValue', init: increasedValue);
    mateParams.set(name: 'attributedIncreasedValue', init: attributedIncreasedValue);
    mateParams.set(name: 'decreasedValue', init: decreasedValue);
    mateParams.set(name: 'attributedDecreasedValue', init: attributedDecreasedValue);
    mateParams.set(name: 'hint', init: hint);
    mateParams.set(name: 'tooltip', init: tooltip);
    mateParams.set(name: 'attributedHint', init: attributedHint);
    mateParams.set(name: 'hintOverrides', init: hintOverrides);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'sortKey', init: sortKey);
    mateParams.set(name: 'tagForChildren', init: tagForChildren);
    mateParams.set(name: 'onTap', init: onTap);
    mateParams.set(name: 'onLongPress', init: onLongPress);
    mateParams.set(name: 'onScrollLeft', init: onScrollLeft);
    mateParams.set(name: 'onScrollRight', init: onScrollRight);
    mateParams.set(name: 'onScrollUp', init: onScrollUp);
    mateParams.set(name: 'onScrollDown', init: onScrollDown);
    mateParams.set(name: 'onIncrease', init: onIncrease);
    mateParams.set(name: 'onDecrease', init: onDecrease);
    mateParams.set(name: 'onCopy', init: onCopy);
    mateParams.set(name: 'onCut', init: onCut);
    mateParams.set(name: 'onPaste', init: onPaste);
    mateParams.set(name: 'onMoveCursorForwardByCharacter', init: onMoveCursorForwardByCharacter);
    mateParams.set(name: 'onMoveCursorBackwardByCharacter', init: onMoveCursorBackwardByCharacter);
    mateParams.set(name: 'onMoveCursorForwardByWord', init: onMoveCursorForwardByWord);
    mateParams.set(name: 'onMoveCursorBackwardByWord', init: onMoveCursorBackwardByWord);
    mateParams.set(name: 'onSetSelection', init: onSetSelection);
    mateParams.set(name: 'onSetText', init: onSetText);
    mateParams.set(name: 'onDidGainAccessibilityFocus', init: onDidGainAccessibilityFocus);
    mateParams.set(name: 'onDidLoseAccessibilityFocus', init: onDidLoseAccessibilityFocus);
    mateParams.set(name: 'onDismiss', init: onDismiss);
    mateParams.set(name: 'customSemanticsActions', init: customSemanticsActions);
  }
}

/// class SemanticsNode extends AbstractNode with DiagnosticableTreeMixin
class SemanticsNode$Mate extends SemanticsNode with Mate<SemanticsNode$Mate> {
  /// SemanticsNode SemanticsNode({Key? key, void Function()? showOnScreen})
  SemanticsNode$Mate({
    /// param: {Key? key}
    Key? key,

    /// param: {void Function()? showOnScreen}
    VoidCallback? showOnScreen,
  }) : super(
          key: key,
          showOnScreen: showOnScreen,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsNode$Mate(
        key: p.getValue('key'),
        showOnScreen: p.getValue('showOnScreen'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'showOnScreen', init: showOnScreen);
  }

  /// SemanticsNode SemanticsNode.root({Key? key, void Function()? showOnScreen, required SemanticsOwner owner})
  SemanticsNode$Mate.root({
    /// param: {Key? key}
    Key? key,

    /// param: {void Function()? showOnScreen}
    VoidCallback? showOnScreen,

    /// param: {required SemanticsOwner owner}
    required SemanticsOwner owner,
  }) : super.root(
          key: key,
          showOnScreen: showOnScreen,
          owner: owner,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsNode$Mate.root(
        key: p.getValue('key'),
        showOnScreen: p.getValue('showOnScreen'),
        owner: p.getValue('owner'),
      ),
    );
    mateParams.set(name: 'key', init: key);
    mateParams.set(name: 'showOnScreen', init: showOnScreen);
    mateParams.set(name: 'owner', init: owner);
  }
}

/// class SemanticsOwner extends ChangeNotifier
class SemanticsOwner$Mate extends SemanticsOwner with Mate<SemanticsOwner$Mate> {
  /// SemanticsOwner SemanticsOwner({required void Function(SemanticsUpdate) onSemanticsUpdate})
  SemanticsOwner$Mate(
      {
      /// param: {required void Function(SemanticsUpdate) onSemanticsUpdate}
      required SemanticsUpdateCallback onSemanticsUpdate})
      : super(onSemanticsUpdate: onSemanticsUpdate) {
    mateParams = Params(
      init: this,
      builder: (p) => SemanticsOwner$Mate(onSemanticsUpdate: p.getValue('onSemanticsUpdate')),
    );
    mateParams.set(name: 'onSemanticsUpdate', init: onSemanticsUpdate);
  }
}

/// class OrdinalSortKey extends SemanticsSortKey
class OrdinalSortKey$Mate extends OrdinalSortKey with Mate<OrdinalSortKey$Mate> {
  /// OrdinalSortKey OrdinalSortKey(double order, {String? name})
  OrdinalSortKey$Mate(
    /// param: double order
    double order, {
    /// param: {String? name}
    String? name,
  }) : super(
          order,
          name: name,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => OrdinalSortKey$Mate(
        p.getValue('order'),
        name: p.getValue('name'),
      ),
    );
    mateParams.set(name: 'order', init: order);
    mateParams.set(name: 'name', init: name);
  }
}
