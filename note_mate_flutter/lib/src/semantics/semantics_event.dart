// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/semantics/semantics_event.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';

/// class AnnounceSemanticsEvent extends SemanticsEvent
class AnnounceSemanticsEvent$Mate extends AnnounceSemanticsEvent with Mate<AnnounceSemanticsEvent$Mate> {
  /// AnnounceSemanticsEvent AnnounceSemanticsEvent(String message, TextDirection textDirection, {Assertiveness assertiveness = Assertiveness.polite})
  AnnounceSemanticsEvent$Mate(
    /// requiredParameters: String message
    String message,

    /// requiredParameters: TextDirection textDirection
    TextDirection textDirection, {
    /// optionalParameters: {Assertiveness assertiveness = Assertiveness.polite} , hasDefaultValue:true, defaultValueCode:Assertiveness.polite
    required Assertiveness assertiveness,
  }) : super(
          message,
          textDirection,
          assertiveness: assertiveness,
        ) {
    mateParams = Params(
      init: this,
      builder: (p) => AnnounceSemanticsEvent$Mate(
        p.getValue('message'),
        p.getValue('textDirection'),
        assertiveness: p.getValue('assertiveness'),
      ),
    );
    mateParams.set(name: 'message', init: message);
    mateParams.set(name: 'textDirection', init: textDirection);
    mateParams.set(name: 'assertiveness', init: assertiveness);
  }
}

/// class TooltipSemanticsEvent extends SemanticsEvent
class TooltipSemanticsEvent$Mate extends TooltipSemanticsEvent with Mate<TooltipSemanticsEvent$Mate> {
  /// TooltipSemanticsEvent TooltipSemanticsEvent(String message)
  TooltipSemanticsEvent$Mate(

      /// requiredParameters: String message
      String message)
      : super(message) {
    mateParams = Params(
      init: this,
      builder: (p) => TooltipSemanticsEvent$Mate(p.getValue('message')),
    );
    mateParams.set(name: 'message', init: message);
  }
}
