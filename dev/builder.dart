// Copyright (c) 2018, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';

Builder pagesLoadBuilder(BuilderOptions options) => PagesLoadBuilder();

Builder pagesGenBuilder(BuilderOptions options) => PageGenBuilder();

class Gen {
  List<LibraryElement> libs = List.empty(growable: true);
  Gen._();
  void add(LibraryElement lib) {
    libs.add(lib);
  }
}

final gen = Gen._();

class PagesLoadBuilder implements Builder {
  @override
  Future build(BuildStep buildStep) async {
    // Get the `LibraryElement` for the primary input.
    var inputLibrary = await buildStep.inputLibrary;
    gen.add(inputLibrary);
    log("PagesLoadBuilder: ${inputLibrary.identifier}");
  }

  @override
  final buildExtensions = const {
    '.dart': ['.dart.info']
  };
}

void log(Object? object) {
  print("${DateTime.now()} - ${object}");
}

/// Adds `generated.css` to the `web` directory.
class PageGenBuilder implements Builder {
  @override
  Future build(BuildStep buildStep) async {
    log("-----------PageGenBuilder  libs.length:${gen.libs.length}");

    StringBuffer sb = StringBuffer();
    sb.write("""
/*
Generated by PagesBuilder, time: ${DateTime.now()} 
*/
""");

    for (var pageLib in gen.libs) {
      log("page lib: ${pageLib.name} ");
      sb.write("""
import '${pageLib.identifier}' ;
      """);
    }

    String toPath = buildStep.allowedOutputs.first.path;
    await buildStep.writeAsString(AssetId(buildStep.inputId.package, toPath), sb.toString());

    // final inputLibrary =
    //     await buildStep.resolver.libraryFor(buildStep.inputId, allowSyntaxErrors: true);
    // var lib = await step.inputLibrary;
  }

  @override
  final buildExtensions = const {
    r'$package$': ['lib/generated/pages.g.dart']
  };
}
