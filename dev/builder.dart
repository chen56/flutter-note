// Copyright (c) 2018, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';

Builder pagesLoadBuilder(BuilderOptions options) => PagesLoadBuilder();

Builder pagesGenBuilder(BuilderOptions options) => PageGenBuilder();

class Gen {
  List<LibraryElement> libs = List.empty(growable: true);
  Gen._();
  void add(LibraryElement lib) {
    libs.add(lib);
  }
}

final gen = Gen._();

/// Adds `generated.css` to the `web` directory.
/// For a source `dart` file, generate `file.dart.info.json` containing
/// information about the
class PagesLoadBuilder implements Builder {
  @override
  Future build(BuildStep buildStep) async {
    // Get the `LibraryElement` for the primary input.
    var inputLibrary = await buildStep.inputLibrary;
    gen.add(inputLibrary);

    print("-----------PagesLoadBuilder");
    print("-----------PagesLoadBuilder  inputId: ${buildStep.inputId}     ");
    print("-----------PagesLoadBuilder  entryLib: ${inputLibrary.children}     ");
    print("-----------PagesLoadBuilder  libs ${gen.libs.map((e) => e.source)}");

    // Resolves all libraries reachable from the primary input.
    var resolver = buildStep.resolver;
    var visibleLibraries = await resolver.libraries.length;

    // var info = buildStep.inputId.addExtension('.info');

//     await buildStep.writeAsString(info, '''
//          Input ID: ${buildStep.inputId}
//      Member count: ${entryLib.topLevelElements.length}
// Visible libraries: $visibleLibraries
// ''');
  }

  @override
  final buildExtensions = const {
    '.dart': ['.dart.info']
  };
}

/// Adds `generated.css` to the `web` directory.
class PageGenBuilder implements Builder {
  @override
  Future build(BuildStep buildStep) async {
    print("-----------PageGenBuilder  libs ${gen.libs}");

    if (!await buildStep.resolver.isLibrary(buildStep.inputId)) {
      print("isLibrary not: ${buildStep.inputId}     ");
      var x = await buildStep.resolver.libraries.toList();
      print("isLibrary not: ${x}     ");

      return;
    }

    print("buildStep.inputId.package: ${buildStep.inputId.package}     ");
    String toPath = buildStep.allowedOutputs.first.path;

    // final inputLibrary =
    //     await buildStep.resolver.libraryFor(buildStep.inputId, allowSyntaxErrors: true);
    // var lib = await step.inputLibrary;
    await buildStep.writeAsString(AssetId(buildStep.inputId.package, toPath), content());
  }

  @override
  final buildExtensions = const {
    r'$package$': ['lib/generated/pages.g.dart']
  };

  static String content() => '''
/*
Generated by PagesBuilder, time: ${DateTime.now()} 
*/
''';
}
