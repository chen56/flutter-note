// Copyright (c) 2018, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';

Builder pagesLoadBuilder(BuilderOptions options) => PagesLoadBuilder();

Builder pagesGenBuilder(BuilderOptions options) => PagesGenBuilder();

class Gen {
  List<LibraryElement> libs = List.empty(growable: true);
  Gen._();
  void add(LibraryElement lib) {
    libs.add(lib);
  }
}

final gen = Gen._();

class PagesLoadBuilder implements Builder {
  @override
  Future build(BuildStep buildStep) async {
    // Get the `LibraryElement` for the primary input.
    var inputLibrary = await buildStep.inputLibrary;
    gen.add(inputLibrary);
    log("PagesLoadBuilder: ${inputLibrary.identifier}");
  }

  @override
  final buildExtensions = const {
    '.dart': ['.dart.info']
  };
}

void log(Object? object) {
  print("${DateTime.now()} - ${object}");
}

/// Adds `generated.css` to the `web` directory.
///
// part of 'pages.dart';
//
// abstract class _Paths {
//   final Path<void> home = _put("/", rootPage);
//   final Path<void> welcome = _put("/note/welcome", welcomePage);
//   final Path<void> noteSelf = _put("/note/welcome/note-self", page);
//
//   final Path<void> notFound = _put("/not_found", notFoundPage);
//   final Path<void> note = _put("/note", notePage);
// }
class PagesGenBuilder implements Builder {
  @override
  Future build(BuildStep buildStep) async {
    log("-----------PagesGenBuilder  libs.length:${gen.libs.length}");

    StringBuffer content = StringBuffer();
    StringBuffer import = StringBuffer();
    gen.libs.sort((a, b) => a.identifier.compareTo(b.identifier));
    for (var pageLib in gen.libs) {
      String pagePackage = flat(pageLib.identifier);
      import.write("""import '${pageLib.identifier}' as g$pagePackage ;\n""");
    }

    StringBuffer fields = StringBuffer();
    for (var pageLib in gen.libs) {
      String pagePackage = flat(pageLib.identifier);
      String path = pageLib.identifier
          .replaceAll("package:flutter_note/pages", "")
          .replaceAll("/@page.dart", "");
      path = path == "" ? "/" : path;
      fields.write("""    final Path $pagePackage = _put("$path", g${pagePackage}.page);\n""");
    }

    content.write("""
/*
Generated by PagesGenBuilder, time: ${DateTime.now()} 
*/
import 'package:flutter_note/navigator_v2.dart';
import 'package:flutter_note/page.dart';
${import.toString()}
part 'pages.dart';

abstract class _Paths {
${fields.toString()}
}
""");

    String toPath = buildStep.allowedOutputs.first.path;
    await buildStep.writeAsString(AssetId(buildStep.inputId.package, toPath), content.toString());

    // final inputLibrary =
    //     await buildStep.resolver.libraryFor(buildStep.inputId, allowSyntaxErrors: true);
    // var lib = await step.inputLibrary;
  }

  @override
  final buildExtensions = const {
    r'$package$': ['lib/pages/pages.g.dart']
  };

  /// 包名平整化：
  /// package:flutter-note/pages/note/1.welcome/1.note-self/@page.dart
  /// --->
  /// note$welcome$note_self
  ///
  /// 规则：
  /// - 去掉package:flutter-note前缀
  /// - 去掉用来排序的数字前缀"1."
  /// - '/'换成'$'
  /// - 其他特殊字符换成'_'
  String flat(String packageName) {
    String result = packageName.replaceAll("package:flutter_note/pages/", "");
    if (result == "@page.dart") {
      return "root";
    }
    return result
        .replaceAll(RegExp("/@page.dart\$"), "") // 后缀
        .replaceAll(RegExp("/\\d+\."), "/") // 1.note-self -> note-self
        .replaceAll("/", "\$")
        .replaceAll(".", "_")
        .replaceAll("-", "_")
        .replaceAll("@", "_");
  }
}
