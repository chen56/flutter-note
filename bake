#!/usr/bin/env bash
set -o errtrace #trap inherited in sub script
set -o errexit
set -o functrace #trap inherited in function

# set -x


# build 命令是。。。。。
# build 命令是。。。。。2
@build() {
   echo "in build: $@"
}

# run 命令是。。。。。
# run 命令是。。。。。2
@run() {
   return
}

# a 
# b
listCmds(){ 
  IFS=$'\n'; for f in $(declare -F); 
  do 
    local cmdName=${f:11};
    # extdebug可以让 `declare -F`打印出文件和行号，比如：
    #   $ declare -F nvm_version
    #   -------------------------------------------
    #   nvm_version 536 /Users/cc/.nvm/nvm.sh
    shopt -s extdebug 
    readarray -d " " -t cmd <<< $(declare -F $cmdName)
    if  test ! $(grep "^@" <<< "$cmdName")  ; then # 只有@开头的才认为是子命令
      continue
    fi
    lineno=${cmd[1]}; start=$(( lineno - 3 )); end=$(( lineno - 1 )); 
    cmdHelp=`cat ${cmd[2]} | sed -n "${start},${end}p"`
    echo
    echo " ${cmd[0]}"
    echo -e $cmdHelp
    # echo -e "  ${subCmd}"; 
  done
  return 
}

_help=$(cat <<END_HEREDOC
./bake 是不想再用makefile了，父子命令就用这个就行了
----------------
$(listCmds)
----------------
END_HEREDOC
)
shopt -s extdebug
# declare -F list_cmds


if [ "$#" == 0 ]; then  echo "$_help"; exit 0 ; fi

echo "[@$@]"
"@$@"
