#!/usr/bin/env bash
set -o errtrace #trap inherited in sub script
set -o errexit
set -o functrace #trap inherited in function
# set -x

# bake == (bash)ake == 去make的bash工具
# v0.1.20230222
# ------------------------------------------------------------------------------
# bake 是个简单的自建命令工具，以替代Makefile的子命令功能
# make工具的主要特点是处理文件依赖进行增量编译，但flutter、golang、java、js项目的build工具
# 太厉害了，这几年唯一还在用Makefile的理由就是他的子命令机制: "make build"、
# "make run", 可以方便的自定义单一入口的父子命令，但Makefile本身的语法套路也很复杂，
# 很多批处理还是要靠bash, 这就尴尬了，工具太多，麻烦！本脚本尝试彻底摆脱使用Makefile。
# 经尝试，代码很少啊 ，公共代码几十行啊，还主要是提取显示子命令帮助的，功能足够了：
#   ./bake       # 列子命令看帮助，
#   ./bake build # 子命令
#   ./bake run   # 子命令
# bake命令规则：
# 1. 定义以斜杠"/"为前缀的function作为子命令，/build、/run、/assets/list、
#    表示命令的其父子关系，执行时去掉斜杠/, 构成父子命令：./bake assets list -x -y -z
# 2. 命令function上方的一行注释作为命令的帮助，显示在命令列表
# 3. 除bash外，不依赖其他，包括linux coreutils,以便跨平台更简单
# 搞docker那样的命令树，应该也不难，目前和make一样只支持一级子命令，暂时够用。
# ------------------------------------------------------------------------------

if (( BASH_VERSINFO[0] < 4 ))  ; then
  echo "Error: 您bash版本过低(BASH_VERSINFO: ${BASH_VERSINFO[*]})，请安装bash 4+ 后重启terminal:
  apt install bash  # ubuntu
  brew install bash # mac"
  exit 1
fi

##########################################
# get cmd real path
# 不要用readlink取实际路径,mac和linux语法不兼容
# 也不用coreutils的realpath，保持macos的简单
##########################################
function _realpath(){
  local _path="$1"
  while [ -h "$_path" ] ; do
      ls=$(ls -ld "$_path")
      link=$(expr "$ls" : '.*-> \(.*\)$')
      if expr "$link" : '/.*' > /dev/null; then
          _path="$link"
      else
          _path=$(dirname "$_path")"/$link"
      fi
  done
  echo "$_path"
}

/test1?shortHelp(){ cat << EOF
测试shortHelp的规范 ，shortHelp line 1
shortHelp line 2
shortHelp line 3
EOF
}
/test1() {
  local var1;
  local a=($(tr "/" " " <<< "/aa/b"))
  echo "var 1 $a "
  local myArray4
  IFS=$'\n' mapfile -t myArray4 <<< $(ls -al)
  declare -p myArray4
}

/test_option?shortHelp(){ cat << EOF
测试参数规范
  ./bake test2 -h
  ./bake test2 -n chen56
  ./bake test2 --name chen56
EOF
}
/test_option?option(){
  option "-n" "--name"    "名称" "参数帮助:名称"
  option "-v" "--version" ""        "参数帮助:版本"
}
/test_option(){
  echo "your name(-n):${-n}"
  echo "your name(--name):${--name}"
}
option(){
  local short="$1"
  local long="$2"

  local arg="$3"
  local help="$4"
  local hasArg=false;
  [[ $arg != "" ]] && hasArg=true

  local toString="short:'$short', long:'$long',arg:'$arg', help:'$help'"
  if [[ $long == "" ]]; then
     cat <<< "long option must not be empty: ($toString)
        # option 'short option' 'long option(no empty!)'   'arg info'   'help'
        # option '-n'           '--name'                   'your name'  'give me your name'
     "
     exit 1
  fi

}

/test_option?option
#echo 临时退出 && exit 1

# 项目init
/init?shortHelp(){ cat <<< "初始化项目工具"; }
/init() {
  git lfs install
}

# 构建命令,可附加flutter build的参数
/build?shortHelp(){ cat <<< "构建命令,可附加flutter build的参数"; }
/build() {
  echo "bake build  $@"
  # web-renderer=canvaskit 太大了十几MB,所以要用html版
  # github只能发到项目目录下，所以加个base-href: https://chen56.github.com/flutter-note
  flutter build web --release --web-renderer html --base-href='/flutter-note/' "$@"
}

# 构建命令
/test?shortHelp(){ cat <<< "test"; }
/test() {
  echo "bake test"
  # canvaskit web版文件太大了十几MB
  flutter test --web-renderer html
}


/preview?shortHelp(){ cat <<< "预览，先build,再开web server: http://localhost:8000"; }
/preview() {
  echo "bake preview"
  flutter build web --release --web-renderer html --base-href='/' "$@"
# 	npx http-server ./build/web --port 8000
  deno run --allow-env --allow-read --allow-sys --allow-net npm:http-server ./build/web --port 8000
}

/build?shortHelp?shortHelp(){ cat <<< "预览，先build,再开web server: http://localhost:8000"; }
/build() {
  echo "bake build"
  flutter build web --release --web-renderer html --base-href='/' "$@"
}

# dev run local http://localhost:8000
/run?shortHelp(){ cat <<< "开发模式 flutter run: http://localhost:8000"; }
/run() {
  echo "bake run"
  flutter run --web-renderer html --device-id chrome --enable-experiment=records
}

# 清理
/clean?shortHelp(){ cat <<< "清理项目目录"; }
/clean() {
  echo "bake clean"
  flutter clean
}

/?help() {
cat <<- '__EOF'
____ _    _  _ ___ ___ ____ ____    _  _ ____ ___ ____
|___ |    |  |  |   |  |___ |__/ __ |\ | |  |  |  |___
|    |___ |__|  |   |  |___ |  \    | \| |__|  |  |___
Usage:
./bake [command] [options]

Available Commands:
__EOF

print_commands

}

##########################################
# 以下是bake命令行玩法的公共代码，与业务无关
##########################################
on_error() {
  echo "traped an error: ↑ , trace: ↓" >&2
  print_stack
}

print_stack() {
  local i=0
  local errout
  while true; do
    errout=$(caller $i 2>&1 && true) && true
    if [[ $? != 0 ]]; then break; fi
    echo "  $errout" >&2

    i=$((i + 1))
  done
}

print_commands() {
  IFS=$'\n'

  # 我们要找出:
  # 1. 以/开头的函数，作为子命令
  # 2. 不包含?
  # 列出所有/开头的命令
  # declare -F 会列出所有定义,比如
  # $ declare -F
  #     => declare -f /build
  #     => declare -f /help
  #转成命令全名
  #     => /build
  #     => /help
  IFS=$'\n' # 分配回车符给IFS
  local cmdFullnames=$(declare -F | grep "^declare -f /" | grep -v "?" | sed -e 's/^declare -f //g')
  readarray -t cmdFullnames <<<"$cmdFullnames"
  local cmds=()
  local shortHelps=()
  local maxLengthOfCmd=0
  local i=0
  for cmdFullname in ${cmdFullnames[*]}; do
    # 先去第一个"/"，再按"/"split成数组
    local split=($(tr "/" " " <<<"${cmdFullname:1}"))
    local cmd=${split[0]} #目前只用 第一个命令
    local shortHelp=$("${cmdFullname}?shortHelp" 2>/dev/null || true)
    cmds[i]=${cmd}
    shortHelps[i]=${shortHelp}
    # 求命令的最大长度，一会padding用
    if ((${#cmd} > maxLengthOfCmd)); then maxLengthOfCmd=${#cmd}; fi
    i=$((i + 1))
  done

  # print all commands and shortHelp
  for i in ${!cmds[*]}; do
    local padding=$(printf %-$((maxLengthOfCmd + 6))b "")
    # 第二行开始，都补空格
    local shortHelp=$(sed "2,1000s/^/$padding/g" <<<"${shortHelps[i]}")
    printf "  %-$((maxLengthOfCmd))s    ${shortHelp}\n" "${cmds[i]}"
  done

  return
}

trap " set +x; on_error " ERR

# 执行./bake 没参数，即没子命令，就显示help
if [ "$#" == 0 ]; then
  /?help # 根命令的帮助
  echo
  echo ">>> Error: missing command './bake COMMAND'"
  exit 1
fi

cmd="$1"
# cmd 加上/前缀就是相应的函数
cmdFunc="/$cmd"
if ! declare -f "$cmdFunc" >/dev/null 2>&1; then
  echo "Error: 命令[${cmd}] 不存在, 未找到相应的函数[${cmdFunc}()]"
  exit 1
fi

# 加上/前缀执行相应的function
# 比如"./bike build" ,执行的是"/build"函数
# shellcheck disable=SC2145
"/$@"
