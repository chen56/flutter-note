#!/usr/bin/env bash
set -o errtrace #trap inherited in sub script
set -o errexit
set -o functrace #trap inherited in function
# set -x

# bake == (bash)ake == 去make的bash工具
# ------------------------------------------------------------------------------
# bake 是个简单的自建命令工具，以替代Makefile的子命令功能
# make工具的主要特点是处理文件依赖进行增量编译，但flutter、golang、java、js项目的build工具
# 太厉害了，这几年唯一还在用Makefile的理由就是他的子命令机制: "make build"、
# "make run", 可以方便的自定义单一入口的父子命令，但Makefile本身的语法套路也很复杂，
# 很多批处理还是要靠bash, 这就尴尬了，工具太多，麻烦！本脚本尝试彻底摆脱使用Makefile。
# 经尝试，代码很少啊 ，公共代码几十行啊，还主要是提取显示子命令帮助的，功能足够了：
#   ./bake       # 列子命令看帮助，
#   ./bake build # 子命令
#   ./bake run   # 子命令
# bake命令规则：
# 1. 定义以斜杠"/"为前缀的function作为子命令，/build、/run、/assets/list、
#    表示命令的其父子关系，执行时去掉斜杠/, 构成父子命令：./bake assets list -x -y -z
# 2. 命令function上方的一行注释作为命令的帮助，显示在命令列表
# 3. 除bash外，不依赖其他，包括linux coreutils,以便跨平台更简单
# 搞docker那样的命令树，应该也不难，目前和make一样只支持一级子命令，暂时够用。
# ------------------------------------------------------------------------------

if (( BASH_VERSINFO[0] < 4 ))  ; then
  echo "Error: 您bash版本过低(BASH_VERSINFO: ${BASH_VERSINFO[*]})，请安装bash 4+ 后重启terminal:
  apt install bash  # ubuntu
  brew install bash # mac"
  exit 1
fi

##########################################
# get cmd real path
# 不要用readlink取实际路径,mac和linux语法不兼容
# 也不用coreutils的realpath，保持macos的简单
##########################################
function _realpath(){
  local _path="$1"
  while [ -h "$_path" ] ; do
      ls=$(ls -ld "$_path")
      link=$(expr "$ls" : '.*-> \(.*\)$')
      if expr "$link" : '/.*' > /dev/null; then
          _path="$link"
      else
          _path=$(dirname "$_path")"/$link"
      fi
  done
  echo "$_path"
}

# 临时试验命令行工具用
/temp() {
  declare | grep path
  echo "${FUNCNAME[0]} "
}

# 项目init
/init() {
  git lfs install
}

# 构建命令
/build() {
  echo "bake build"
  # canvaskit web版文件太大了十几MB
  flutter build web --release --web-renderer html --base-href='/flutter-note/'
}


# build + run local http://localhost:8000
/preview() {
  echo "bake preview"
  /build
# 	npx http-server ./build/web --port 8080
  deno run --allow-env --allow-read --allow-sys --allow-net npm:http-server ./build/web --port 8000
}

# dev run local http://localhost:8000
/run() {
  echo "bake run"
  flutter run --web-renderer html --device-id chrome --enable-experiment=records
}

# 清理
/clean() {
  echo "bake clean"
  flutter clean
}


/help() {

cat <<- '__EOF'
____ _    _  _ ___ ___ ____ ____    _  _ ____ ___ ____
|___ |    |  |  |   |  |___ |__/ __ |\ | |  |  |  |___
|    |___ |__|  |   |  |___ |  \    | \| |__|  |  |___
Usage:
./bake [command] [options]

Available Commands:
__EOF

  # IFS=$'\n'指分配回车符给IFS
  IFS=$'\n'

  # 列出所有/开头的命令
  # declare -F 会列出所有定义, 我们要找出以/开头的函数，作为子命令
  # $ declare -F
  #     => declare -f /build
  for f in $(declare -F); do
    local func=${f:11}

    # 必须/开头
    if test ! "$(grep "^/" <<<"$func")"; then  continue; fi

    # `extdebug`可以让 `declare -F`打印出文件和行号，比如：
    # $ declare -F nvm_version
    #     => nvm_version 536 /Users/cc/.nvm/nvm.sh
    local funcRecord; shopt -s extdebug; readarray -d " " -t funcRecord < <( declare -F "$func" )
    local lineno=${funcRecord[1]}
    local file=${funcRecord[2]}
    # shellcheck disable=SC2155
    local realFile=$(_realpath "$(cat <<< "$file")")
    readarray lines < <(cat "${realFile}")

    # 去掉前缀/就是cmd名，
    # 等同：local cmd="$(sed 's/\///' <<< "$func" ) "
    # bash语法：${PARAMETER/PATTERN/STRING}
    # <https://wiki.bash-hackers.org/syntax/pe#search_and_replace>
    local cmd="${func/\//}"

    # 只取cmd函数头顶上的第一行，作为cmd的help描述
    local cmdOneLineHelp="${lines[(lineno-2)]}"
    # 头顶上不是注释行的cmd就认为没有帮助
    if ! grep "^[ ]*#" <<< "$cmdOneLineHelp" >/dev/null 2>&1  ; then  cmdOneLineHelp=" -" ; fi
    # 去掉前缀#，bash语法：${PARAMETER/PATTERN/STRING}
    printf "  %-12s %s\n" "$cmd" ${cmdOneLineHelp/\#/}
  done
  return
}

# 执行./bake 没参数，即没子命令，就显示help
if [ "$#" == 0 ]; then
  /help
  echo
  echo ">>> Error: missing command './bake COMMAND'"
  exit 1
fi

# shellcheck disable=SC2145
cmd="$1"
# cmd 加上/前缀就是相应的函数
cmdFunc="/$cmd"
if ! declare -f "$cmdFunc" >/dev/null 2>&1 ; then
  echo "Error: 命令[${cmd}] 不存在, 未找到相应的函数[${cmdFunc}()]"
  exit 1
fi

# 加上/前缀执行相应的function
# 比如"./bike build" ,执行的是"/build"函数
# shellcheck disable=SC2145
"/$@"